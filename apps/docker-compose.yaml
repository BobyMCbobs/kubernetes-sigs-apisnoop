# docker-compose.yml

# #+NAME: hasura docker-compose

# hasura/docker-compose.yaml
# Kompose Note: We don’t support anything 3.4 and above at the moment
version: "3"

services:
  postgres:
    # image: postgres:11.5 # debian-slim / alternative: postgres:11.5-alpine
    # we need our image to include plpython3u
    image: "raiinbow/postgres:${USER}"
    build: "./postgres"
      # dockerfile: postgres/Dockerfile
      # context: .
    container_name: "${USER}-postgres"
    restart: always
    shm_size: '64GB' # we currently use big boxes
    #cap_add: # capabilities
    #  - ALL
    environment:
      # These are postgres server setup options
      - POSTGRES_DB=${PGDATABASE}
      - POSTGRES_USER=${PGUSER}
      - POSTGRES_PASSWORD=${PGPASS}
      - PGDATA=/dev/shm/pgdata
      # - POSTGRES_PASSWORD_FILE="/run/secrets/postgres-passwd" # k8s secret style
      # - POSTGRES_INITDB_ARGS=""
      # - POSTGRES_INITDB_WALDIR=""
      # - PGDATA="/var/lib/postgresql/data/"
      # These are psql client defaults
      - PGDATABASE=${PGDATABASE}
      - PGUSER=${PGUSER}
    #volumes:
      # runs *sql and executable *sh and sources non-executable *sh
      # - ./postgres/initdb:/docker-entrypoint-initdb.d:Z
      # mainly mounted for debugging
      #- ./hasura/migrations:/migrations:Z
    ports: # exposed to docker host
      - "${PGPORT}:5432"
    # Expose ports without publishing them to the host machine
    # - they’ll only be accessible to linked services.
    expose: # exposed to other containers
      - "5432"
    networks: # separate from web due to traefik routing on sharing.io
      - db
    labels:
      kompose.controller.type: deployment # or daemonset or replicationcontroller
      kompose.service.type: loadbalancer # nodeport / clusterip / loadbalancer / headless
      kompose.service.expose: "${USER}-*.apisnoop.io" # true / hostname
      # Maybe see if kompose can work with let's encrypt
      #- "kompose.service.expose.tls-secret="
      # kompose.volume.size: 1Gi
      traefik.enable: true
      traefik.basic.port: 8080
      traefik.basic.protocol: http
      traefik.basic.frontend.rule: "Host:${USER}-hasura.sharing.io"
  hasura:
    #image: hasura/graphql-engine:v1.0.0-beta.5
    #image: hasura/graphql-engine:v1.0.0-beta.5.cli-migrations
    image: "raiinbow/hasura:${USER}"
    build: "./hasura"
    # build:
    #   dockerfile: hasura/Dockerfile
    #   context: .
    #   image: "raiinbow/hasura:${USER}"
    container_name: "${USER}-hasura"
    restart: always
    networks:
      - web
      - db
    environment:
      - HASURA_GRAPHQL_DATABASE_URL=postgres://${PGUSER}:${PGPASS}@postgres:5432/${PGDATABASE}
      - HASURA_GRAPHQL_ENABLE_CONSOLE=true
    # volumes:
    #   - ./hasura/migrations:/hasura-migrations:Z
    ports: # exposed to docker host
      - "${HASURA_PORT}:8080"
    expose:
      - "8080"
    labels:
      - "traefik.docker.network=web"
      - "traefik.enable=true"
      - "traefik.basic.port=8080"
      - "traefik.basic.protocol=http"
      - "traefik.basic.frontend.rule=Host:${USER}-hasura.sharing.io"
  # pgadmin:
  #   container_name: "${USER}-pgadmin"
  #   image: dpage/pgadmin4:4.12
  #   restart: always
  #   networks:
  #     - db
  #     - web
  #   environment:
  #     - PGADMIN_DEFAULT_EMAIL=apisnoop@cncf.io
  #     - PGADMIN_DEFAULT_PASSWORD=${PGPASS}
  #     # python setup.py --dump-servers /tmp/servers.json --user apisnoop@cncf.io
  #     - PGADMIN_SERVER_JSON_FILE=/apisnoop/servers.json
  #     - PGADMIN_CONFIG_APP_NAME=APISnoopQL
  #     - PGADMIN_CONFIG_APP_COPYRIGHT="Copyright (C) 2019, The Cloud Native Compute Foundation"
  #     - PGADMIN_CONFIG_LOGIN_BANNER="Welcome to APISnoopQL!"
  #     - PGADMIN_CONFIG_ALLOW_SAVE_PASSWORD=True
  #     - PGADMIN_CONFIG_MAX_QUERY_HIST_STORED=1234
  #     - PGADMIN_CONFIG_SESSION_COOKIE_NAME=apisnoop_session
  #     - PGADMIN_CONFIG_UPGRADE_CHECK_ENABLED=False
  #     - PGADMIN_CONFIG_SESSION_EXPIRATION_TIME=7
  #   volumes:
  #    - ./pgadmin:/apisnoop:Z
  #   ports: # exposed to docker host
  #     - "${PGADMIN_PORT}:80"
  #   expose:
  #     - "80"
  #   labels:
  #     - "traefik.docker.network=web"
  #     - "traefik.enable=true"
  #     - "traefik.basic.port=80"
  #     - "traefik.basic.protocol=http"
  #     - "traefik.basic.frontend.rule=Host:${USER}-pgadmin.sharing.io"
#volumes:
#  migrations:
networks:
  web:
    external: true
  db:
