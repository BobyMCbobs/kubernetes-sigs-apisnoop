#+TITLE: Auditlogger Code, Deployment, and Reference Materials
#+TODO: TODO(t) IN-PROGRESS(i) WAITING(w) | DONE(d)
#+PROPERTY: header-args :comments none 
#+

* Introduction 
  Logs all events in a kubernetes cluster and inserts it into the apisnoop DB.  Useful for running mock-test code and making sure this test hits the endpoints you intend.
* App
** Configuration

Here are some environment variables to configure auditlogger

| Name                     | Purpose                                                                     | Default                                                             |
|--------------------------+-----------------------------------------------------------------------------+---------------------------------------------------------------------|
| APP_DB_CONNECTION_STRING | Connection string to talk to the APIsnoop Postgres database                 | ~postgres://apisnoop:s3cretsauc3@postgres/apisnoop?sslmode=disable~ |
| APP_DB_AUDIT_EVENT_TABLE | The table inside the APIsnoop postgres database to insert the audit data to | ~audit_event~                                                       |
| APP_PORT                 | The HTTP port to serve the auditlogger API on                               | ~9900~                                                              |
| APP_DISABLE_LOGS         | Toggle false to disable logs for the HTTP traffic and incoming data         | ~false~                                                            |

** javascript code
#+NAME: auditlogger bot (nodejs)
#+begin_src js :tangle ./app/auditlogger.js :results silent
  const connectionString = typeof process.env.APP_DB_CONNECTION_STRING !== 'undefined' ? process.env.APP_DB_CONNECTION_STRING : 'postgres://apisnoop:s3cretsauc3@postgres/apisnoop?sslmode=disable'
  const auditTableName = typeof process.env.APP_DB_AUDIT_EVENT_TABLE !== 'undefined' ? process.env.APP_DB_AUDIT_EVENT_TABLE : 'audit_event'
  const appPort = typeof process.env.APP_PORT !== 'undefined' ? process.env.APP_PORT : '9900'
  const appDisableLogs = typeof process.env.APP_DISABLE_LOGS !== 'undefined' ? process.env.APP_DISABLE_LOGS : 'false'
  const express = require('express')
  const app = express()
  const bodyParser = require('body-parser')
  const morgan = require('morgan')
  const knex = require('knex')({
      client: 'pg',
      connection: connectionString
  })

  var postgresIsReady = false

  console.log(`[status] using connection string: ${connectionString}`)

  function logs(...messages) {
      if (appDisableLogs == 'true') {
          return
      }
      console.log(...messages)
  }

  function hello (req, res, next) {
      const helloMsg = 'Hey! I\'m your friendly neighbourhood auditlogger. Note: the endpoint /events is where logging takes place.'
      res.json({ message: helloMsg })
      return res.end()
  }

  function requestFailure (req, res, next, message) {
      res.status(400)
      res.json({ message })
      return res.end()
  }

  function checkForBodyContent (req, res, next) {
      if (Object.keys(req.body).length === 0 || typeof req.body !== 'object') {
          console.log('[error] request contains no body')
          return requestFailure(req, res, next, 'request must contain a body')
      }
      return next()
  }

  function checkUserAgent (req, res, next) {
      const requestContent = req.body
      if (req.headers['user-agent'] !== 'kube-apiserver-admission') {
          console.log('[error] request didn\'t come from kube-apiserver')
          return requestFailure(req, res, next, 'Error: request must come from Kubernetes apiserver')
      }
      return next()
  }

  function postgresReadyCheck (req, res, next) {
      if (postgresIsReady === true) {
          return next()
      }
      console.log('[status] postgres is unready')
      knex.raw(`SELECT to_regclass('${auditTableName}');`).then(resp => {
          postgresIsReady = resp.rows[0].to_regclass !== null
          return next()
      })
  }

  function logEventToDB (event) {
      // set each relevant part of data load to a variable, for easier insertion statement into db below
      const {
          auditID,
          stage,
          verb,
          requestURI,
          level,
          apiVersion,
          userAgent,
          user,
          objectRef,
          sourceIPs,
          annotations,
          requestObject,
          responseObject,
          responseStatus,
          stageTimestamp,
          requestReceivedTimestamp
      } = event

      // regex for useragent, to determine if a test or conformance test hit
      const STARTS_WITH_E2E = new RegExp('^e2e.test')
      const HAS_CONF_IN_BRACKETS = new RegExp('\\[Conformance\\]')

      logs('[status] inserting into database')
      let dataToInsert = {
          bucket: 'apisnoop',
          job: 'live',
          audit_id: auditID,
          stage,
          event_verb: verb,
          request_uri: requestURI,
          event_level: level,
          api_version: apiVersion,
          useragent: userAgent,
          test_hit: STARTS_WITH_E2E.test(userAgent),
          conf_test_hit: HAS_CONF_IN_BRACKETS.test(userAgent),
          event_user: user,
          object_namespace: objectRef ? objectRef.namespace : null,
          object_type: objectRef ? objectRef.resource : null,
          object_group: objectRef ? objectRef.apiGroup : null,
          object_ver: objectRef ? objectRef.apiVersion : null,
          source_ips: JSON.stringify(sourceIPs),
          annotations: JSON.stringify(annotations),
          request_object: JSON.stringify(requestObject),
          response_object: JSON.stringify(responseObject),
          response_status: JSON.stringify(responseStatus),
          stage_timestamp: stageTimestamp,
          request_received_timestamp: requestReceivedTimestamp,
          data: JSON.stringify(event)
      }
      logs("Inserting:", dataToInsert.event_verb, dataToInsert.request_uri, dataToInsert.bucket, dataToInsert.job, dataToInsert.useragent)

      knex.transaction((trx) => {
          knex(`${auditTableName}`).transacting(trx).insert(dataToInsert)
              .then(trx.commit)
              .catch(trx.rollback)
      }).then(resp => {
          logs('[status] successfully submitted entry')
          return { success: true, err: null }
      }).catch(err => {
          console.log(`[error] database: ${err}`)
          return { success: false, err }
      })
  }

  function logEventsToDB (req, res, next) {
      const requestContent = req.body
      const items = requestContent.items

      var results = items.map((event, index) => {
          console.log(`Request [${index}/${items.length}]:`, event.requestURI, event.userAgent)
          return logEventToDB(event)
      })
      if (results.some(r => r.success === false)) {
          let errs = results
              .filter(r => r.success === false)
              .map(e => e.err);
          return requestFailure(req, nes, next, errs)
      }
      res.json({ message: 'operation complete; data inserted' })
      return res.end()
  }

  console.log('[status] starting apisnoop-auditlog-event-handler')

  app.use(bodyParser.json({
    extended: true,
    limit: '100mb'
  }))
  app.use(express.json())
  app.use(morgan('combined'))

  app.get('/', hello)
  app.post('/events', [checkForBodyContent, postgresReadyCheck], logEventsToDB)

  knex.raw('select 0;').then(() => {
      console.log('[status] connected to database')
      app.listen(appPort, () => {
          console.log(`[status] started; listening on port ${appPort}`)
      })
  }).catch(err => {
      console.log('[error] No database connection found.')
      console.log(err)
      process.exit(1)
  })
#+end_src


#+NAME: auditlogger bot (nodejs) package
#+begin_src json :tangle ./app/package.json :comments no :results silent
{
  "name": "apisnoop-auditlogger",
  "version": "0.0.2",
  "description": "AuditLogger for apisnoop",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "Caleb Woodbine <caleb@ii.coop>",
  "license": "Apache-2.0",
  "dependencies": {
    "express": "^4.17.1",
    "knex": "^0.20.1",
    "morgan": "^1.9.1",
    "pg": "^7.12.1"
  }
}
#+end_src

** Dockerfile
 #+NAME: dockerfile for auditlogger bot
 #+begin_src dockerfile :tangle ./app/Dockerfile
   FROM node:12.14.1-alpine3.11
   RUN adduser -D -H -h /app user
   WORKDIR /app
   COPY auditlogger.js .
   COPY package.json .
   RUN npm i
   EXPOSE 9900
   USER user
   CMD ["node", "auditlogger.js"]
 #+end_src

** cloudbuild
  #+NAME: auditlogger cloudbuild 
#+begin_src yaml :tangle ./app/cloudbuild.yaml :comments no :results silent
    steps:
      - name: gcr.io/cloud-builders/docker
        args: ['build', '-t', 'gcr.io/$PROJECT_ID/auditlogger:$_GIT_TAG',
              '--build-arg', 'IMAGE_ARG=gcr.io/$PROJECT_ID/auditlogger:$_GIT_TAG',
              '.']
    substitutions:
      _GIT_TAG: '12345'
    images:
      - 'gcr.io/$PROJECT_ID/auditlogger:$_GIT_TAG'
    options:
      substitution_option: 'ALLOW_LOOSE'
#+end_src

** Build the container image
Build the container image:
#+BEGIN_SRC shell :async yes
  TAG="$(date +%Y.%m.%d)"
  docker build -t raiinbow/auditlogger:"$TAG" app
#+END_SRC

#+RESULTS:
#+begin_example
Sending build context to Docker daemon  10.75kB
Step 1/9 : FROM node:12.14.1-alpine3.11
 ---> b0dc3a5e5e9e
Step 2/9 : RUN adduser -D -H -h /app user
 ---> Running in cf406d7f8e52
Removing intermediate container cf406d7f8e52
 ---> a594ad0c24a4
Step 3/9 : WORKDIR /app
 ---> Running in 3e176c6a8d90
Removing intermediate container 3e176c6a8d90
 ---> 985e805dafa5
Step 4/9 : COPY auditlogger.js .
 ---> ebd367717f44
Step 5/9 : COPY package.json .
 ---> 0df7b5c90163
Step 6/9 : RUN npm i
 ---> Running in 5141aa5b0ee9
[91mnpm WARN deprecated resolve-url@0.2.1: https://github.com/lydell/resolve-url#deprecated
[0m[91mnpm WARN deprecated urix@0.1.0: Please see https://github.com/lydell/urix#deprecated
[0m[91mnpm notice created a lockfile as package-lock.json. You should commit this file.
[0m[91mnpm WARN apisnoop-auditlogger@0.0.2 No repository field.
[0m[91m
[0madded 227 packages from 171 contributors and audited 227 packages in 11.046s

1 package is looking for funding
  run `npm fund` for details

found 0 vulnerabilities

Removing intermediate container 5141aa5b0ee9
 ---> 4f55946ef552
Step 7/9 : EXPOSE 9900
 ---> Running in c3f6877d3d28
Removing intermediate container c3f6877d3d28
 ---> 87c671377c69
Step 8/9 : USER user
 ---> Running in 218ff7e8cbbd
Removing intermediate container 218ff7e8cbbd
 ---> 4b603e331a4d
Step 9/9 : CMD ["node", "auditlogger.js"]
 ---> Running in 840d861c1571
Removing intermediate container 840d861c1571
 ---> a84d2055ae5b
Successfully built a84d2055ae5b
Successfully tagged raiinbow/auditlogger:2020.08.20
#+end_example

Push the image:
#+BEGIN_SRC shell :async yes
  TAG="$(date +%Y.%m.%d)"
  docker push raiinbow/auditlogger:"$TAG" 2>&1
  :
#+END_SRC

#+RESULTS:
#+begin_example
The push refers to repository [docker.io/raiinbow/auditlogger]
8d0a7a90a236: Preparing
2ffcc1ae88f2: Preparing
d79c5a4fbe79: Preparing
5ffe26237eec: Preparing
b99ea7d4c871: Preparing
5280d2327565: Preparing
77d806cfa004: Preparing
930c8bc01816: Preparing
5216338b40a7: Preparing
5280d2327565: Waiting
77d806cfa004: Waiting
930c8bc01816: Waiting
5216338b40a7: Waiting
d79c5a4fbe79: Pushed
5ffe26237eec: Pushed
b99ea7d4c871: Pushed
2ffcc1ae88f2: Pushed
5280d2327565: Layer already exists
77d806cfa004: Layer already exists
930c8bc01816: Layer already exists
5216338b40a7: Layer already exists
8d0a7a90a236: Pushed
2020.08.20: digest: sha256:e2cbcf3f5c102ae8ae5aa8e1628e55ab6e662c9f4f98c5c1121ef4e952cdaa77 size: 2199
#+end_example

* Deployment
** deployment
#+NAME: deployment.yaml   
#+begin_src yaml :tangle ./deployment/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: apisnoop-auditlogger
spec:
  replicas: 1
  selector:
    matchLabels:
      io.apisnoop.auditlogger: apisnoop-auditlogger
  template:
    metadata:
      labels:
        io.apisnoop.auditlogger: apisnoop-auditlogger
    spec:
      containers:
        - name: apisnoop-auditlogger
          image: "raiinbow/auditlogger:v20200211-0.9.34-1-g24cf96f"
          #command:
          #  - "sleep"
          #args: 
          #  - "10000000"
          ports:
            - containerPort: 9900
#+end_src

** kustomization
#+NAME: kustomization.yaml   
#+begin_src yaml :tangle ./deployment/kustomization.yaml
apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization
resources:
  - deployment.yaml
  - service.yaml
#+end_src

** service
#+NAME: service.yaml   
#+begin_src yaml :tangle ./deployment/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: apisnoop-auditlogger
spec:
  ports:
    - port: 9900
      targetPort: 9900
  selector:
    io.apisnoop.auditlogger: apisnoop-auditlogger
  clusterIP: 10.96.96.96
  type: ClusterIP
#+end_src

* Footnotes
