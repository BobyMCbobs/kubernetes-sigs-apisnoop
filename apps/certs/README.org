#+TITLE: APISnoop certificates

* Resources
** Issuer
#+begin_src yaml :tangle ./issuer.yaml
  apiVersion: cert-manager.io/v1
  kind: ClusterIssuer
  metadata:
    name: letsencrypt-prod-apisnoop
  spec:
    acme:
      server: https://acme-v02.api.letsencrypt.org/directory
      email: hostmaster@ii.coop
      privateKeySecretRef:
        name: letsencrypt-prod-apisnoop
      solvers:
        - http01:
            ingress:
              class: nginx
          selector:
            dnsNames:
              - "apisnoop.127.0.0.1.xip.io"
              - "pgadmin.127.0.0.1.xip.io"
              - "tilt.127.0.0.1.xip.io"
              - "hasura.127.0.0.1.xip.io"
#+end_src

** Certificate
#+begin_src yaml :tangle ./cert.yaml
  apiVersion: cert-manager.io/v1
  kind: Certificate
  metadata:
    name: letsencrypt-prod-apisnoop
  spec:
    secretName: letsencrypt-prod-apisnoop
    issuerRef:
      name: letsencrypt-prod-apisnoop
      kind: ClusterIssuer
      group: cert-manager.io
    dnsNames:
      - "apisnoop.127.0.0.1.xip.io"
      - "pgadmin.127.0.0.1.xip.io"
      - "tilt.127.0.0.1.xip.io"
      - "hasura.127.0.0.1.xip.io"
#+end_src

* Patch resources with correct host
#+begin_src shell
  CURRENT_IP=127.0.0.1
  NEW_HOST=caleb.sharing.io
  sed -i s:$CURRENT_IP.xip.io:$NEW_HOST:g *.yaml
#+end_src

* Install resources
#+begin_src shell
  kubectl -n apisnoop apply -f issuer.yaml -f cert.yaml
#+end_src

* Patch Ingresses to use TLS certs from LetsEncrypt cert
#+begin_src shell
  for ing in $(kubectl -n apisnoop get ingress -o=jsonpath='{.items[*].metadata.name}'); do
    echo "Patching ingress/$ing"
    HOST=$(kubectl -n apisnoop get ingress $ing -o=jsonpath='{.items[*].spec.rules[*].host}')
    kubectl -n apisnoop patch ingress $ing -p "{\"spec\":{\"tls\":[{\"hosts\":[\"$ing\"],\"secretName\":\"letsencrypt-prod-apisnoop\"}]}}"
  done
#+end_src
