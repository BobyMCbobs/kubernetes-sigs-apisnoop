#+TITLE: json => triggers => views in PostgreSQL
#+TODO: TODO | TADA
* api swaggers
** swagger.json table

#+NAME: raw_swaggers
#+BEGIN_SRC sql-mode 
CREATE TABLE raw_swaggers (
    id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ingested_at timestamp DEFAULT CURRENT_TIMESTAMP,
    -- version text NOT NULL,
    -- definition_id text NOT NULL,
    data jsonb NOT NULL
);
#+END_SRC

** swagger.json loader

https://www.postgresql.org/docs/current/sql-copy.html

NEXT!
- pipe swagger's definitions into sql table
- ensure that when we go to 'hasura.sharing.io' you can see this table.
- construct some views, through sql and graphql.

With ~jq -c~ this is one line of json for the entire file ~5 Megabytes.
Which will be the 'jsonb' type for the data column when we import.

#+BEGIN_SRC tmate
  cat ../swagger.json | jq -c . \
  | psql -c "COPY raw_swaggers (data) FROM STDIN (DELIMITER e'\x02', FORMAT 'csv', QUOTE e'\x01');"
#+END_SRC

* api operations + parameters = responses
** TADA operations view from swagger.json table
   CLOSED: [2019-07-31 Wed 00:54]
- [X] model it after existing api_operations table
- [ ] ensure additional loading of parameters
- [ ] ensure additional loading of responses

#+NAME: existing api_operations table
#+BEGIN_SRC sql-mode :eval never
CREATE TABLE public.api_operations (
    id text NOT NULL,
    method text NOT NULL,
    path text NOT NULL,
    regexp text NOT NULL,
    "group" text NOT NULL,
    version text NOT NULL,
    kind text NOT NULL,
    "category" text NOT NULL,
    description text NOT NULL
  );
create index api_operations_id on api_operations(id);
create index api_operations_method on api_operations(method);
create index api_operations_regexp on api_operations(regexp);
#+END_SRC

In the swagger.json, we have a =paths= key, with subkeys like =/api= and =/api/v1/=.  Each of these are also objects, containing keys based on the operation method.

And so we would want to create records for each path, and then records for each method within the path.

The way I did this was to first create a view called raw_paths, which just contains the swagger it came from and the entirety of its jsonb.
We can then use that to generate our api_operations

#+NAME: raw_paths view
#+BEGIN_SRC sql-mode :eval never
  CREATE OR REPLACE VIEW "public"."raw_paths" AS 
    SELECT raw_swaggers.id AS raw_swagger_id,
           d.key AS path,
           d.value
      FROM (raw_swaggers
            JOIN LATERAL jsonb_each((raw_swaggers.data -> 'paths'::text)) d(key, value) ON (true))
     ORDER BY d.key;
#+END_SRC

We then use raw_paths in this new api_operations view.  
I assign a UUID for each record entry, so we can create parameters and responses views that link back to the right operation record.

To be able to assign a UUID we need to extend our db to have a uuid generator.  We can do this in hasura, by just throwing in raw sql.

#+NAME: extend db for uuid generation
#+BEGIN_SRC sql-mode :eval never
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
#+END_SRC

Now we can make a new uuid as id with =uuid_generate_v1()=.  This'll let us easily link our params and responses view to the right operation record.

#+NAME: New api_operations view
#+BEGIN_SRC sql-mode
  DROP VIEW api_operations CASCADE;
  CREATE OR REPLACE VIEW "public"."api_operations" AS 
    SELECT (d.value ->> 'operationId'::text) AS op_id,
           uuid_generate_v1() as id,
           raw_paths.raw_swagger_id as raw_swagger_id,
           d.key AS method,
           raw_paths.path as path,
           ((d.value -> 'x-kubernetes-group-version-kind'::text) ->> 'group'::text) AS "group",
           ((d.value -> 'x-kubernetes-group-version-kind'::text) ->> 'version'::text) AS version,
           ((d.value -> 'x-kubernetes-group-version-kind'::text) ->> 'kind'::text) AS kind,
           (d.value ->> 'description'::text) AS description,
           (d.value ->> 'x-kubernetes-action'::text) AS x_kubernetes_action,
           (d.value -> 'tags'::text) AS tags,
           (d.value -> 'schemes'::text) AS schemes,
           (d.value -> 'consumes'::text) AS consumes,
           (d.value -> 'responses'::text) AS responses,
           (d.value -> 'parameters'::text) AS parameters
      FROM (raw_paths
            JOIN LATERAL jsonb_each(raw_paths.value) d(key, value) ON (true))
     ORDER BY (d.value ->> 'operationId'::text);
#+END_SRC

#+RESULTS: New api_operations view
#+begin_src sql-mode
NOTICE:  drop cascades to 4 other objects
DETAIL:  drop cascades to view operations_with_parameters
drop cascades to view api_operations_parameters
drop cascades to view api_operations_responses
drop cascades to view responses
DROP VIEW
CREATE VIEW
#+end_src

*** 887/1101 operations are not deprecated

**** 887 Operations that are not deployments

#+NAME: active operations
#+BEGIN_SRC sql-mode
  select count(distinct operation_id)
  from api_operations
  where not deprecated;
  -- order by operation_id;
#+END_SRC

#+RESULTS: active operations
#+begin_src sql-mode
 count 
-------
   887
(1 row)

#+end_src

**** 1100 total operations

#+NAME: total operations
#+BEGIN_SRC sql-mode
  select count(distinct operation_id)
  from api_operations;
  -- where not deprecated;
  -- order by operation_id;
#+END_SRC

#+RESULTS: total operations
#+begin_src sql-mode
 count 
-------
  1100
(1 row)

#+end_src

**** 225 unmatched method + paths
#+NAME: unmatech method + path count
#+BEGIN_SRC sql-mode
  select count(distinct (method, path ))
  from api_operations
  where operation_id is null
  and path not like '%alpha%'
  and path not like '%beta%';
  -- order by path;
#+END_SRC

#+RESULTS: unmatech method + path count
#+begin_src sql-mode
 count 
-------
   225
(1 row)

#+end_src
**** parameters http method doesn't match anything operations

#+NAME: the only unmatech method is parameters
#+BEGIN_SRC sql-mode
  select distinct method
  from api_operations
  where operation_id is null
  and path not like '%alpha%'
  and path not like '%beta%';
  -- order by path;
#+END_SRC

#+RESULTS: unmatech method
#+begin_src sql-mode
   method   
------------
 parameters
(1 row)

#+end_src

*** 8 methods
#+NAME: methods
#+BEGIN_SRC sql-mode
  select distinct method from api_operations order by method;
#+END_SRC

#+RESULTS: methods
#+begin_src sql-mode
   method   
------------
 delete
 get
 head
 options
 parameters
 patch
 post
 put
(8 rows)

#+end_src

*** 564 paths
#+NAME: paths
#+BEGIN_SRC sql-mode
  select distinct path from api_operations order by path;
#+END_SRC

#+RESULTS: paths
#+begin_src sql-mode
                                           path                                            
-------------------------------------------------------------------------------------------
 /api/
 /apis/
 /apis/admissionregistration.k8s.io/
 /apis/admissionregistration.k8s.io/v1/
 /apis/admissionregistration.k8s.io/v1beta1/
 /apis/admissionregistration.k8s.io/v1beta1/mutatingwebhookconfigurations
 /apis/admissionregistration.k8s.io/v1beta1/mutatingwebhookconfigurations/{name}
 /apis/admissionregistration.k8s.io/v1beta1/validatingwebhookconfigurations
 /apis/admissionregistration.k8s.io/v1beta1/validatingwebhookconfigurations/{name}
 /apis/admissionregistration.k8s.io/v1beta1/watch/mutatingwebhookconfigurations
 /apis/admissionregistration.k8s.io/v1beta1/watch/mutatingwebhookconfigurations/{name}
 /apis/admissionregistration.k8s.io/v1beta1/watch/validatingwebhookconfigurations
 /apis/admissionregistration.k8s.io/v1beta1/watch/validatingwebhookconfigurations/{name}
 /apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations
 /apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations/{name}
 /apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations
 /apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations/{name}
 /apis/admissionregistration.k8s.io/v1/watch/mutatingwebhookconfigurations
 /apis/admissionregistration.k8s.io/v1/watch/mutatingwebhookconfigurations/{name}
 /apis/admissionregistration.k8s.io/v1/watch/validatingwebhookconfigurations
 /apis/admissionregistration.k8s.io/v1/watch/validatingwebhookconfigurations/{name}
 /apis/apiextensions.k8s.io/
 /apis/apiextensions.k8s.io/v1beta1/
 /apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions
 /apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/{name}
 /apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/{name}/status
 /apis/apiextensions.k8s.io/v1beta1/watch/customresourcedefinitions
 /apis/apiextensions.k8s.io/v1beta1/watch/customresourcedefinitions/{name}
 /apis/apiregistration.k8s.io/
 /apis/apiregistration.k8s.io/v1/
 /apis/apiregistration.k8s.io/v1/apiservices
 /apis/apiregistration.k8s.io/v1/apiservices/{name}
 /apis/apiregistration.k8s.io/v1/apiservices/{name}/status
 /apis/apiregistration.k8s.io/v1beta1/
 /apis/apiregistration.k8s.io/v1beta1/apiservices
 /apis/apiregistration.k8s.io/v1beta1/apiservices/{name}
 /apis/apiregistration.k8s.io/v1beta1/apiservices/{name}/status
 /apis/apiregistration.k8s.io/v1beta1/watch/apiservices
 /apis/apiregistration.k8s.io/v1beta1/watch/apiservices/{name}
 /apis/apiregistration.k8s.io/v1/watch/apiservices
 /apis/apiregistration.k8s.io/v1/watch/apiservices/{name}
 /apis/apps/
 /apis/apps/v1/
 /apis/apps/v1beta1/
 /apis/apps/v1beta1/controllerrevisions
 /apis/apps/v1beta1/deployments
 /apis/apps/v1beta1/namespaces/{namespace}/controllerrevisions
 /apis/apps/v1beta1/namespaces/{namespace}/controllerrevisions/{name}
 /apis/apps/v1beta1/namespaces/{namespace}/deployments
 /apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}
 /apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}/rollback
 /apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}/scale
 /apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}/status
 /apis/apps/v1beta1/namespaces/{namespace}/statefulsets
 /apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}
 /apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}/scale
 /apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}/status
 /apis/apps/v1beta1/statefulsets
 /apis/apps/v1beta1/watch/controllerrevisions
 /apis/apps/v1beta1/watch/deployments
 /apis/apps/v1beta1/watch/namespaces/{namespace}/controllerrevisions
 /apis/apps/v1beta1/watch/namespaces/{namespace}/controllerrevisions/{name}
 /apis/apps/v1beta1/watch/namespaces/{namespace}/deployments
 /apis/apps/v1beta1/watch/namespaces/{namespace}/deployments/{name}
 /apis/apps/v1beta1/watch/namespaces/{namespace}/statefulsets
 /apis/apps/v1beta1/watch/namespaces/{namespace}/statefulsets/{name}
 /apis/apps/v1beta1/watch/statefulsets
 /apis/apps/v1beta2/
 /apis/apps/v1beta2/controllerrevisions
 /apis/apps/v1beta2/daemonsets
 /apis/apps/v1beta2/deployments
 /apis/apps/v1beta2/namespaces/{namespace}/controllerrevisions
 /apis/apps/v1beta2/namespaces/{namespace}/controllerrevisions/{name}
 /apis/apps/v1beta2/namespaces/{namespace}/daemonsets
 /apis/apps/v1beta2/namespaces/{namespace}/daemonsets/{name}
 /apis/apps/v1beta2/namespaces/{namespace}/daemonsets/{name}/status
 /apis/apps/v1beta2/namespaces/{namespace}/deployments
 /apis/apps/v1beta2/namespaces/{namespace}/deployments/{name}
 /apis/apps/v1beta2/namespaces/{namespace}/deployments/{name}/scale
 /apis/apps/v1beta2/namespaces/{namespace}/deployments/{name}/status
 /apis/apps/v1beta2/namespaces/{namespace}/replicasets
 /apis/apps/v1beta2/namespaces/{namespace}/replicasets/{name}
 /apis/apps/v1beta2/namespaces/{namespace}/replicasets/{name}/scale
 /apis/apps/v1beta2/namespaces/{namespace}/replicasets/{name}/status
 /apis/apps/v1beta2/namespaces/{namespace}/statefulsets
 /apis/apps/v1beta2/namespaces/{namespace}/statefulsets/{name}
 /apis/apps/v1beta2/namespaces/{namespace}/statefulsets/{name}/scale
 /apis/apps/v1beta2/namespaces/{namespace}/statefulsets/{name}/status
 /apis/apps/v1beta2/replicasets
 /apis/apps/v1beta2/statefulsets
 /apis/apps/v1beta2/watch/controllerrevisions
 /apis/apps/v1beta2/watch/daemonsets
 /apis/apps/v1beta2/watch/deployments
 /apis/apps/v1beta2/watch/namespaces/{namespace}/controllerrevisions
 /apis/apps/v1beta2/watch/namespaces/{namespace}/controllerrevisions/{name}
 /apis/apps/v1beta2/watch/namespaces/{namespace}/daemonsets
 /apis/apps/v1beta2/watch/namespaces/{namespace}/daemonsets/{name}
 /apis/apps/v1beta2/watch/namespaces/{namespace}/deployments
 /apis/apps/v1beta2/watch/namespaces/{namespace}/deployments/{name}
 /apis/apps/v1beta2/watch/namespaces/{namespace}/replicasets
 /apis/apps/v1beta2/watch/namespaces/{namespace}/replicasets/{name}
 /apis/apps/v1beta2/watch/namespaces/{namespace}/statefulsets
 /apis/apps/v1beta2/watch/namespaces/{namespace}/statefulsets/{name}
 /apis/apps/v1beta2/watch/replicasets
 /apis/apps/v1beta2/watch/statefulsets
 /apis/apps/v1/controllerrevisions
 /apis/apps/v1/daemonsets
 /apis/apps/v1/deployments
 /apis/apps/v1/namespaces/{namespace}/controllerrevisions
 /apis/apps/v1/namespaces/{namespace}/controllerrevisions/{name}
 /apis/apps/v1/namespaces/{namespace}/daemonsets
 /apis/apps/v1/namespaces/{namespace}/daemonsets/{name}
 /apis/apps/v1/namespaces/{namespace}/daemonsets/{name}/status
 /apis/apps/v1/namespaces/{namespace}/deployments
 /apis/apps/v1/namespaces/{namespace}/deployments/{name}
 /apis/apps/v1/namespaces/{namespace}/deployments/{name}/scale
 /apis/apps/v1/namespaces/{namespace}/deployments/{name}/status
 /apis/apps/v1/namespaces/{namespace}/replicasets
 /apis/apps/v1/namespaces/{namespace}/replicasets/{name}
 /apis/apps/v1/namespaces/{namespace}/replicasets/{name}/scale
 /apis/apps/v1/namespaces/{namespace}/replicasets/{name}/status
 /apis/apps/v1/namespaces/{namespace}/statefulsets
 /apis/apps/v1/namespaces/{namespace}/statefulsets/{name}
 /apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/scale
 /apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/status
 /apis/apps/v1/replicasets
 /apis/apps/v1/statefulsets
 /apis/apps/v1/watch/controllerrevisions
 /apis/apps/v1/watch/daemonsets
 /apis/apps/v1/watch/deployments
 /apis/apps/v1/watch/namespaces/{namespace}/controllerrevisions
 /apis/apps/v1/watch/namespaces/{namespace}/controllerrevisions/{name}
 /apis/apps/v1/watch/namespaces/{namespace}/daemonsets
 /apis/apps/v1/watch/namespaces/{namespace}/daemonsets/{name}
 /apis/apps/v1/watch/namespaces/{namespace}/deployments
 /apis/apps/v1/watch/namespaces/{namespace}/deployments/{name}
 /apis/apps/v1/watch/namespaces/{namespace}/replicasets
 /apis/apps/v1/watch/namespaces/{namespace}/replicasets/{name}
 /apis/apps/v1/watch/namespaces/{namespace}/statefulsets
 /apis/apps/v1/watch/namespaces/{namespace}/statefulsets/{name}
 /apis/apps/v1/watch/replicasets
 /apis/apps/v1/watch/statefulsets
 /apis/auditregistration.k8s.io/
 /apis/auditregistration.k8s.io/v1alpha1/
 /apis/auditregistration.k8s.io/v1alpha1/auditsinks
 /apis/auditregistration.k8s.io/v1alpha1/auditsinks/{name}
 /apis/auditregistration.k8s.io/v1alpha1/watch/auditsinks
 /apis/auditregistration.k8s.io/v1alpha1/watch/auditsinks/{name}
 /apis/authentication.k8s.io/
 /apis/authentication.k8s.io/v1/
 /apis/authentication.k8s.io/v1beta1/
 /apis/authentication.k8s.io/v1beta1/tokenreviews
 /apis/authentication.k8s.io/v1/tokenreviews
 /apis/authorization.k8s.io/
 /apis/authorization.k8s.io/v1/
 /apis/authorization.k8s.io/v1beta1/
 /apis/authorization.k8s.io/v1beta1/namespaces/{namespace}/localsubjectaccessreviews
 /apis/authorization.k8s.io/v1beta1/selfsubjectaccessreviews
 /apis/authorization.k8s.io/v1beta1/selfsubjectrulesreviews
 /apis/authorization.k8s.io/v1beta1/subjectaccessreviews
 /apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews
 /apis/authorization.k8s.io/v1/selfsubjectaccessreviews
 /apis/authorization.k8s.io/v1/selfsubjectrulesreviews
 /apis/authorization.k8s.io/v1/subjectaccessreviews
 /apis/autoscaling/
 /apis/autoscaling/v1/
 /apis/autoscaling/v1/horizontalpodautoscalers
 /apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers
 /apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}
 /apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status
 /apis/autoscaling/v1/watch/horizontalpodautoscalers
 /apis/autoscaling/v1/watch/namespaces/{namespace}/horizontalpodautoscalers
 /apis/autoscaling/v1/watch/namespaces/{namespace}/horizontalpodautoscalers/{name}
 /apis/autoscaling/v2beta1/
 /apis/autoscaling/v2beta1/horizontalpodautoscalers
 /apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers
 /apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}
 /apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status
 /apis/autoscaling/v2beta1/watch/horizontalpodautoscalers
 /apis/autoscaling/v2beta1/watch/namespaces/{namespace}/horizontalpodautoscalers
 /apis/autoscaling/v2beta1/watch/namespaces/{namespace}/horizontalpodautoscalers/{name}
 /apis/autoscaling/v2beta2/
 /apis/autoscaling/v2beta2/horizontalpodautoscalers
 /apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers
 /apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers/{name}
 /apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers/{name}/status
 /apis/autoscaling/v2beta2/watch/horizontalpodautoscalers
 /apis/autoscaling/v2beta2/watch/namespaces/{namespace}/horizontalpodautoscalers
 /apis/autoscaling/v2beta2/watch/namespaces/{namespace}/horizontalpodautoscalers/{name}
 /apis/batch/
 /apis/batch/v1/
 /apis/batch/v1beta1/
 /apis/batch/v1beta1/cronjobs
 /apis/batch/v1beta1/namespaces/{namespace}/cronjobs
 /apis/batch/v1beta1/namespaces/{namespace}/cronjobs/{name}
 /apis/batch/v1beta1/namespaces/{namespace}/cronjobs/{name}/status
 /apis/batch/v1beta1/watch/cronjobs
 /apis/batch/v1beta1/watch/namespaces/{namespace}/cronjobs
 /apis/batch/v1beta1/watch/namespaces/{namespace}/cronjobs/{name}
 /apis/batch/v1/jobs
 /apis/batch/v1/namespaces/{namespace}/jobs
 /apis/batch/v1/namespaces/{namespace}/jobs/{name}
 /apis/batch/v1/namespaces/{namespace}/jobs/{name}/status
 /apis/batch/v1/watch/jobs
 /apis/batch/v1/watch/namespaces/{namespace}/jobs
 /apis/batch/v1/watch/namespaces/{namespace}/jobs/{name}
 /apis/batch/v2alpha1/
 /apis/batch/v2alpha1/cronjobs
 /apis/batch/v2alpha1/namespaces/{namespace}/cronjobs
 /apis/batch/v2alpha1/namespaces/{namespace}/cronjobs/{name}
 /apis/batch/v2alpha1/namespaces/{namespace}/cronjobs/{name}/status
 /apis/batch/v2alpha1/watch/cronjobs
 /apis/batch/v2alpha1/watch/namespaces/{namespace}/cronjobs
 /apis/batch/v2alpha1/watch/namespaces/{namespace}/cronjobs/{name}
 /apis/certificates.k8s.io/
 /apis/certificates.k8s.io/v1beta1/
 /apis/certificates.k8s.io/v1beta1/certificatesigningrequests
 /apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}
 /apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}/approval
 /apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}/status
 /apis/certificates.k8s.io/v1beta1/watch/certificatesigningrequests
 /apis/certificates.k8s.io/v1beta1/watch/certificatesigningrequests/{name}
 /apis/coordination.k8s.io/
 /apis/coordination.k8s.io/v1/
 /apis/coordination.k8s.io/v1beta1/
 /apis/coordination.k8s.io/v1beta1/leases
 /apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases
 /apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases/{name}
 /apis/coordination.k8s.io/v1beta1/watch/leases
 /apis/coordination.k8s.io/v1beta1/watch/namespaces/{namespace}/leases
 /apis/coordination.k8s.io/v1beta1/watch/namespaces/{namespace}/leases/{name}
 /apis/coordination.k8s.io/v1/leases
 /apis/coordination.k8s.io/v1/namespaces/{namespace}/leases
 /apis/coordination.k8s.io/v1/namespaces/{namespace}/leases/{name}
 /apis/coordination.k8s.io/v1/watch/leases
 /apis/coordination.k8s.io/v1/watch/namespaces/{namespace}/leases
 /apis/coordination.k8s.io/v1/watch/namespaces/{namespace}/leases/{name}
 /apis/events.k8s.io/
 /apis/events.k8s.io/v1beta1/
 /apis/events.k8s.io/v1beta1/events
 /apis/events.k8s.io/v1beta1/namespaces/{namespace}/events
 /apis/events.k8s.io/v1beta1/namespaces/{namespace}/events/{name}
 /apis/events.k8s.io/v1beta1/watch/events
 /apis/events.k8s.io/v1beta1/watch/namespaces/{namespace}/events
 /apis/events.k8s.io/v1beta1/watch/namespaces/{namespace}/events/{name}
 /apis/extensions/
 /apis/extensions/v1beta1/
 /apis/extensions/v1beta1/daemonsets
 /apis/extensions/v1beta1/deployments
 /apis/extensions/v1beta1/ingresses
 /apis/extensions/v1beta1/namespaces/{namespace}/daemonsets
 /apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}
 /apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}/status
 /apis/extensions/v1beta1/namespaces/{namespace}/deployments
 /apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}
 /apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/rollback
 /apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/scale
 /apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/status
 /apis/extensions/v1beta1/namespaces/{namespace}/ingresses
 /apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}
 /apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}/status
 /apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies
 /apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies/{name}
 /apis/extensions/v1beta1/namespaces/{namespace}/replicasets
 /apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}
 /apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/scale
 /apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/status
 /apis/extensions/v1beta1/namespaces/{namespace}/replicationcontrollers/{name}/scale
 /apis/extensions/v1beta1/networkpolicies
 /apis/extensions/v1beta1/podsecuritypolicies
 /apis/extensions/v1beta1/podsecuritypolicies/{name}
 /apis/extensions/v1beta1/replicasets
 /apis/extensions/v1beta1/watch/daemonsets
 /apis/extensions/v1beta1/watch/deployments
 /apis/extensions/v1beta1/watch/ingresses
 /apis/extensions/v1beta1/watch/namespaces/{namespace}/daemonsets
 /apis/extensions/v1beta1/watch/namespaces/{namespace}/daemonsets/{name}
 /apis/extensions/v1beta1/watch/namespaces/{namespace}/deployments
 /apis/extensions/v1beta1/watch/namespaces/{namespace}/deployments/{name}
 /apis/extensions/v1beta1/watch/namespaces/{namespace}/ingresses
 /apis/extensions/v1beta1/watch/namespaces/{namespace}/ingresses/{name}
 /apis/extensions/v1beta1/watch/namespaces/{namespace}/networkpolicies
 /apis/extensions/v1beta1/watch/namespaces/{namespace}/networkpolicies/{name}
 /apis/extensions/v1beta1/watch/namespaces/{namespace}/replicasets
 /apis/extensions/v1beta1/watch/namespaces/{namespace}/replicasets/{name}
 /apis/extensions/v1beta1/watch/networkpolicies
 /apis/extensions/v1beta1/watch/podsecuritypolicies
 /apis/extensions/v1beta1/watch/podsecuritypolicies/{name}
 /apis/extensions/v1beta1/watch/replicasets
 /apis/networking.k8s.io/
 /apis/networking.k8s.io/v1/
 /apis/networking.k8s.io/v1beta1/
 /apis/networking.k8s.io/v1beta1/ingresses
 /apis/networking.k8s.io/v1beta1/namespaces/{namespace}/ingresses
 /apis/networking.k8s.io/v1beta1/namespaces/{namespace}/ingresses/{name}
 /apis/networking.k8s.io/v1beta1/namespaces/{namespace}/ingresses/{name}/status
 /apis/networking.k8s.io/v1beta1/watch/ingresses
 /apis/networking.k8s.io/v1beta1/watch/namespaces/{namespace}/ingresses
 /apis/networking.k8s.io/v1beta1/watch/namespaces/{namespace}/ingresses/{name}
 /apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies
 /apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies/{name}
 /apis/networking.k8s.io/v1/networkpolicies
 /apis/networking.k8s.io/v1/watch/namespaces/{namespace}/networkpolicies
 /apis/networking.k8s.io/v1/watch/namespaces/{namespace}/networkpolicies/{name}
 /apis/networking.k8s.io/v1/watch/networkpolicies
 /apis/node.k8s.io/
 /apis/node.k8s.io/v1alpha1/
 /apis/node.k8s.io/v1alpha1/runtimeclasses
 /apis/node.k8s.io/v1alpha1/runtimeclasses/{name}
 /apis/node.k8s.io/v1alpha1/watch/runtimeclasses
 /apis/node.k8s.io/v1alpha1/watch/runtimeclasses/{name}
 /apis/node.k8s.io/v1beta1/
 /apis/node.k8s.io/v1beta1/runtimeclasses
 /apis/node.k8s.io/v1beta1/runtimeclasses/{name}
 /apis/node.k8s.io/v1beta1/watch/runtimeclasses
 /apis/node.k8s.io/v1beta1/watch/runtimeclasses/{name}
 /apis/policy/
 /apis/policy/v1beta1/
 /apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets
 /apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}
 /apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}/status
 /apis/policy/v1beta1/poddisruptionbudgets
 /apis/policy/v1beta1/podsecuritypolicies
 /apis/policy/v1beta1/podsecuritypolicies/{name}
 /apis/policy/v1beta1/watch/namespaces/{namespace}/poddisruptionbudgets
 /apis/policy/v1beta1/watch/namespaces/{namespace}/poddisruptionbudgets/{name}
 /apis/policy/v1beta1/watch/poddisruptionbudgets
 /apis/policy/v1beta1/watch/podsecuritypolicies
 /apis/policy/v1beta1/watch/podsecuritypolicies/{name}
 /apis/rbac.authorization.k8s.io/
 /apis/rbac.authorization.k8s.io/v1/
 /apis/rbac.authorization.k8s.io/v1alpha1/
 /apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings
 /apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings/{name}
 /apis/rbac.authorization.k8s.io/v1alpha1/clusterroles
 /apis/rbac.authorization.k8s.io/v1alpha1/clusterroles/{name}
 /apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/rolebindings
 /apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/rolebindings/{name}
 /apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/roles
 /apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/roles/{name}
 /apis/rbac.authorization.k8s.io/v1alpha1/rolebindings
 /apis/rbac.authorization.k8s.io/v1alpha1/roles
 /apis/rbac.authorization.k8s.io/v1alpha1/watch/clusterrolebindings
 /apis/rbac.authorization.k8s.io/v1alpha1/watch/clusterrolebindings/{name}
 /apis/rbac.authorization.k8s.io/v1alpha1/watch/clusterroles
 /apis/rbac.authorization.k8s.io/v1alpha1/watch/clusterroles/{name}
 /apis/rbac.authorization.k8s.io/v1alpha1/watch/namespaces/{namespace}/rolebindings
 /apis/rbac.authorization.k8s.io/v1alpha1/watch/namespaces/{namespace}/rolebindings/{name}
 /apis/rbac.authorization.k8s.io/v1alpha1/watch/namespaces/{namespace}/roles
 /apis/rbac.authorization.k8s.io/v1alpha1/watch/namespaces/{namespace}/roles/{name}
 /apis/rbac.authorization.k8s.io/v1alpha1/watch/rolebindings
 /apis/rbac.authorization.k8s.io/v1alpha1/watch/roles
 /apis/rbac.authorization.k8s.io/v1beta1/
 /apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings
 /apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings/{name}
 /apis/rbac.authorization.k8s.io/v1beta1/clusterroles
 /apis/rbac.authorization.k8s.io/v1beta1/clusterroles/{name}
 /apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/rolebindings
 /apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/rolebindings/{name}
 /apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/roles
 /apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/roles/{name}
 /apis/rbac.authorization.k8s.io/v1beta1/rolebindings
 /apis/rbac.authorization.k8s.io/v1beta1/roles
 /apis/rbac.authorization.k8s.io/v1beta1/watch/clusterrolebindings
 /apis/rbac.authorization.k8s.io/v1beta1/watch/clusterrolebindings/{name}
 /apis/rbac.authorization.k8s.io/v1beta1/watch/clusterroles
 /apis/rbac.authorization.k8s.io/v1beta1/watch/clusterroles/{name}
 /apis/rbac.authorization.k8s.io/v1beta1/watch/namespaces/{namespace}/rolebindings
 /apis/rbac.authorization.k8s.io/v1beta1/watch/namespaces/{namespace}/rolebindings/{name}
 /apis/rbac.authorization.k8s.io/v1beta1/watch/namespaces/{namespace}/roles
 /apis/rbac.authorization.k8s.io/v1beta1/watch/namespaces/{namespace}/roles/{name}
 /apis/rbac.authorization.k8s.io/v1beta1/watch/rolebindings
 /apis/rbac.authorization.k8s.io/v1beta1/watch/roles
 /apis/rbac.authorization.k8s.io/v1/clusterrolebindings
 /apis/rbac.authorization.k8s.io/v1/clusterrolebindings/{name}
 /apis/rbac.authorization.k8s.io/v1/clusterroles
 /apis/rbac.authorization.k8s.io/v1/clusterroles/{name}
 /apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings
 /apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings/{name}
 /apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles
 /apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles/{name}
 /apis/rbac.authorization.k8s.io/v1/rolebindings
 /apis/rbac.authorization.k8s.io/v1/roles
 /apis/rbac.authorization.k8s.io/v1/watch/clusterrolebindings
 /apis/rbac.authorization.k8s.io/v1/watch/clusterrolebindings/{name}
 /apis/rbac.authorization.k8s.io/v1/watch/clusterroles
 /apis/rbac.authorization.k8s.io/v1/watch/clusterroles/{name}
 /apis/rbac.authorization.k8s.io/v1/watch/namespaces/{namespace}/rolebindings
 /apis/rbac.authorization.k8s.io/v1/watch/namespaces/{namespace}/rolebindings/{name}
 /apis/rbac.authorization.k8s.io/v1/watch/namespaces/{namespace}/roles
 /apis/rbac.authorization.k8s.io/v1/watch/namespaces/{namespace}/roles/{name}
 /apis/rbac.authorization.k8s.io/v1/watch/rolebindings
 /apis/rbac.authorization.k8s.io/v1/watch/roles
 /apis/scheduling.k8s.io/
 /apis/scheduling.k8s.io/v1/
 /apis/scheduling.k8s.io/v1alpha1/
 /apis/scheduling.k8s.io/v1alpha1/priorityclasses
 /apis/scheduling.k8s.io/v1alpha1/priorityclasses/{name}
 /apis/scheduling.k8s.io/v1alpha1/watch/priorityclasses
 /apis/scheduling.k8s.io/v1alpha1/watch/priorityclasses/{name}
 /apis/scheduling.k8s.io/v1beta1/
 /apis/scheduling.k8s.io/v1beta1/priorityclasses
 /apis/scheduling.k8s.io/v1beta1/priorityclasses/{name}
 /apis/scheduling.k8s.io/v1beta1/watch/priorityclasses
 /apis/scheduling.k8s.io/v1beta1/watch/priorityclasses/{name}
 /apis/scheduling.k8s.io/v1/priorityclasses
 /apis/scheduling.k8s.io/v1/priorityclasses/{name}
 /apis/scheduling.k8s.io/v1/watch/priorityclasses
 /apis/scheduling.k8s.io/v1/watch/priorityclasses/{name}
 /apis/settings.k8s.io/
 /apis/settings.k8s.io/v1alpha1/
 /apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets
 /apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets/{name}
 /apis/settings.k8s.io/v1alpha1/podpresets
 /apis/settings.k8s.io/v1alpha1/watch/namespaces/{namespace}/podpresets
 /apis/settings.k8s.io/v1alpha1/watch/namespaces/{namespace}/podpresets/{name}
 /apis/settings.k8s.io/v1alpha1/watch/podpresets
 /apis/storage.k8s.io/
 /apis/storage.k8s.io/v1/
 /apis/storage.k8s.io/v1alpha1/
 /apis/storage.k8s.io/v1alpha1/volumeattachments
 /apis/storage.k8s.io/v1alpha1/volumeattachments/{name}
 /apis/storage.k8s.io/v1alpha1/watch/volumeattachments
 /apis/storage.k8s.io/v1alpha1/watch/volumeattachments/{name}
 /apis/storage.k8s.io/v1beta1/
 /apis/storage.k8s.io/v1beta1/csidrivers
 /apis/storage.k8s.io/v1beta1/csidrivers/{name}
 /apis/storage.k8s.io/v1beta1/csinodes
 /apis/storage.k8s.io/v1beta1/csinodes/{name}
 /apis/storage.k8s.io/v1beta1/storageclasses
 /apis/storage.k8s.io/v1beta1/storageclasses/{name}
 /apis/storage.k8s.io/v1beta1/volumeattachments
 /apis/storage.k8s.io/v1beta1/volumeattachments/{name}
 /apis/storage.k8s.io/v1beta1/watch/csidrivers
 /apis/storage.k8s.io/v1beta1/watch/csidrivers/{name}
 /apis/storage.k8s.io/v1beta1/watch/csinodes
 /apis/storage.k8s.io/v1beta1/watch/csinodes/{name}
 /apis/storage.k8s.io/v1beta1/watch/storageclasses
 /apis/storage.k8s.io/v1beta1/watch/storageclasses/{name}
 /apis/storage.k8s.io/v1beta1/watch/volumeattachments
 /apis/storage.k8s.io/v1beta1/watch/volumeattachments/{name}
 /apis/storage.k8s.io/v1/storageclasses
 /apis/storage.k8s.io/v1/storageclasses/{name}
 /apis/storage.k8s.io/v1/volumeattachments
 /apis/storage.k8s.io/v1/volumeattachments/{name}
 /apis/storage.k8s.io/v1/volumeattachments/{name}/status
 /apis/storage.k8s.io/v1/watch/storageclasses
 /apis/storage.k8s.io/v1/watch/storageclasses/{name}
 /apis/storage.k8s.io/v1/watch/volumeattachments
 /apis/storage.k8s.io/v1/watch/volumeattachments/{name}
 /api/v1/
 /api/v1/componentstatuses
 /api/v1/componentstatuses/{name}
 /api/v1/configmaps
 /api/v1/endpoints
 /api/v1/events
 /api/v1/limitranges
 /api/v1/namespaces
 /api/v1/namespaces/{name}
 /api/v1/namespaces/{name}/finalize
 /api/v1/namespaces/{namespace}/bindings
 /api/v1/namespaces/{namespace}/configmaps
 /api/v1/namespaces/{namespace}/configmaps/{name}
 /api/v1/namespaces/{namespace}/endpoints
 /api/v1/namespaces/{namespace}/endpoints/{name}
 /api/v1/namespaces/{namespace}/events
 /api/v1/namespaces/{namespace}/events/{name}
 /api/v1/namespaces/{namespace}/limitranges
 /api/v1/namespaces/{namespace}/limitranges/{name}
 /api/v1/namespaces/{namespace}/persistentvolumeclaims
 /api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}
 /api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status
 /api/v1/namespaces/{namespace}/pods
 /api/v1/namespaces/{namespace}/pods/{name}
 /api/v1/namespaces/{namespace}/pods/{name}/attach
 /api/v1/namespaces/{namespace}/pods/{name}/binding
 /api/v1/namespaces/{namespace}/pods/{name}/eviction
 /api/v1/namespaces/{namespace}/pods/{name}/exec
 /api/v1/namespaces/{namespace}/pods/{name}/log
 /api/v1/namespaces/{namespace}/pods/{name}/portforward
 /api/v1/namespaces/{namespace}/pods/{name}/proxy
 /api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}
 /api/v1/namespaces/{namespace}/pods/{name}/status
 /api/v1/namespaces/{namespace}/podtemplates
 /api/v1/namespaces/{namespace}/podtemplates/{name}
 /api/v1/namespaces/{namespace}/replicationcontrollers
 /api/v1/namespaces/{namespace}/replicationcontrollers/{name}
 /api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale
 /api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status
 /api/v1/namespaces/{namespace}/resourcequotas
 /api/v1/namespaces/{namespace}/resourcequotas/{name}
 /api/v1/namespaces/{namespace}/resourcequotas/{name}/status
 /api/v1/namespaces/{namespace}/secrets
 /api/v1/namespaces/{namespace}/secrets/{name}
 /api/v1/namespaces/{namespace}/serviceaccounts
 /api/v1/namespaces/{namespace}/serviceaccounts/{name}
 /api/v1/namespaces/{namespace}/serviceaccounts/{name}/token
 /api/v1/namespaces/{namespace}/services
 /api/v1/namespaces/{namespace}/services/{name}
 /api/v1/namespaces/{namespace}/services/{name}/proxy
 /api/v1/namespaces/{namespace}/services/{name}/proxy/{path}
 /api/v1/namespaces/{namespace}/services/{name}/status
 /api/v1/namespaces/{name}/status
 /api/v1/nodes
 /api/v1/nodes/{name}
 /api/v1/nodes/{name}/proxy
 /api/v1/nodes/{name}/proxy/{path}
 /api/v1/nodes/{name}/status
 /api/v1/persistentvolumeclaims
 /api/v1/persistentvolumes
 /api/v1/persistentvolumes/{name}
 /api/v1/persistentvolumes/{name}/status
 /api/v1/pods
 /api/v1/podtemplates
 /api/v1/replicationcontrollers
 /api/v1/resourcequotas
 /api/v1/secrets
 /api/v1/serviceaccounts
 /api/v1/services
 /api/v1/watch/configmaps
 /api/v1/watch/endpoints
 /api/v1/watch/events
 /api/v1/watch/limitranges
 /api/v1/watch/namespaces
 /api/v1/watch/namespaces/{name}
 /api/v1/watch/namespaces/{namespace}/configmaps
 /api/v1/watch/namespaces/{namespace}/configmaps/{name}
 /api/v1/watch/namespaces/{namespace}/endpoints
 /api/v1/watch/namespaces/{namespace}/endpoints/{name}
 /api/v1/watch/namespaces/{namespace}/events
 /api/v1/watch/namespaces/{namespace}/events/{name}
 /api/v1/watch/namespaces/{namespace}/limitranges
 /api/v1/watch/namespaces/{namespace}/limitranges/{name}
 /api/v1/watch/namespaces/{namespace}/persistentvolumeclaims
 /api/v1/watch/namespaces/{namespace}/persistentvolumeclaims/{name}
 /api/v1/watch/namespaces/{namespace}/pods
 /api/v1/watch/namespaces/{namespace}/pods/{name}
 /api/v1/watch/namespaces/{namespace}/podtemplates
 /api/v1/watch/namespaces/{namespace}/podtemplates/{name}
 /api/v1/watch/namespaces/{namespace}/replicationcontrollers
 /api/v1/watch/namespaces/{namespace}/replicationcontrollers/{name}
 /api/v1/watch/namespaces/{namespace}/resourcequotas
 /api/v1/watch/namespaces/{namespace}/resourcequotas/{name}
 /api/v1/watch/namespaces/{namespace}/secrets
 /api/v1/watch/namespaces/{namespace}/secrets/{name}
 /api/v1/watch/namespaces/{namespace}/serviceaccounts
 /api/v1/watch/namespaces/{namespace}/serviceaccounts/{name}
 /api/v1/watch/namespaces/{namespace}/services
 /api/v1/watch/namespaces/{namespace}/services/{name}
 /api/v1/watch/nodes
 /api/v1/watch/nodes/{name}
 /api/v1/watch/persistentvolumeclaims
 /api/v1/watch/persistentvolumes
 /api/v1/watch/persistentvolumes/{name}
 /api/v1/watch/pods
 /api/v1/watch/podtemplates
 /api/v1/watch/replicationcontrollers
 /api/v1/watch/resourcequotas
 /api/v1/watch/secrets
 /api/v1/watch/serviceaccounts
 /api/v1/watch/services
 /logs/
 /logs/{logpath}
 /version/
(564 rows)

#+end_src

*** 22 groups
#+NAME: groups
#+BEGIN_SRC sql-mode
  select distinct "group" from api_operations order by "group";
#+END_SRC

#+RESULTS: groups
#+begin_src sql-mode
            group             
------------------------------
 
 admissionregistration.k8s.io
 apiextensions.k8s.io
 apiregistration.k8s.io
 apps
 auditregistration.k8s.io
 authentication.k8s.io
 authorization.k8s.io
 autoscaling
 batch
 certificates.k8s.io
 coordination.k8s.io
 events.k8s.io
 extensions
 networking.k8s.io
 node.k8s.io
 policy
 rbac.authorization.k8s.io
 scheduling.k8s.io
 settings.k8s.io
 storage.k8s.io
 
(22 rows)

#+end_src
*** 8 versions
#+NAME: versions
#+BEGIN_SRC sql-mode
  select distinct version from api_operations order by version;
#+END_SRC

#+RESULTS: versions
#+begin_src sql-mode
 version  
----------
 v1
 v1alpha1
 v1beta1
 v1beta2
 v2alpha1
 v2beta1
 v2beta2
 
(8 rows)

#+end_src
*** 63 Kinds
#+NAME: kinds
#+BEGIN_SRC sql-mode
  select distinct kind from api_operations order by kind;
#+END_SRC

#+RESULTS: kinds
#+begin_src sql-mode
              kind              
--------------------------------
 APIService
 AuditSink
 Binding
 CertificateSigningRequest
 ClusterRole
 ClusterRoleBinding
 ComponentStatus
 ConfigMap
 ControllerRevision
 CronJob
 CSIDriver
 CSINode
 CustomResourceDefinition
 DaemonSet
 Deployment
 DeploymentRollback
 Endpoints
 Event
 Eviction
 HorizontalPodAutoscaler
 Ingress
 Job
 Lease
 LimitRange
 LocalSubjectAccessReview
 MutatingWebhookConfiguration
 Namespace
 NetworkPolicy
 Node
 NodeProxyOptions
 PersistentVolume
 PersistentVolumeClaim
 Pod
 PodAttachOptions
 PodDisruptionBudget
 PodExecOptions
 PodPortForwardOptions
 PodPreset
 PodProxyOptions
 PodSecurityPolicy
 PodTemplate
 PriorityClass
 ReplicaSet
 ReplicationController
 ResourceQuota
 Role
 RoleBinding
 RuntimeClass
 Scale
 Secret
 SelfSubjectAccessReview
 SelfSubjectRulesReview
 Service
 ServiceAccount
 ServiceProxyOptions
 StatefulSet
 StorageClass
 SubjectAccessReview
 TokenRequest
 TokenReview
 ValidatingWebhookConfiguration
 VolumeAttachment
 
(63 rows)

#+end_src

*** 65 tags
#+NAME: tags
#+BEGIN_SRC sql-mode
  select distinct tags from api_operations;
#+END_SRC

#+RESULTS: tags
#+begin_src sql-mode
             tags              
-------------------------------
 
 certificates_v1beta1
 certificates
 core
 apiregistration_v1beta1
 policy
 apps
 extensions_v1beta1
 batch_v2alpha1
 admissionregistration
 extensions
 authentication_v1
 storage_v1alpha1
 events
 apps_v1
 batch_v1beta1
 scheduling_v1
 apis
 apiregistration
 storage
 apps_v1beta2
 apiextensions_v1beta1
 node
 rbacAuthorization_v1beta1
 settings_v1alpha1
 settings
 rbacAuthorization
 core_v1
 policy_v1beta1
 networking_v1
 coordination_v1
 authorization_v1beta1
 auditregistration_v1alpha1
 networking_v1beta1
 node_v1beta1
 autoscaling_v2beta2
 authorization
 authentication_v1beta1
 admissionregistration_v1
 scheduling_v1alpha1
 rbacAuthorization_v1
 version
 storage_v1
 apiregistration_v1
 auditregistration
 apps_v1beta1
 scheduling_v1beta1
 rbacAuthorization_v1alpha1
 batch_v1
 logs
 networking
 node_v1alpha1
 autoscaling_v1
 events_v1beta1
 batch
 admissionregistration_v1beta1
 autoscaling
 coordination_v1beta1
 coordination
 authentication
 scheduling
 autoscaling_v2beta1
 storage_v1beta1
 apiextensions
 authorization_v1
(65 rows)

#+end_src

#+NAME: They all expect to recieve json-patches, json+yaml+protobuf, json, or all(*/*) or nothing (null)
#+BEGIN_SRC sql-mode
  select distinct consumes from api_operations;
#+END_SRC

#+RESULTS: They all expect to recieve json-patches, json+yaml+protobuf, json, or all(*/*) or nothing (null)
#+begin_src sql-mode
                                                 consumes                                                  
-----------------------------------------------------------------------------------------------------------
 
 ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"]
 ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"]
 ["*/*"]
 ["application/json"]
(5 rows)

#+end_src

#+NAME: there is only one scheme, https or null
#+BEGIN_SRC sql-mode
  select distinct schemes from api_operations;
#+END_SRC

#+RESULTS: there is only one scheme, https or null
#+begin_src sql-mode
  schemes  
-----------
 
 ["https"]
(2 rows)

#+end_src



*** TODO regex_from_path PL/Python
    These are two columns I couldn't get directlyf rom the swagger.json, and am unsure how they were gathered.  The closest thing to the category was certain tags within the tag column, but not sure if that's correct.

#+BEGIN_SRC shell :eval never
  apt-get install -y postgresql-plpython3-11
#+END_SRC

#+BEGIN_SRC sql-mode
  CREATE EXTENSION plpython3u;
#+END_SRC

#+RESULTS:
#+begin_src sql-mode
CREATE EXTENSION
#+end_src


This is a pretty good read and might be quite useful for refactoring:
- https://www.postgresql.org/docs/11/plpython.html
- https://www.postgresql.org/docs/11/plpython-data.html
- https://www.postgresql.org/docs/11/plpython-sharing.html SD and GD shared dictionaries
- https://www.postgresql.org/docs/11/plpython-trigger.html TD dictionary

#+NAME: regex_from_path.py
#+BEGIN_SRC python :eval never
  # path is set to text or null/None
  import re
  if path is None:
    return None
  # k8s appears to allow/expect a trailing {path} variable to capture everything
  # remaining in the path, including '/' characters, which doesn't appear to be
  # allowed according to the openapi 2.0 or 3.0 specs
  # (ref: https://github.com/OAI/OpenAPI-Specification/issues/892)
  K8S_PATH_VARIABLE_PATTERN = re.compile("{(path)}$")
  VARIABLE_PATTERN = re.compile("{([^}]+)}")
  # first replace the special trailing {path} wildcard with a named regex

  # path_regex = K8S_PATH_VARIABLE_PATTERN.sub("(?P<\\1>.+)", path).rstrip('/')
  # PosgresQL doesn't like named vars
  path_regex = K8S_PATH_VARIABLE_PATTERN.sub("(.*)", path).rstrip('/')
  # For SQL like, we just use %
  # path_regex = K8S_PATH_VARIABLE_PATTERN.sub("%", path).rstrip('/')
  # replace wildcards in {varname} format to a named regex
  # path_regex = VARIABLE_PATTERN.sub("(?P<\\1>[^/]+)", path_regex).rstrip('/')
  # if path != path_regex:
  #if '{' not in path:
  #  ipdb.set_trace(context=10)

  # now that we are using POSIX, we can't do {varname}
  path_regex = VARIABLE_PATTERN.sub("([^/]*)", path_regex).rstrip('/')
  # now that we are using LIKE, we just need %
  # path_regex = VARIABLE_PATTERN.sub("%", path_regex).rstrip('/')
  # ensure that everything ends looking for everything but '/'
  if not path_regex.endswith(")") and not path_regex.endswith("?"): # allow proxy to catch a trailing /
      path_regex += "([^/]*)"
  # # TODO(spiffxp): unsure if trailing / _should_ be counted toward /proxy
  if path_regex.endswith("proxy"): # allow proxy to catch a trailing /
      path_regex += "/?$"
  else:
      path_regex += "$"
  #    print('Converted path: %s into path_regex: %s' % (path, path_regex))
  return path_regex
#+END_SRC

#+NAME: regex_from_path.sql
#+BEGIN_SRC sql-mode :noweb yes
  CREATE OR REPLACE FUNCTION regex_from_path(path text)
  RETURNS text AS $$
  <<regex_from_path.py>>
  $$ LANGUAGE plpython3u ;
#+END_SRC

#+RESULTS: regex_from_path.sql
#+begin_src sql-mode
hh$# hh$# hh$# hh$# hh$# hh$# hh$# hh$# hh$# hh$# hh$# hh$# hh$# hh$# hh$# hh$# hh$# hh$# hh$# hh$# hh$# hh$# hh$# hh$# hh$# hh$# hh$# hh$# hh$# hh$# hh$# hh$# hh$# hh$# hh$# hh$# hh$# hh$# CREATE FUNCTION
#+end_src

#+BEGIN_SRC sql-mode
  select * from regex_from_path('/api/v1/namespaces/{namespace}/pods/{name}/proxy');
#+END_SRC

#+RESULTS:
#+begin_src sql-mode
                    regex_from_path                    
-------------------------------------------------------
 /api/v1/namespaces/([^/]*)/pods/([^/]*)/proxy([^/]*)$
(1 row)

#+end_src


#+BEGIN_SRC sql-mode
  select * from api_operations limit 5;
#+END_SRC

#+RESULTS:
#+begin_src sql-mode
                 operation_id                  |                  id                  | raw_swagger_id | method |                          path                           | k8s_group | k8s_version |      k8s_kind       | category |                 description                 | x_kubernetes_action |  tags   | schemes | consumes |                                              responses                                               | parameters | deprecated 
-----------------------------------------------+--------------------------------------+----------------+--------+---------------------------------------------------------+-----------+-------------+---------------------+----------+---------------------------------------------+---------------------+---------+---------+----------+------------------------------------------------------------------------------------------------------+------------+------------
 connectCoreV1DeleteNamespacedPodProxy         | 32edcc2e-b3ff-11e9-9248-506b4b430a28 |              3 | delete | /api/v1/namespaces/{namespace}/pods/{name}/proxy        |           | v1          | PodProxyOptions     | core     | connect DELETE requests to proxy of Pod     | connect             | core_v1 | https   | ["*/*"]  | {"200": {"schema": {"type": "string"}, "description": "OK"}, "401": {"description": "Unauthorized"}} |            | f
 connectCoreV1DeleteNamespacedPodProxy         | 32edcc2f-b3ff-11e9-9248-506b4b430a28 |              2 | delete | /api/v1/namespaces/{namespace}/pods/{name}/proxy        |           | v1          | PodProxyOptions     | core     | connect DELETE requests to proxy of Pod     | connect             | core_v1 | https   | ["*/*"]  | {"200": {"schema": {"type": "string"}, "description": "OK"}, "401": {"description": "Unauthorized"}} |            | f
 connectCoreV1DeleteNamespacedPodProxyWithPath | 32edcc30-b3ff-11e9-9248-506b4b430a28 |              3 | delete | /api/v1/namespaces/{namespace}/pods/{name}/proxy/{path} |           | v1          | PodProxyOptions     | core     | connect DELETE requests to proxy of Pod     | connect             | core_v1 | https   | ["*/*"]  | {"200": {"schema": {"type": "string"}, "description": "OK"}, "401": {"description": "Unauthorized"}} |            | f
 connectCoreV1DeleteNamespacedPodProxyWithPath | 32edcc31-b3ff-11e9-9248-506b4b430a28 |              2 | delete | /api/v1/namespaces/{namespace}/pods/{name}/proxy/{path} |           | v1          | PodProxyOptions     | core     | connect DELETE requests to proxy of Pod     | connect             | core_v1 | https   | ["*/*"]  | {"200": {"schema": {"type": "string"}, "description": "OK"}, "401": {"description": "Unauthorized"}} |            | f
 connectCoreV1DeleteNamespacedServiceProxy     | 32edcc32-b3ff-11e9-9248-506b4b430a28 |              2 | delete | /api/v1/namespaces/{namespace}/services/{name}/proxy    |           | v1          | ServiceProxyOptions | core     | connect DELETE requests to proxy of Service | connect             | core_v1 | https   | ["*/*"]  | {"200": {"schema": {"type": "string"}, "description": "OK"}, "401": {"description": "Unauthorized"}} |            | f
(5 rows)

#+end_src


** TODO [#B] parameters view
   
   for any given api_operation, its parameters will be an array of objects, with each object having a =name= and =in= field.  
   If the parameter is /in/ the /body/, then it will also have a schema.$ref that gives a link to its definition.
   Otherwise, it will have a type and description.

   Because of this, we can create a parameters view with

  | api_operations_id     | name | in | type                                     | description                    | unique_items |
  |-----------------------+------+----+------------------------------------------+--------------------------------+--------------|
  | link to its operation | name | in | either its given type or 'schema object' | its description or schema.$ref | null or true |
   
  I could not figure out how to get this straight from the raw_swaggers, since not all api_operations have parameters.
  
  Instead, I created a view of only the operations with parameters...

  #+NAME: api_operations_with_parameters
  #+BEGIN_SRC sql-mode :eval never-export
    CREATE OR REPLACE VIEW "public"."operations_with_parameters" AS 
      SELECT uuid_generate_v1() AS id,
             api_operations.id AS api_operations_id,
             api_operations.parameters
        FROM api_operations
       WHERE (api_operations.parameters IS NOT NULL)
       ORDER BY (uuid_generate_v1());
  #+END_SRC

  #+RESULTS: api_operations_with_parameters
  #+begin_src sql-mode
  CREATE VIEW
  #+end_src

then based our parameters view from it:

#+NAME: api_operations_parameters view
#+BEGIN_SRC sql-mode :eval no-export
  CREATE OR REPLACE VIEW "public"."api_operations_parameters" AS 
    SELECT operations_with_parameters.api_operations_id,
           (param.entry ->> 'name'::text) AS name,
           (param.entry ->> 'in'::text) AS "in",
           CASE
           WHEN ((param.entry ->> 'in'::text) = 'body'::text) THEN 'schema object'::text
           ELSE (param.entry ->> 'type'::text)
          END AS type,
           CASE
           WHEN ((param.entry ->> 'in'::text) = 'body'::text) THEN ((param.entry -> 'schema'::text) ->> '$ref'::text)
           ELSE (param.entry ->> 'description'::text)
          END AS description,
           CASE
           WHEN ((param.entry ->> 'required'::text) IS NULL) THEN 'false'::text
           ELSE (param.entry ->> 'required'::text)
          END AS required,
           (param.entry ->> 'uniqueItems'::text) AS unique_items,
           param.entry AS full_entry
      FROM operations_with_parameters,
           LATERAL jsonb_array_elements(operations_with_parameters.parameters) WITH ORDINALITY param(entry, index);
#+END_SRC

#+RESULTS: api_operations_parameters view
#+begin_src sql-mode
CREATE VIEW
#+end_src

this is now live at =hasura.sharing.io=

** TADA responses view
   CLOSED: [2019-07-31 Wed 00:54]
   Our table should be:
   responseId, response Number, description, schemaRef, schemaType
   it would be something like
   
   
  | id             | api_operations_id | response | descrption   | schema                    |
  |----------------+-------------------+----------+--------------+---------------------------|
  | 23j301j3-3j3j3 | fj3jdjaj2-3j2j3   |      200 | OK           | string                    |
  | 30392-32j23j3  | fjkdjsjdskj-2jdjd |      401 | Unauthorized | NULL                      |
  | 3030-3392039   | fjkjsjdjfj-2jfjdj |      200 | ok           | "#/definitions/something" |


   We can make this with the following sql statement:

   #+NAME: Responses View
   #+BEGIN_SRC sql-mode :eval no-export
     CREATE OR REPLACE VIEW "public"."responses" AS 
       SELECT uuid_generate_v1() AS id,
              api_operations.id AS api_operations_id,
              d.key AS response,
              (d.value ->> 'description'::text) AS description,
              CASE
              WHEN (((d.value -> 'schema'::text) IS NOT NULL) AND (((d.value -> 'schema'::text) -> 'type'::text) IS NOT NULL))
                THEN ((d.value -> 'schema'::text) ->> 'type'::text)
              WHEN (((d.value -> 'schema'::text) IS NOT NULL) AND (((d.value -> 'schema'::text) -> '$ref'::text) IS NOT NULL))
               THEN ((d.value -> 'schema'::text) ->> '$ref'::text)
              ELSE NULL::text
             END AS schema
         FROM (api_operations
               JOIN LATERAL jsonb_each(api_operations.responses) d(key, value) ON (true))
        ORDER BY (uuid_generate_v1());
   #+END_SRC

   #+RESULTS: Responses View
   #+begin_src sql-mode
   CREATE VIEW
   #+end_src
   
   This is live on hasura.sharing.io as the =responses= view.
   
** TADA Update Types View to be on swagger.json
   CLOSED: [2019-08-01 Thu 00:10]

   We did two updates, big one changing the name from types to resources.  these objects are v. vague and overlap with others with similar names.  In essence, they are called definitions in the swagger.json, but refer to group/version/kinds and each have their own type within.  A name needs to be decided for this that doesn't clash, and resource seems to work.
   
   The query is straightforward, building from the ones above, with an additional new thing of converting their required jsonb array into a string array (since this is similar to other tickets we'll need to do).  I got how to do this from [[https://www.dbrnd.com/2016/08/postgresql-9-4-how-to-convert-json-array-elements-into-string-array-jsonb_array_elements-string_agg/][this website]]

#+NAME: api_resources view
#+BEGIN_SRC sql-mode :eval never
CREATE OR REPLACE VIEW "public"."api_resources" AS 
 SELECT d.key AS name,
    uuid_generate_v1() AS id,
    raw_swaggers.id AS raw_swagger_id,
    d.value,
    (d.value ->> 'type'::text) AS resource_type,
    (d.value -> 'properties'::text) AS properties,
    (((d.value -> 'x-kubernetes-group-version-kind'::text) -> 0) ->> 'group'::text) AS k8s_group,
    (((d.value -> 'x-kubernetes-group-version-kind'::text) -> 0) ->> 'version'::text) AS k8s_version,
    (((d.value -> 'x-kubernetes-group-version-kind'::text) -> 0) ->> 'kind'::text) AS k8s_kind,
    ( SELECT string_agg(btrim((jsonstring.value)::text, '"'::text), ', '::text) AS string_agg
           FROM jsonb_array_elements((d.value -> 'required'::text)) jsonstring(value)) AS required
   FROM (raw_swaggers
     JOIN LATERAL jsonb_each((raw_swaggers.data -> 'definitions'::text)) d(key, value) ON (true))
  ORDER BY id;
#+END_SRC

   
** TADA Update api_operations view: category
   CLOSED: [2019-08-01 Thu 00:39]
   We want the first part of the first tag in the operations tags array to be the category.
   A tag will be something like 'core_v1' and we just want core.
  So we can do a sub-select query that grabs the first element from the tag array, then do a split_part on '_' for this element.
  
  #+NAME: api_operations with category
  #+BEGIN_SRC sql-mode :eval never
    CREATE OR REPLACE VIEW "public"."api_operations" AS 
     SELECT (d.value ->> 'operationId'::text) AS operation_id,
        uuid_generate_v1() AS id,
        raw_paths.raw_swagger_id,
        d.key AS method,
        raw_paths.path,
        ((d.value -> 'x-kubernetes-group-version-kind'::text) ->> 'group'::text) AS k8s_group,
        ((d.value -> 'x-kubernetes-group-version-kind'::text) ->> 'version'::text) AS k8s_version,
        ((d.value -> 'x-kubernetes-group-version-kind'::text) ->> 'kind'::text) AS k8s_kind,
        ( SELECT split_part((cat_tag.value ->> 0), '_'::text, 1) AS split_part
               FROM jsonb_array_elements((d.value -> 'tags'::text)) cat_tag(value)) AS category,
        (d.value ->> 'description'::text) AS description,
        (d.value ->> 'x-kubernetes-action'::text) AS x_kubernetes_action,
        (d.value -> 'tags'::text) AS tags,
        (d.value -> 'schemes'::text) AS schemes,
        (d.value -> 'consumes'::text) AS consumes,
        (d.value -> 'responses'::text) AS responses,
        (d.value -> 'parameters'::text) AS parameters
       FROM (raw_paths
         JOIN LATERAL jsonb_each(raw_paths.value) d(key, value) ON (true))
      ORDER BY (d.value ->> 'operationId'::text);
  #+END_SRC


** TADA update api_operations view: scheme and tags are text, not array
   CLOSED: [2019-08-01 Thu 00:40]

   follow the same flow as when we added a category.  wonderful string_agging!
   
   #+NAME: update api_operations with tags, schema strings
   #+BEGIN_SRC sql-mode :eval never
     CREATE OR REPLACE VIEW "public"."api_operations" AS 
      SELECT (d.value ->> 'operationId'::text) AS operation_id,
         uuid_generate_v1() AS id,
         raw_paths.raw_swagger_id,
         d.key AS method,
         raw_paths.path,
         ((d.value -> 'x-kubernetes-group-version-kind'::text) ->> 'group'::text) AS k8s_group,
         ((d.value -> 'x-kubernetes-group-version-kind'::text) ->> 'version'::text) AS k8s_version,
         ((d.value -> 'x-kubernetes-group-version-kind'::text) ->> 'kind'::text) AS k8s_kind,
         ( SELECT split_part((cat_tag.value ->> 0), '_'::text, 1) AS split_part
                FROM jsonb_array_elements((d.value -> 'tags'::text)) cat_tag(value)) AS category,
         (d.value ->> 'description'::text) AS description,
         (d.value ->> 'x-kubernetes-action'::text) AS x_kubernetes_action,
         ( SELECT string_agg(btrim((jsonstring.value)::text, '"'::text), ', '::text) AS string_agg
                FROM jsonb_array_elements((d.value -> 'tags'::text)) jsonstring(value)) AS tags,
         ( SELECT string_agg(btrim((jsonstring.value)::text, '"'::text), ', '::text) AS string_agg
                FROM jsonb_array_elements((d.value -> 'schemes'::text)) jsonstring(value)) AS schemes,
         (d.value -> 'consumes'::text) AS consumes,
         (d.value -> 'responses'::text) AS responses,
         (d.value -> 'parameters'::text) AS parameters
        FROM (raw_paths
          JOIN LATERAL jsonb_each(raw_paths.value) d(key, value) ON (true))
       ORDER BY (d.value ->> 'operationId'::text);
   #+END_SRC

** TODO api_operations: add boolean for depcrecated
   
   We want a deprecated column which shows true if the word deprecated shows up in the description.
   We do this using a boolean expression that's essentially =lower(description) like '%deprecated%'=  We are doing lower because it's shown to be faster to lowercase the whole string and use a simple LIKE, than to use the postgres specific ILIKE.

   The new api_operations view:

#+NAME: api_operations with depcrecated
#+BEGIN_SRC sql-mode :eval never
CREATE OR REPLACE VIEW "public"."api_operations" AS 
 SELECT (d.value ->> 'operationId'::text) AS operation_id,
    uuid_generate_v1() AS id,
    raw_paths.raw_swagger_id,
    d.key AS method,
    raw_paths.path,
    ((d.value -> 'x-kubernetes-group-version-kind'::text) ->> 'group'::text) AS k8s_group,
    ((d.value -> 'x-kubernetes-group-version-kind'::text) ->> 'version'::text) AS k8s_version,
    ((d.value -> 'x-kubernetes-group-version-kind'::text) ->> 'kind'::text) AS k8s_kind,
    ( SELECT split_part((cat_tag.value ->> 0), '_'::text, 1) AS split_part
           FROM jsonb_array_elements((d.value -> 'tags'::text)) cat_tag(value)) AS category,
    (d.value ->> 'description'::text) AS description,
    (d.value ->> 'x-kubernetes-action'::text) AS x_kubernetes_action,
    ( SELECT string_agg(btrim((jsonstring.value)::text, '"'::text), ', '::text) AS string_agg
           FROM jsonb_array_elements((d.value -> 'tags'::text)) jsonstring(value)) AS tags,
    ( SELECT string_agg(btrim((jsonstring.value)::text, '"'::text), ', '::text) AS string_agg
           FROM jsonb_array_elements((d.value -> 'schemes'::text)) jsonstring(value)) AS schemes,
    (d.value -> 'consumes'::text) AS consumes,
    (d.value -> 'responses'::text) AS responses,
    (d.value -> 'parameters'::text) AS parameters,
    (lower((d.value ->> 'description'::text)) ~~ '%deprecated%'::text) AS deprecated
   FROM (raw_paths
     JOIN LATERAL jsonb_each(raw_paths.value) d(key, value) ON (true))
  ORDER BY (d.value ->> 'operationId'::text);
#+END_SRC


** TODO materialized views
** TODO optimization indexes on materialized views
** raw operation json
#+BEGIN_SRC  shell
cat ../swagger.json \
  | jq -c '.paths | to_entries | .[].value | to_entries | .[].value | {operationId: .operationId, parameters: .parameters, responses: .responses}'\
  | jq .
 # | head -10 | tail -1
#| {operationId:.operationId}' \
# .[].value | to_entries[][]' \
#  | head -200 | tail -1 | jq .
# | {operationId: .operationId}' \
# {"operationId": value.operationId, "parameter": value.parameters, "responses": value.responses}' #| head -200 | tail -1 | jq .
# |.[].value | to_entries[] | {"operationId": .operationId, "parameter": .parameters, "responses": .responses}'  | head -200 | tail -1 | jq .


#+END_SRC

#+RESULTS:
#+begin_EXAMPLE
{
  "operationId": "getCoreAPIVersions",
  "parameters": null,
  "responses": {
    "200": {
      "description": "OK",
      "schema": {
        "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIVersions"
      }
    },
    "401": {
      "description": "Unauthorized"
    }
  }
}
{
  "operationId": "getCoreV1APIResources",
  "parameters": null,
  "responses": {
    "200": {
      "description": "OK",
      "schema": {
        "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
      }
    },
    "401": {
      "description": "Unauthorized"
    }
  }
}
{
  "operationId": "listCoreV1ComponentStatus",
  "parameters": null,
  "responses": {
    "200": {
      "description": "OK",
      "schema": {
        "$ref": "#/definitions/io.k8s.api.core.v1.ComponentStatusList"
      }
    },
    "401": {
      "description": "Unauthorized"
    }
  }
}
#+end_EXAMPLE

#+BEGIN_SRC shell
  cat swagger.json | jq '.definitions' | 
  | sort -R | grep -vi alpha\\\|beta | grep core | head -40 
cat data.json | psql -h localhost -p 5432 feeds -c \
  "COPY raw_api_definitions (definition_id,data) FROM STDIN with delimite;"
#  "COPY raw_api_definitions (data) FROM STDIN WITH version='master-123';"
#+END_SRC

* api objects + properties
** TODO types view from swagger.json table
** TODO properties view from swagger.json table (likely not much to change)
** TODO materialized views
** TODO optimization indexes on materialized views
** raw definition json

#+NAME: number of definitions
#+BEGIN_SRC  shell
  cat ../swagger.json | jq -c '.definitions | to_entries | map(.value.definition = .key) | map(.value.version="local") | .[].value'  | wc -l
#+END_SRC

#+RESULTS: number of definitions
#+begin_EXAMPLE
630
#+end_EXAMPLE

** raw api definition table

#+NAME: raw_api_definitions
#+BEGIN_SRC sql-mode 
CREATE TABLE raw_api_definitions (
    id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ingested_at timestamp DEFAULT CURRENT_TIMESTAMP,
    -- version text NOT NULL,
    -- definition_id text NOT NULL,
    data jsonb NOT NULL
);
#+END_SRC

** load raw json into table

#+BEGIN_SRC tmate
  cat ../swagger.json \
  | jq -c '.definitions | to_entries | map(.value.definition = .key) | map(.value.version="local") | .[].value' \
  | psql -c "COPY raw_api_definitions (data) FROM STDIN (DELIMITER e'\x02', FORMAT 'csv', QUOTE e'\x01');"
#+END_SRC

** types view
#+NAME: Types View
#+BEGIN_SRC sql-mode
-- DROP VIEW public.types;
CREATE OR REPLACE VIEW "public"."types" AS 
 SELECT raw_api_definitions.id,
    (raw_api_definitions.data ->> 'definition'::text) AS name,
    (raw_api_definitions.data ->> 'description'::text) AS description,
    (((raw_api_definitions.data -> 'x-kubernetes-group-version-kind'::text) ->0) ->> 'group'::text) AS group,
    (((raw_api_definitions.data -> 'x-kubernetes-group-version-kind'::text) ->0) ->> 'version'::text) AS version,
    (((raw_api_definitions.data -> 'x-kubernetes-group-version-kind'::text) ->0) ->> 'kind'::text) AS kind,
    to_jsonb((raw_api_definitions.data -> 'properties')) AS properties,
    (raw_api_definitions.data ->> 'type'::text) AS type,
    (raw_api_definitions.data ->> 'required'::text) AS required,
    (raw_api_definitions.data ->> 'version'::text) AS source
   FROM raw_api_definitions;
#+END_SRC

** properties view
   We wanted our properties view to have a param_kind field, whose value was dynamic based on the properties' type.
   We can do this with a CASE statement, where the value changes based on some boolean expressions
#+NAME: Properties View
#+BEGIN_SRC sql-mode
  CREATE OR REPLACE VIEW "public"."properties" AS 
    SELECT types.id AS type_id,
           d.key AS property,
           d.value,
           (d.value ->> 'description'::text) AS description,
           (d.value ->> 'format'::text) AS format,
           (d.value ->> 'x-kubernetes-patch-merge-key'::text) AS merge_key,
           (d.value ->> 'x-kubernetes-patch-strategy'::text) AS patch_strategy,
           CASE
             WHEN d.key is null THEN false
             WHEN (types.required ? d.key) THEN true
             ELSE false
               END
             AS required,
           replace(
             CASE
             WHEN ((d.value ->> 'type'::text) = 'string'::text) THEN 'string'::text
             WHEN ((d.value ->> 'type'::text) IS NULL) THEN (d.value ->> '$ref'::text)
             WHEN ((d.value ->> 'type'::text) = 'array'::text)
              AND ((d.value -> 'items'::text) ->> 'type'::text) IS NULL
               THEN ((d.value -> 'items'::text) ->> '$ref'::text)
             WHEN ((d.value ->> 'type'::text) = 'array'::text)
              AND ((d.value -> 'items'::text) ->> '$ref'::text) IS NULL
               THEN ((d.value -> 'items'::text) ->> 'type'::text)
             ELSE 'integer'::text
             END, '#/definitions/','') AS param_kind,
           CASE
           WHEN ((d.value ->> 'type'::text) IS NULL) THEN 'subtype'::text
           ELSE (d.value ->> 'type'::text)
             END AS param_type
           -- with param type also containing array, we don't need array as a boolean
           -- CASE
           -- WHEN ((d.value ->> 'type'::text) = 'array'::text) THEN true
           -- ELSE false
           --  END AS "array"
      FROM (types
            JOIN LATERAL jsonb_each(types.properties) d(key, value) ON (true))
     ORDER BY types.id;
#+END_SRC

* TODO Materialized views

Version 9.3 also introduced materialized views.

When you mark a view as materialized, it will requery the data only when you
issue the REFRESH command.

The upside is that you’re not wasting resources running complex queries
repeatedly; the downside is that you might not have the most up-to-date data
when you use the view.

The most convincing cases for using materialized views are when the underlying
query takes a long time and when having timely data is not critical.

You often encounter these scenarios when building online analytical processing
(OLAP) applications. Unlike nonmaterialized views, you can add indexes to
materialized views to speed up the read.

* TODO Creating index on Regular Expressions

You can find a wonderful example of GIN in Waiting for Faster LIKE/ILIKE.
As of version 9.3, you can index regular expressions that leverage the GIN-based pg_trgm extension.

https://www.postgresql.org/docs/current/pgtrgm.html

#+BEGIN_EXAMPLE
Beginning in PostgreSQL 9.3, these index types also support
index searches for regular-expression matches (~ and ~* operators),
for example

SELECT * FROM test_trgm WHERE t ~ '(foo|bar)';

The index search works by extracting trigrams from the regular expression and
then looking these up in the index.

The more trigrams that can be extracted from the regular expression, the more
effective the index search is.

Unlike B-tree based searches, the search string need not be left-anchored.
#+END_EXAMPLE

** Need to create a view

that includes ev.op_id with join on ev.verb ~ op.method and ev.request_uri ~ op.regex

#+BEGIN_SRC sql-mode
select ev.verb, op.method, op.path, ev.request_uri 
from api_operations op, audit_events ev
where ev.request_uri='/api/v1/namespaces/provisioning-4337/pods/csi-hostpath-attacher-0'
and ev.request_uri ~ op.regexp;
#+END_SRC

#+RESULTS:
#+begin_src sql-mode
  verb  | method |                    path                    |                            request_uri                            
--------+--------+--------------------------------------------+-------------------------------------------------------------------
 get    | get    | /api/v1/namespaces/{namespace}/pods/{name} | /api/v1/namespaces/provisioning-4337/pods/csi-hostpath-attacher-0
 get    | get    | /api/v1/namespaces/{namespace}/pods/{name} | /api/v1/namespaces/provisioning-4337/pods/csi-hostpath-attacher-0
 get    | get    | /api/v1/namespaces/{namespace}/pods/{name} | /api/v1/namespaces/provisioning-4337/pods/csi-hostpath-attacher-0
 get    | get    | /api/v1/namespaces/{namespace}/pods/{name} | /api/v1/namespaces/provisioning-4337/pods/csi-hostpath-attacher-0
 get    | get    | /api/v1/namespaces/{namespace}/pods/{name} | /api/v1/namespaces/provisioning-4337/pods/csi-hostpath-attacher-0
 get    | get    | /api/v1/namespaces/{namespace}/pods/{name} | /api/v1/namespaces/provisioning-4337/pods/csi-hostpath-attacher-0
 get    | get    | /api/v1/namespaces/{namespace}/pods/{name} | /api/v1/namespaces/provisioning-4337/pods/csi-hostpath-attacher-0
 get    | get    | /api/v1/namespaces/{namespace}/pods/{name} | /api/v1/namespaces/provisioning-4337/pods/csi-hostpath-attacher-0
 delete | get    | /api/v1/namespaces/{namespace}/pods/{name} | /api/v1/namespaces/provisioning-4337/pods/csi-hostpath-attacher-0
 delete | get    | /api/v1/namespaces/{namespace}/pods/{name} | /api/v1/namespaces/provisioning-4337/pods/csi-hostpath-attacher-0
 get    | put    | /api/v1/namespaces/{namespace}/pods/{name} | /api/v1/namespaces/provisioning-4337/pods/csi-hostpath-attacher-0
 get    | put    | /api/v1/namespaces/{namespace}/pods/{name} | /api/v1/namespaces/provisioning-4337/pods/csi-hostpath-attacher-0
 get    | put    | /api/v1/namespaces/{namespace}/pods/{name} | /api/v1/namespaces/provisioning-4337/pods/csi-hostpath-attacher-0
 get    | put    | /api/v1/namespaces/{namespace}/pods/{name} | /api/v1/namespaces/provisioning-4337/pods/csi-hostpath-attacher-0
 get    | put    | /api/v1/namespaces/{namespace}/pods/{name} | /api/v1/namespaces/provisioning-4337/pods/csi-hostpath-attacher-0
 get    | put    | /api/v1/namespaces/{namespace}/pods/{name} | /api/v1/namespaces/provisioning-4337/pods/csi-hostpath-attacher-0
 get    | put    | /api/v1/namespaces/{namespace}/pods/{name} | /api/v1/namespaces/provisioning-4337/pods/csi-hostpath-attacher-0
 get    | put    | /api/v1/namespaces/{namespace}/pods/{name} | /api/v1/namespaces/provisioning-4337/pods/csi-hostpath-attacher-0
 delete | put    | /api/v1/namespaces/{namespace}/pods/{name} | /api/v1/namespaces/provisioning-4337/pods/csi-hostpath-attacher-0
 delete | put    | /api/v1/namespaces/{namespace}/pods/{name} | /api/v1/namespaces/provisioning-4337/pods/csi-hostpath-attacher-0
 get    | delete | /api/v1/namespaces/{namespace}/pods/{name} | /api/v1/namespaces/provisioning-4337/pods/csi-hostpath-attacher-0
 get    | delete | /api/v1/namespaces/{namespace}/pods/{name} | /api/v1/namespaces/provisioning-4337/pods/csi-hostpath-attacher-0
 get    | delete | /api/v1/namespaces/{namespace}/pods/{name} | /api/v1/namespaces/provisioning-4337/pods/csi-hostpath-attacher-0
 get    | delete | /api/v1/namespaces/{namespace}/pods/{name} | /api/v1/namespaces/provisioning-4337/pods/csi-hostpath-attacher-0
 get    | delete | /api/v1/namespaces/{namespace}/pods/{name} | /api/v1/namespaces/provisioning-4337/pods/csi-hostpath-attacher-0
 get    | delete | /api/v1/namespaces/{namespace}/pods/{name} | /api/v1/namespaces/provisioning-4337/pods/csi-hostpath-attacher-0
 get    | delete | /api/v1/namespaces/{namespace}/pods/{name} | /api/v1/namespaces/provisioning-4337/pods/csi-hostpath-attacher-0
 get    | delete | /api/v1/namespaces/{namespace}/pods/{name} | /api/v1/namespaces/provisioning-4337/pods/csi-hostpath-attacher-0
 delete | delete | /api/v1/namespaces/{namespace}/pods/{name} | /api/v1/namespaces/provisioning-4337/pods/csi-hostpath-attacher-0
 delete | delete | /api/v1/namespaces/{namespace}/pods/{name} | /api/v1/namespaces/provisioning-4337/pods/csi-hostpath-attacher-0
 get    | patch  | /api/v1/namespaces/{namespace}/pods/{name} | /api/v1/namespaces/provisioning-4337/pods/csi-hostpath-attacher-0
 get    | patch  | /api/v1/namespaces/{namespace}/pods/{name} | /api/v1/namespaces/provisioning-4337/pods/csi-hostpath-attacher-0
 get    | patch  | /api/v1/namespaces/{namespace}/pods/{name} | /api/v1/namespaces/provisioning-4337/pods/csi-hostpath-attacher-0
 get    | patch  | /api/v1/namespaces/{namespace}/pods/{name} | /api/v1/namespaces/provisioning-4337/pods/csi-hostpath-attacher-0
 get    | patch  | /api/v1/namespaces/{namespace}/pods/{name} | /api/v1/namespaces/provisioning-4337/pods/csi-hostpath-attacher-0
 get    | patch  | /api/v1/namespaces/{namespace}/pods/{name} | /api/v1/namespaces/provisioning-4337/pods/csi-hostpath-attacher-0
 get    | patch  | /api/v1/namespaces/{namespace}/pods/{name} | /api/v1/namespaces/provisioning-4337/pods/csi-hostpath-attacher-0
 get    | patch  | /api/v1/namespaces/{namespace}/pods/{name} | /api/v1/namespaces/provisioning-4337/pods/csi-hostpath-attacher-0
 delete | patch  | /api/v1/namespaces/{namespace}/pods/{name} | /api/v1/namespaces/provisioning-4337/pods/csi-hostpath-attacher-0
 delete | patch  | /api/v1/namespaces/{namespace}/pods/{name} | /api/v1/namespaces/provisioning-4337/pods/csi-hostpath-attacher-0
(40 rows)

#+end_src


** pg_tgrm index creation

#+BEGIN_SRC sql-mode
CREATE EXTENSION pg_trgm;
#+END_SRC

#+RESULTS:
#+begin_src sql-mode
CREATE EXTENSION
#+end_src

#+BEGIN_SRC sql-mode
create index api_operation_regex ON api_operations USING GIST (regexp gist_trgm_ops);
#+END_SRC

#+BEGIN_SRC sql-mode
create index api_operation_regex_gin ON api_operations USING GIN (regexp gin_trgm_ops);
#+END_SRC

#+RESULTS:
#+begin_src sql-mode
CREATE INDEX
#+end_src

#+BEGIN_SRC sql-mode
reindex table api_operations;
#+END_SRC

#+RESULTS:
#+begin_src sql-mode
REINDEX
#+end_src

* Queries on views
** pod spec related kinds
#+BEGIN_SRC sql-mode
select distinct t.name , p.required , property , param_kind, param_type
from properties p , types t
where (t.name like '%PodSpec' or p.param_kind like '%PodSpec')
-- and p.param_kind like 'io%'
-- and p.required
and p.type_id = t.id
and param_kind not like '%alpha%'
and param_kind not like '%beta%'
-- and p.param_type != 'array'
and t.name not like '%alpha%'
and t.name not like '%beta%'
order by -- param_type,
  t.name,
  param_type,
  param_kind;
#+END_SRC

#+RESULTS:
#+begin_src sql-mode
                name                | required |           property            |               param_kind                | param_type 
------------------------------------+----------+-------------------------------+-----------------------------------------+------------
 io.k8s.api.core.v1.Pod             | f        | spec                          | io.k8s.api.core.v1.PodSpec              | subtype
 io.k8s.api.core.v1.PodSpec         | f        | initContainers                | io.k8s.api.core.v1.Container            | array
 io.k8s.api.core.v1.PodSpec         | t        | containers                    | io.k8s.api.core.v1.Container            | array
 io.k8s.api.core.v1.PodSpec         | f        | hostAliases                   | io.k8s.api.core.v1.HostAlias            | array
 io.k8s.api.core.v1.PodSpec         | f        | imagePullSecrets              | io.k8s.api.core.v1.LocalObjectReference | array
 io.k8s.api.core.v1.PodSpec         | f        | readinessGates                | io.k8s.api.core.v1.PodReadinessGate     | array
 io.k8s.api.core.v1.PodSpec         | f        | tolerations                   | io.k8s.api.core.v1.Toleration           | array
 io.k8s.api.core.v1.PodSpec         | f        | volumes                       | io.k8s.api.core.v1.Volume               | array
 io.k8s.api.core.v1.PodSpec         | f        | automountServiceAccountToken  | integer                                 | boolean
 io.k8s.api.core.v1.PodSpec         | f        | enableServiceLinks            | integer                                 | boolean
 io.k8s.api.core.v1.PodSpec         | f        | hostIPC                       | integer                                 | boolean
 io.k8s.api.core.v1.PodSpec         | f        | hostNetwork                   | integer                                 | boolean
 io.k8s.api.core.v1.PodSpec         | f        | hostPID                       | integer                                 | boolean
 io.k8s.api.core.v1.PodSpec         | f        | shareProcessNamespace         | integer                                 | boolean
 io.k8s.api.core.v1.PodSpec         | f        | activeDeadlineSeconds         | integer                                 | integer
 io.k8s.api.core.v1.PodSpec         | f        | priority                      | integer                                 | integer
 io.k8s.api.core.v1.PodSpec         | f        | terminationGracePeriodSeconds | integer                                 | integer
 io.k8s.api.core.v1.PodSpec         | f        | nodeSelector                  | integer                                 | object
 io.k8s.api.core.v1.PodSpec         | f        | overhead                      | integer                                 | object
 io.k8s.api.core.v1.PodSpec         | f        | dnsPolicy                     | string                                  | string
 io.k8s.api.core.v1.PodSpec         | f        | hostname                      | string                                  | string
 io.k8s.api.core.v1.PodSpec         | f        | nodeName                      | string                                  | string
 io.k8s.api.core.v1.PodSpec         | f        | preemptionPolicy              | string                                  | string
 io.k8s.api.core.v1.PodSpec         | f        | priorityClassName             | string                                  | string
 io.k8s.api.core.v1.PodSpec         | f        | restartPolicy                 | string                                  | string
 io.k8s.api.core.v1.PodSpec         | f        | runtimeClassName              | string                                  | string
 io.k8s.api.core.v1.PodSpec         | f        | schedulerName                 | string                                  | string
 io.k8s.api.core.v1.PodSpec         | f        | serviceAccount                | string                                  | string
 io.k8s.api.core.v1.PodSpec         | f        | serviceAccountName            | string                                  | string
 io.k8s.api.core.v1.PodSpec         | f        | subdomain                     | string                                  | string
 io.k8s.api.core.v1.PodSpec         | f        | affinity                      | io.k8s.api.core.v1.Affinity             | subtype
 io.k8s.api.core.v1.PodSpec         | f        | dnsConfig                     | io.k8s.api.core.v1.PodDNSConfig         | subtype
 io.k8s.api.core.v1.PodSpec         | f        | securityContext               | io.k8s.api.core.v1.PodSecurityContext   | subtype
 io.k8s.api.core.v1.PodTemplateSpec | f        | spec                          | io.k8s.api.core.v1.PodSpec              | subtype
(34 rows)

#+end_src
** others
#+BEGIN_SRC sql-mode
select * from properties where merge_key is not null order by required DESC limit 100	;
#+END_SRC

#+BEGIN_SRC sql-mode
select "group"
  , version
  , kind
  , name
  , property
  , required
--, format
, kind_ref
-- , array_kind_ref
-- ,patch_strategy, merge_key
 from properties
where 
(
    kind_ref like 'io.k8s.api.core.v1.Pod%'
--    kind_ref like 'io.k8s.api.core.v1.Pod%Spec%'
--  or kind_ref like 'io.k8s.api.apps.v1.%Spec'
) and
name not like '%beta%'
and name not like '%alpha%'
order by kind ;
-- and merge_key is not null
-- order by merge_key
-- limit 20;
#+END_SRC
** basic parameteters
#+NAME: only integers and strins have formats
#+BEGIN_SRC sql-mode
select distinct t.name, format, param_kind, param_type
from properties p
, types t
where param_kind not like 'io%'
and p.required
and p.type_id = t.id
and t.name not like '%alpha%'
and t.name not like '%beta%'
-- format is not null
order by param_kind, format, param_type, name
limit 40;
#+END_SRC

#+RESULTS: only integers and strins have formats
#+begin_src sql-mode
                               name                                | format | param_kind | param_type 
-------------------------------------------------------------------+--------+------------+------------
 io.k8s.api.apps.v1.DaemonSetStatus                                | int32  | integer    | integer
 io.k8s.api.apps.v1.ReplicaSetStatus                               | int32  | integer    | integer
 io.k8s.api.apps.v1.StatefulSetStatus                              | int32  | integer    | integer
 io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerSpec             | int32  | integer    | integer
 io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerStatus           | int32  | integer    | integer
 io.k8s.api.autoscaling.v1.ScaleStatus                             | int32  | integer    | integer
 io.k8s.api.core.v1.ContainerPort                                  | int32  | integer    | integer
 io.k8s.api.core.v1.ContainerStateTerminated                       | int32  | integer    | integer
 io.k8s.api.core.v1.ContainerStatus                                | int32  | integer    | integer
 io.k8s.api.core.v1.DaemonEndpoint                                 | int32  | integer    | integer
 io.k8s.api.core.v1.EndpointPort                                   | int32  | integer    | integer
 io.k8s.api.core.v1.ISCSIPersistentVolumeSource                    | int32  | integer    | integer
 io.k8s.api.core.v1.ISCSIVolumeSource                              | int32  | integer    | integer
 io.k8s.api.core.v1.PreferredSchedulingTerm                        | int32  | integer    | integer
 io.k8s.api.core.v1.ReplicationControllerStatus                    | int32  | integer    | integer
 io.k8s.api.core.v1.ServicePort                                    | int32  | integer    | integer
 io.k8s.api.core.v1.WeightedPodAffinityTerm                        | int32  | integer    | integer
 io.k8s.api.scheduling.v1.PriorityClass                            | int32  | integer    | integer
 io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceSpec | int32  | integer    | integer
 io.k8s.api.apps.v1.ControllerRevision                             | int64  | integer    | integer
 io.k8s.api.authorization.v1.SubjectAccessReviewStatus             |        | integer    | boolean
 io.k8s.api.authorization.v1.SubjectRulesReviewStatus              |        | integer    | boolean
 io.k8s.api.core.v1.ContainerStatus                                |        | integer    | boolean
 io.k8s.apimachinery.pkg.apis.meta.v1.APIResource                  |        | integer    | boolean
 io.k8s.api.storage.v1.VolumeAttachmentStatus                      |        | integer    | boolean
 io.k8s.apimachinery.pkg.runtime.RawExtension                      | byte   | string     | string
 io.k8s.api.admissionregistration.v1.MutatingWebhook               |        | string     | array
 io.k8s.api.admissionregistration.v1.ValidatingWebhook             |        | string     | array
 io.k8s.api.authentication.v1.TokenRequestSpec                     |        | string     | array
 io.k8s.api.authorization.v1.NonResourceRule                       |        | string     | array
 io.k8s.api.authorization.v1.ResourceRule                          |        | string     | array
 io.k8s.api.core.v1.CephFSPersistentVolumeSource                   |        | string     | array
 io.k8s.api.core.v1.CephFSVolumeSource                             |        | string     | array
 io.k8s.api.core.v1.ContainerImage                                 |        | string     | array
 io.k8s.api.core.v1.RBDPersistentVolumeSource                      |        | string     | array
 io.k8s.api.core.v1.RBDVolumeSource                                |        | string     | array
 io.k8s.api.core.v1.TopologySelectorLabelRequirement               |        | string     | array
 io.k8s.apimachinery.pkg.apis.meta.v1.APIResource                  |        | string     | array
 io.k8s.apimachinery.pkg.apis.meta.v1.APIVersions                  |        | string     | array
 io.k8s.api.rbac.v1.PolicyRule                                     |        | string     | array
(40 rows)

#+end_src
** k8s parameters
#+NAME: no formats
#+BEGIN_SRC sql-mode
select distinct
t.name
, property
-- p.required,
-- , param_type
, param_kind
from properties p
, types t
where param_kind like 'io%'
and p.required
and p.type_id = t.id
and param_kind not like '%alpha%'
and param_kind not like '%beta%'
-- and p.param_type != 'array'
and t.name not like '%alpha%'
and t.name not like '%beta%'
order by -- param_type,
  t.name DESC,
  param_kind;
--;-- limit 20;
#+END_SRC

#+RESULTS: no formats
#+begin_src sql-mode
                                  name                                  |          property          |                             param_kind                              
------------------------------------------------------------------------+----------------------------+---------------------------------------------------------------------
 io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceSpec      | service                    | io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.ServiceReference
 io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceList      | items                      | io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService
 io.k8s.api.storage.v1.VolumeAttachmentSpec                             | source                     | io.k8s.api.storage.v1.VolumeAttachmentSource
 io.k8s.api.storage.v1.VolumeAttachmentList                             | items                      | io.k8s.api.storage.v1.VolumeAttachment
 io.k8s.api.storage.v1.VolumeAttachment                                 | spec                       | io.k8s.api.storage.v1.VolumeAttachmentSpec
 io.k8s.api.storage.v1.StorageClassList                                 | items                      | io.k8s.api.storage.v1.StorageClass
 io.k8s.api.scheduling.v1.PriorityClassList                             | items                      | io.k8s.api.scheduling.v1.PriorityClass
 io.k8s.api.rbac.v1.RoleList                                            | items                      | io.k8s.api.rbac.v1.Role
 io.k8s.api.rbac.v1.RoleBindingList                                     | items                      | io.k8s.api.rbac.v1.RoleBinding
 io.k8s.api.rbac.v1.RoleBinding                                         | roleRef                    | io.k8s.api.rbac.v1.RoleRef
 io.k8s.api.rbac.v1.ClusterRoleList                                     | items                      | io.k8s.api.rbac.v1.ClusterRole
 io.k8s.api.rbac.v1.ClusterRoleBindingList                              | items                      | io.k8s.api.rbac.v1.ClusterRoleBinding
 io.k8s.api.rbac.v1.ClusterRoleBinding                                  | roleRef                    | io.k8s.api.rbac.v1.RoleRef
 io.k8s.api.networking.v1.NetworkPolicySpec                             | podSelector                | io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector
 io.k8s.api.networking.v1.NetworkPolicyList                             | items                      | io.k8s.api.networking.v1.NetworkPolicy
 io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent                        | object                     | io.k8s.apimachinery.pkg.runtime.RawExtension
 io.k8s.apimachinery.pkg.apis.meta.v1.APIVersions                       | serverAddressByClientCIDRs | io.k8s.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR
 io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList                   | resources                  | io.k8s.apimachinery.pkg.apis.meta.v1.APIResource
 io.k8s.apimachinery.pkg.apis.meta.v1.APIGroupList                      | groups                     | io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup
 io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup                          | versions                   | io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery
 io.k8s.api.core.v1.WeightedPodAffinityTerm                             | podAffinityTerm            | io.k8s.api.core.v1.PodAffinityTerm
 io.k8s.api.core.v1.TCPSocketAction                                     | port                       | io.k8s.apimachinery.pkg.util.intstr.IntOrString
 io.k8s.api.core.v1.ServiceList                                         | items                      | io.k8s.api.core.v1.Service
 io.k8s.api.core.v1.ServiceAccountList                                  | items                      | io.k8s.api.core.v1.ServiceAccount
 io.k8s.api.core.v1.SecretList                                          | items                      | io.k8s.api.core.v1.Secret
 io.k8s.api.core.v1.ScaleIOVolumeSource                                 | secretRef                  | io.k8s.api.core.v1.LocalObjectReference
 io.k8s.api.core.v1.ScaleIOPersistentVolumeSource                       | secretRef                  | io.k8s.api.core.v1.SecretReference
 io.k8s.api.core.v1.ResourceQuotaList                                   | items                      | io.k8s.api.core.v1.ResourceQuota
 io.k8s.api.core.v1.ReplicationControllerList                           | items                      | io.k8s.api.core.v1.ReplicationController
 io.k8s.api.core.v1.ProjectedVolumeSource                               | sources                    | io.k8s.api.core.v1.VolumeProjection
 io.k8s.api.core.v1.PreferredSchedulingTerm                             | preference                 | io.k8s.api.core.v1.NodeSelectorTerm
 io.k8s.api.core.v1.PodTemplateList                                     | items                      | io.k8s.api.core.v1.PodTemplate
 io.k8s.api.core.v1.PodSpec                                             | containers                 | io.k8s.api.core.v1.Container
 io.k8s.api.core.v1.PodList                                             | items                      | io.k8s.api.core.v1.Pod
 io.k8s.api.core.v1.PersistentVolumeList                                | items                      | io.k8s.api.core.v1.PersistentVolume
 io.k8s.api.core.v1.PersistentVolumeClaimList                           | items                      | io.k8s.api.core.v1.PersistentVolumeClaim
 io.k8s.api.core.v1.NodeSelector                                        | nodeSelectorTerms          | io.k8s.api.core.v1.NodeSelectorTerm
 io.k8s.api.core.v1.NodeList                                            | items                      | io.k8s.api.core.v1.Node
 io.k8s.api.core.v1.NamespaceList                                       | items                      | io.k8s.api.core.v1.Namespace
 io.k8s.api.core.v1.LimitRangeSpec                                      | limits                     | io.k8s.api.core.v1.LimitRangeItem
 io.k8s.api.core.v1.LimitRangeList                                      | items                      | io.k8s.api.core.v1.LimitRange
 io.k8s.api.core.v1.HTTPGetAction                                       | port                       | io.k8s.apimachinery.pkg.util.intstr.IntOrString
 io.k8s.api.core.v1.EventList                                           | items                      | io.k8s.api.core.v1.Event
 io.k8s.api.core.v1.Event                                               | involvedObject             | io.k8s.api.core.v1.ObjectReference
 io.k8s.api.core.v1.Event                                               | metadata                   | io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta
 io.k8s.api.core.v1.EndpointsList                                       | items                      | io.k8s.api.core.v1.Endpoints
 io.k8s.api.core.v1.ConfigMapList                                       | items                      | io.k8s.api.core.v1.ConfigMap
 io.k8s.api.core.v1.ComponentStatusList                                 | items                      | io.k8s.api.core.v1.ComponentStatus
 io.k8s.api.core.v1.Binding                                             | target                     | io.k8s.api.core.v1.ObjectReference
 io.k8s.api.coordination.v1.LeaseList                                   | items                      | io.k8s.api.coordination.v1.Lease
 io.k8s.api.batch.v1.JobSpec                                            | template                   | io.k8s.api.core.v1.PodTemplateSpec
 io.k8s.api.batch.v1.JobList                                            | items                      | io.k8s.api.batch.v1.Job
 io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerSpec                  | scaleTargetRef             | io.k8s.api.autoscaling.v1.CrossVersionObjectReference
 io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerList                  | items                      | io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler
 io.k8s.api.authorization.v1.SubjectRulesReviewStatus                   | nonResourceRules           | io.k8s.api.authorization.v1.NonResourceRule
 io.k8s.api.authorization.v1.SubjectRulesReviewStatus                   | resourceRules              | io.k8s.api.authorization.v1.ResourceRule
 io.k8s.api.authorization.v1.SubjectAccessReview                        | spec                       | io.k8s.api.authorization.v1.SubjectAccessReviewSpec
 io.k8s.api.authorization.v1.SelfSubjectRulesReview                     | spec                       | io.k8s.api.authorization.v1.SelfSubjectRulesReviewSpec
 io.k8s.api.authorization.v1.SelfSubjectAccessReview                    | spec                       | io.k8s.api.authorization.v1.SelfSubjectAccessReviewSpec
 io.k8s.api.authorization.v1.LocalSubjectAccessReview                   | spec                       | io.k8s.api.authorization.v1.SubjectAccessReviewSpec
 io.k8s.api.authentication.v1.TokenReview                               | spec                       | io.k8s.api.authentication.v1.TokenReviewSpec
 io.k8s.api.authentication.v1.TokenRequestStatus                        | expirationTimestamp        | io.k8s.apimachinery.pkg.apis.meta.v1.Time
 io.k8s.api.authentication.v1.TokenRequest                              | spec                       | io.k8s.api.authentication.v1.TokenRequestSpec
 io.k8s.api.apps.v1.StatefulSetSpec                                     | template                   | io.k8s.api.core.v1.PodTemplateSpec
 io.k8s.api.apps.v1.StatefulSetSpec                                     | selector                   | io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector
 io.k8s.api.apps.v1.StatefulSetList                                     | items                      | io.k8s.api.apps.v1.StatefulSet
 io.k8s.api.apps.v1.ReplicaSetSpec                                      | selector                   | io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector
 io.k8s.api.apps.v1.ReplicaSetList                                      | items                      | io.k8s.api.apps.v1.ReplicaSet
 io.k8s.api.apps.v1.DeploymentSpec                                      | template                   | io.k8s.api.core.v1.PodTemplateSpec
 io.k8s.api.apps.v1.DeploymentSpec                                      | selector                   | io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector
 io.k8s.api.apps.v1.DeploymentList                                      | items                      | io.k8s.api.apps.v1.Deployment
 io.k8s.api.apps.v1.DaemonSetSpec                                       | template                   | io.k8s.api.core.v1.PodTemplateSpec
 io.k8s.api.apps.v1.DaemonSetSpec                                       | selector                   | io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector
 io.k8s.api.apps.v1.DaemonSetList                                       | items                      | io.k8s.api.apps.v1.DaemonSet
 io.k8s.api.apps.v1.ControllerRevisionList                              | items                      | io.k8s.api.apps.v1.ControllerRevision
 io.k8s.api.admissionregistration.v1.ValidatingWebhookConfigurationList | items                      | io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration
 io.k8s.api.admissionregistration.v1.ValidatingWebhook                  | clientConfig               | io.k8s.api.admissionregistration.v1.WebhookClientConfig
 io.k8s.api.admissionregistration.v1.MutatingWebhookConfigurationList   | items                      | io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration
 io.k8s.api.admissionregistration.v1.MutatingWebhook                    | clientConfig               | io.k8s.api.admissionregistration.v1.WebhookClientConfig
(79 rows)

#+end_src

** merge strategies and patch keys
#+BEGIN_SRC sql-mode
select t.name as kind,
-- t.group,
-- version,
-- kind,
property,
p.required,
patch_strategy, merge_key, param_kind, param_type
from properties p, types t
where patch_strategy is not null
and p.type_id = t.id
and param_kind not like '%alpha%'
and param_kind not like '%beta%'
-- and p.required
order by version, "group", param_kind, patch_strategy, merge_key;
--;-- limit 20;
#+END_SRC

#+RESULTS:
#+begin_src sql-mode
                                kind                                 |     property     | required |  patch_strategy  |   merge_key   |                               param_kind                               | param_type 
---------------------------------------------------------------------+------------------+----------+------------------+---------------+------------------------------------------------------------------------+------------
 io.k8s.api.core.v1.ComponentStatus                                  | conditions       | f        | merge            | type          | io.k8s.api.core.v1.ComponentCondition                                  | array
 io.k8s.api.core.v1.ServiceAccount                                   | secrets          | f        | merge            | name          | io.k8s.api.core.v1.ObjectReference                                     | array
 io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration    | webhooks         | f        | merge            | name          | io.k8s.api.admissionregistration.v1.MutatingWebhook                    | array
 io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration  | webhooks         | f        | merge            | name          | io.k8s.api.admissionregistration.v1.ValidatingWebhook                  | array
 io.k8s.api.apps.v1.DaemonSetStatus                                  | conditions       | f        | merge            | type          | io.k8s.api.apps.v1.DaemonSetCondition                                  | array
 io.k8s.api.apps.v1.DeploymentStatus                                 | conditions       | f        | merge            | type          | io.k8s.api.apps.v1.DeploymentCondition                                 | array
 io.k8s.api.apps.v1.DeploymentSpec                                   | strategy         | f        | retainKeys       |               | io.k8s.api.apps.v1.DeploymentStrategy                                  | subtype
 io.k8s.api.apps.v1.ReplicaSetStatus                                 | conditions       | f        | merge            | type          | io.k8s.api.apps.v1.ReplicaSetCondition                                 | array
 io.k8s.api.apps.v1.StatefulSetStatus                                | conditions       | f        | merge            | type          | io.k8s.api.apps.v1.StatefulSetCondition                                | array
 io.k8s.api.batch.v1.JobStatus                                       | conditions       | f        | merge            | type          | io.k8s.api.batch.v1.JobCondition                                       | array
 io.k8s.api.core.v1.PodSpec                                          | initContainers   | f        | merge            | name          | io.k8s.api.core.v1.Container                                           | array
 io.k8s.api.core.v1.PodSpec                                          | containers       | t        | merge            | name          | io.k8s.api.core.v1.Container                                           | array
 io.k8s.api.core.v1.Container                                        | ports            | f        | merge            | containerPort | io.k8s.api.core.v1.ContainerPort                                       | array
 io.k8s.api.core.v1.Container                                        | env              | f        | merge            | name          | io.k8s.api.core.v1.EnvVar                                              | array
 io.k8s.api.core.v1.PodSpec                                          | hostAliases      | f        | merge            | ip            | io.k8s.api.core.v1.HostAlias                                           | array
 io.k8s.api.core.v1.PodSpec                                          | imagePullSecrets | f        | merge            | name          | io.k8s.api.core.v1.LocalObjectReference                                | array
 io.k8s.api.core.v1.NodeStatus                                       | addresses        | f        | merge            | type          | io.k8s.api.core.v1.NodeAddress                                         | array
 io.k8s.api.core.v1.NodeStatus                                       | conditions       | f        | merge            | type          | io.k8s.api.core.v1.NodeCondition                                       | array
 io.k8s.api.core.v1.PersistentVolumeClaimStatus                      | conditions       | f        | merge            | type          | io.k8s.api.core.v1.PersistentVolumeClaimCondition                      | array
 io.k8s.api.core.v1.PodStatus                                        | conditions       | f        | merge            | type          | io.k8s.api.core.v1.PodCondition                                        | array
 io.k8s.api.core.v1.PodStatus                                        | podIPs           | f        | merge            | ip            | io.k8s.api.core.v1.PodIP                                               | array
 io.k8s.api.core.v1.ReplicationControllerStatus                      | conditions       | f        | merge            | type          | io.k8s.api.core.v1.ReplicationControllerCondition                      | array
 io.k8s.api.core.v1.ServiceSpec                                      | ports            | f        | merge            | port          | io.k8s.api.core.v1.ServicePort                                         | array
 io.k8s.api.core.v1.PodSpec                                          | volumes          | f        | merge,retainKeys | name          | io.k8s.api.core.v1.Volume                                              | array
 io.k8s.api.core.v1.Container                                        | volumeDevices    | f        | merge            | devicePath    | io.k8s.api.core.v1.VolumeDevice                                        | array
 io.k8s.api.core.v1.Container                                        | volumeMounts     | f        | merge            | mountPath     | io.k8s.api.core.v1.VolumeMount                                         | array
 io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta                     | ownerReferences  | f        | merge            | uid           | io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference                    | array
 io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceStatus | conditions       | f        | merge            | type          | io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceCondition | array
 io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement       | key              | t        | merge            | key           | string                                                                 | string
 io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta                     | finalizers       | f        | merge            |               | string                                                                 | array
 io.k8s.api.core.v1.NodeSpec                                         | podCIDRs         | f        | merge            |               | string                                                                 | array
(31 rows)

#+end_src
   
* Views
  
Well-designed relational databases store data in normalized form.
To access this data across scattered tables, you write queries to join underlying tables.

When you find yourself writing the same query over and over again, create a
view. Simply put, a view is nothing more than a query permanently stored in the
database.

Some purists have argued that one should always query a view, never tables. This
means you must create a view for every table that you intend to query directly.

The added layer of indirection eases management of permissions and facilitates abstraction of table data.

* More JSON functions:
** json_build_array
** json_build_object
** json_object
** json_to_record
** json_to_recordset

