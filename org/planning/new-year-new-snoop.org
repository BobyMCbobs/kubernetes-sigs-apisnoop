#+TITLE: New Year New Snoop

* Purpose
Lay out the requirements for apisnoop, and the next possible steps to achieve these requirements.
* What is APISnoop?
A set of methods to explore the testing coverage of kubernetes.
It:
- deploys on a kubernetes cluster.
- pulls in raw audit log data and converts it to a postgres database that can be queried directly with sql.
- listens to any api event performed on its cluster, and adds it to the databse as well, to be easily queried.
- provides a web interface to visualize coverage for kubernetes in general, drawing from the db.
- provides a web interface for visualizing a tester's effect on coverage, also drawing from the db.
- feeds a prowbot that runs on PR's to kubernetes, to check how this PR would affect test coverage.
* APISnoop Audience
** Sig-Testing and Sig-Architecture
  - want to see the current state of coverage
  - want to automate some best practices (e.g. the prowbot)
  - want an overview of how coverage is increasing/decreasing, to see whether their strategies are working positively.
  - want reports and advice on where to focus test writing or coverage.
  - want more tests to be written, and for them to be high quality and easy to review.
** Kubernetes Test Writers:
  - Want to explore a cluster to determine which type of test to write next.
  - want help to ensure the tests they are writing are hitting their set endpoints.
  - Want a way to show the positive effect of their test, to better ensure their test is merged.

* APISnoop Requirements
** WebApp Requirements
*** For Sig-Testing/Sig-Arch
**** See sunburst that shows coverage for a given job/bucket
**** Be able to follow a URL that will show sunburst for given job/bucket
**** Be able to see change over time for general kubernetes coverage.
**** Be able to zoom into or filter the sunburst for better view
**** Explore an endpoint
     - tests that hit the endpoint
     - sequence of this test
*** For Testers
**** See and explore sunburst
**** See what endpoints are being hit by written tests
     - be able to enter in useragents to filter by?
**** See comparison of live cluster coverage vs current coverage.
     what bucket is chosen here?  how do you determine baseline?
**** View Tests that might be a good candidate for promotion
     - not yet conformance
     - over two weeks old
     - hit a focused # of endpoints
     - hit stable/core endpoints that are not yet conformant.
     - does not require a feature flag.
** Backend Requirements
   - logical schema for exploring data.
   - documentation for queries and fields.
   - authentication.
* Next Steps
  Tasks that can be broken into 4 hour chunks
** Determine Routes for the Web App
   - /
   - /:bucket/:job
   - /:bucket/:job/:level/:category/:endpoint
   - /:bucket/:job/:level/:category/:endpoint/:tests
   - /over-time
   - /over-time/bucket/?start=DATE&end=DATE
   - /live-testing
** Sunburst on display is based on url params
** Display coverage numbers for the clicked on, or hovered on section of sunburst.
** Revisit graphql schema and determine rooms for improvement, increased efficiency/speed.
** Build relationship in graqphl between endopint and its entry in apioperation
** Hover over endpoint shows more indepth info
   - description
   - path
   - tested?/conformance-tested?
   - test tags that hit.
   - link to view tests.
   - click on test tag goes to tests filtered by that tag.
** Clicking on section of sunburst directs to the proper url (bucket/job/level/category etc).
** Build basic 'live-testing' layout.
** Determine method for choosing 'baseline' in live-testing views
** Build a subscription query for live-testing, so our components update when new events are added to db.
** Build visual that shows basline coverage versus testing coverage
** Build visual that shows endpoints hit by tests
** Clicking on endpoint in endpoint-hit-by-test-visual gives more info about it
** Add authentication to api endpoint
* Questions
  - if sharable urls are important, than is maintaining links important?
    - If we provide link to particular bucket/job means we must maintain that bucket/job in our db?
    - How do we persist data and ensure stable db?
    - If not important, do we need sharable urls?
  - How often do we add a new record to our db, and how long does it persist?
    - daily? Thrice-daily?
    - Do we keep a record for each week/month/year?
      
      
