#+TITLE: Creating a schema for the OpenAPI Spec
#+PROPERTY: header-args:python :tangle yes

* What do we have at a high level

Set the :dir for shell to ~/go/src/k8s.io/kubernetes/api/openapi-spec

#+NAME: swagger keys
#+BEGIN_SRC shell :dir ~/go/src/k8s.io/kubernetes/api/openapi-spec
  cat swagger.json | jq -r keys[]
#+END_SRC

Looks like we have 6 different high levels. Let's walk through them.

#+RESULTS: swagger keys
#+begin_EXAMPLE
definitions
info
paths
security
securityDefinitions
swagger
#+end_EXAMPLE

** notes
  Download the OpenAPI Spec

#+BEGIN_SRC tmate
    # or set your folder to ~/go/src/k8s.io/kubernetes and ensure you are checked out to master etc
    cd ~/ii/apisnoop_v3
    curl -o swagger.json \
         https://raw.githubusercontent.com/kubernetes/kubernetes/master/api/openapi-spec/swagger.json
#+END_SRC

[[file:../swagger.json]]
https://github.com/TomNomNom/gron

#+BEGIN_SRC shell
curl -L https://github.com/tomnomnom/gron/releases/download/v0.6.0/gron-linux-amd64-0.6.0.tgz \
|  tar xvfzC - ~/go/bin
#|  tar xvfzC - /usr/local/bin
# or:
# go get -u github.com/tomnomnom/gron
#+END_SRC

#+RESULTS:
#+begin_EXAMPLE
#+end_EXAMPLE

#+BEGIN_SRC shell
file ~/go/bin/gron
file /usr/local/bin/gron
#+END_SRC

#+RESULTS:
#+begin_EXAMPLE
/zfs/home/hh/go/bin/gron: POSIX tar archive (GNU)
/usr/local/bin/gron: cannot open `/usr/local/bin/gron' (No such file or directory)
#+end_EXAMPLE



* SQL
** columns
*** id
#+NAME: id
#+BEGIN_SRC sql-mode
  id text NOT NULL,
#+END_SRC
*** method
#+NAME: method
#+BEGIN_SRC sql-mode
  method text NOT NULL,
#+END_SRC
*** path
#+NAME: path
#+BEGIN_SRC sql-mode
  path text NOT NULL,
#+END_SRC
*** regexp
#+NAME: path
#+BEGIN_SRC sql-mode
  regexp text NOT NULL,
#+END_SRC
*** group
#+NAME: group
#+BEGIN_SRC sql-mode
  group text NOT NULL,
#+END_SRC
*** version
#+NAME: version
#+BEGIN_SRC sql-mode
  version text NOT NULL,
#+END_SRC
*** kind
#+NAME: kind
#+BEGIN_SRC sql-mode
  kind text NOT NULL,
#+END_SRC
*** category
#+NAME: category
#+BEGIN_SRC sql-mode
  category text NOT NULL,
#+END_SRC
*** description
#+NAME: description
#+BEGIN_SRC sql-mode
  description text NOT NULL,
#+END_SRC
*** tags
I don't think we use tags yet, and it's a list.
Leaving for now.
#+NAME: tags
#+BEGIN_SRC sql-mode
  tags text NOT NULL,
#+END_SRC

* Paths
:PROPERTIES:
:header-args:python+: :tangle yes
:END:
 
** keys

#+BEGIN_SRC shell :dir ~/go/src/k8s.io/kubernetes/api/openapi-spec :wrap "SRC json"
  cat swagger.json | jq '.paths' | jq -r 'keys[]' \
  | sort -R | head -20
  # | grep -vi alpha\\\|beta \
#+end_src

#+results:
#+begin_SRC json
/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status
/api/v1/watch/namespaces/{namespace}/serviceaccounts/{name}
/apis/networking.k8s.io/v1beta1/namespaces/{namespace}/ingresses/{name}/status
/apis/coordination.k8s.io/v1/leases
/api/v1/namespaces/{namespace}/limitranges
/apis/scheduling.k8s.io/v1alpha1/priorityclasses
/apis/apps/v1beta2/watch/statefulsets
/apis/apps/v1beta2/namespaces/{namespace}/statefulsets
/apis/certificates.k8s.io/v1beta1/watch/certificatesigningrequests/{name}
/apis/apiextensions.k8s.io/v1beta1/watch/customresourcedefinitions/{name}
/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}/approval
/apis/apps/v1beta2/namespaces/{namespace}/daemonsets/{name}
/apis/rbac.authorization.k8s.io/v1beta1/watch/rolebindings
/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets/{name}
/api/v1/watch/namespaces/{namespace}/persistentvolumeclaims
/apis/batch/v1beta1/namespaces/{namespace}/cronjobs/{name}/status
/apis/batch/v2alpha1/watch/cronjobs
/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/rolebindings
/apis/networking.k8s.io/v1/watch/namespaces/{namespace}/networkpolicies
/apis/apps/v1/namespaces/{namespace}/controllerrevisions/{name}
#+end_SRC

** what we currently use
*** path_regex

#+NAME: compile_path_regex
#+BEGIN_SRC python :eval never
import re
import json

# k8s appears to allow/expect a trailing {path} variable to capture everything
# remaining in the path, including '/' characters, which doesn't appear to be
# allowed according to the openapi 2.0 or 3.0 specs
# (ref: https://github.com/OAI/OpenAPI-Specification/issues/892)
K8S_PATH_VARIABLE_PATTERN = re.compile("{(path)}$")
VARIABLE_PATTERN = re.compile("{([^}]+)}")
def regex_from_path(path):
    # first replace the special trailing {path} wildcard with a named regex
    path_regex = K8S_PATH_VARIABLE_PATTERN.sub("(?P<\\1>.+)", path).rstrip('/')
    # replace wildcards in {varname} format to a named regex
    path_regex = VARIABLE_PATTERN.sub("(?P<\\1>[^/]+)", path_regex).rstrip('/')
    # TODO(spiffxp): unsure if trailing / _should_ be counted toward /proxy
    if path_regex.endswith("proxy"): # allow proxy to catch a trailing /
        path_regex += "/?$"
    else:
        path_regex += "$"
    # print('Converted path: %s into path_regex: %s' % (path, path_regex))
    return path_regex
#+END_SRC

*** paths
*** level

#+NAME: parse_level_from_path
#+BEGIN_SRC python :eval nevel
LEVEL_PATTERN = re.compile("/v(?P<api_version>[0-9]+)(?:(?P<api_level>alpha|beta)(?P<api_level_version>[0-9]+))?")
def level_from_path(path):
    # get the level (alpha/beta/stable) and the version from the path
    level = None
    match = LEVEL_PATTERN.search(path)
    if match:
        level = match.groupdict().get("api_level")
    if level is None:
        level = "stable"
    return level
#+END_SRC

*** action / methods
Under each path, each key is the method / action.
** load_openapi_spec

#+NAME: load_openapi_spec
#+BEGIN_SRC python :eval never
  try:
      from urllib.parse import urlparse
  except Exception as e:
      from urlparse import urlparse

  def load_openapi_spec(url):
      if urlparse(url).scheme in ['http', 'https']:
          swagger = requests.get(url).json()
      else: # treat as file on disk
          with open(url, "rb") as f:
              swagger = json.load(f)

      openapi_spec = {}
      openapi_spec['operations'] = {}
      openapi_spec['parameters'] = {}
      openapi_spec['operation_list'] = []
      openapi_spec['parameter_list'] = []

      for path in swagger['paths']:
          path_regex = regex_from_path(path)
          for method, swagger_method in swagger['paths'][path].items():
              if method == "parameters":
                  # List seems beter than dict since we are exporting to SQL
                  for param in swagger_method:
                      param["path"]=path
                      openapi_spec['parameter_list'].append(param)
                  params={}
                  for param in swagger_method:
                      param_name = param['name']
                      del param['name']
                      params[param_name] = param
                  openapi_spec['parameters'][path]=params
                  continue
              if 'deprecated' in swagger_method.get('description', '').lower():
                  # print('Skipping deprecated endpoint %s %s' % (method, path))
                  continue
              if 'consumes' in swagger_method:
                  # usually : ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf']
                  # or : ['*/*']
                  # sometimes: ['application/json-patch+json', 'application/merge-patch+json',
                  # 'application/strategic-merge-patch+json']
                  pass
              if 'produces' in swagger_method:
                  # usually : ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf']
                  # can additonally include:
                  #   'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch']
                  # is seldom: '*/*'
                  # ['text/plain', 
                  pass
              produces = swagger_method.get('produces', [])
              op_data = {}
              tags = sorted(swagger['paths'][path][method].get('tags', list()))
              if len(tags) > 0:
                  op_data['tags'] = tags
                  tag = tags[0]
                  # just use one tag for category
                  category = tag.split("_")[0]
                  op_data['category'] = category
              else:
                  op_data['category'] = ''
              op_id = swagger_method.get('operationId', '')
              op_data['description'] = swagger_method.get('description', '')
              group_version_kind = swagger_method.get('x-kubernetes-group-version-kind', {})
              op_data['group'] = group_version_kind.get('group', '')
              op_data['version'] = group_version_kind.get('version', '')
              op_data['kind'] = group_version_kind.get('kind', '')
              op_data['path'] = path
              op_data['path_regex'] = path_regex
              op_data['level'] = level_from_path(path)
              op_data['method'] = method
              openapi_spec['operations'][op_id]=op_data
              op_data['id'] = op_id
              openapi_spec['operation_list'].append(op_data)
              # openapi_spec['operations'][op_id] = op_data
      return openapi_spec
#+END_SRC
** load specific file
#+BEGIN_SRC python :eval never
# load_openapi_spec("~/go/src/k8s.io/kubernetes/api/openapi-spec/swagger.json")
#+END_SRC
** actions

#+BEGIN_SRC python :tangle no
  for entry in logfile:
          raw_event = json.loads(entry)
          # map http verb to kubernetes action
          # TODO: request that audit logging record http verb?
          verb_tt = {
                  'get': ['get', 'list', 'proxy'],
                  'patch': ['patch'],
                  'put': ['update'],
                  'post': ['create'],
                  'delete': ['delete', 'deletecollection'],
                  'watch': ['watch', 'watchlist'],
          }
          for method, verbs in verb_tt.items():
                  if raw_event['verb'] in verbs:
                          raw_event['method'] = method
                          break
          if "method" not in raw_event:
                  print("Error parsing event - HTTP method map not defined at \"%s\" for verb \"%s\"" % (raw_event['requestURI'], raw_event['verb']))
#+END_SRC

# json["/api/v1/componentstatuses/{name}"].parameters[0].required = true;

#+NAME: list of required
#+begin_src shell :dir ~/go/src/k8s.io/kubernetes/api/openapi-spec :wrap "SRC json"
  cat ./api/openapi-spec/swagger.json \
      | jq .paths \
      | gron | grep required | gron --ungron \
      | head -100
      #| jq '.[].get.description' -r \
      #| sort -r | uniq | cat
#+END_SRC

#+RESULTS: list of required
#+begin_SRC json
#+end_SRC

#+NAME: list of kubernetes actions
#+begin_src shell :dir ~/go/src/k8s.io/kubernetes/api/openapi-spec :wrap "SRC json"
  cat swagger.json \
  | jq '.paths["/apis/apps/v1/"]'
  # | jq '.paths["/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings/{name}"] | keys'
#+END_SRC

#+RESULTS: list of kubernetes actions
#+begin_SRC json
{
  "get": {
    "consumes": [
      "application/json",
      "application/yaml",
      "application/vnd.kubernetes.protobuf"
    ],
    "description": "get available resources",
    "operationId": "getAppsV1APIResources",
    "produces": [
      "application/json",
      "application/yaml",
      "application/vnd.kubernetes.protobuf"
    ],
    "responses": {
      "200": {
        "description": "OK",
        "schema": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
        }
      },
      "401": {
        "description": "Unauthorized"
      }
    },
    "schemes": [
      "https"
    ],
    "tags": [
      "apps_v1"
    ]
  }
}
#+end_SRC

#+NAME: getAppsV1APIResources
#+begin_src shell :dir ~/go/src/k8s.io/kubernetes/api/openapi-spec :wrap "SRC json"
  cat swagger.json \
  | jq '.paths["/apis/apps/v1/"]'
  # | jq '.paths["/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings/{name}"] | keys'
#+END_SRC

Note that we could use any $ref to see what the response is... ie
When we want to test APIResourceList... here is one that returns it.

#+RESULTS: getAppsV1APIResources
#+begin_SRC json
{
  "get": {
    "consumes": [
      "application/json",
      "application/yaml",
      "application/vnd.kubernetes.protobuf"
    ],
    "description": "get available resources",
    "operationId": "getAppsV1APIResources",
    "produces": [
      "application/json",
      "application/yaml",
      "application/vnd.kubernetes.protobuf"
    ],
    "responses": {
      "200": {
        "description": "OK",
        "schema": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
        }
      },
      "401": {
        "description": "Unauthorized"
      }
    },
    "schemes": [
      "https"
    ],
    "tags": [
      "apps_v1"
    ]
  }
}
#+end_SRC


These map to kubernetes actions, which are NOT one to one with http verbs.
Our audit logs contain the http verbs, we'll need to map them.

This one has 5 keys, what is  the full set.
  

#+NAME: list of
#+begin_src shell :dir ~/go/src/k8s.io/kubernetes/api/openapi-spec :wrap "SRC json"
  cat swagger.json \
   | jq '.paths["/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings/{name}"]'
#+END_SRC

#+RESULTS: list of
#+begin_SRC json
{
  "delete": {
    "consumes": [
      "*/*"
    ],
    "description": "delete a RoleBinding",
    "operationId": "deleteRbacAuthorizationV1NamespacedRoleBinding",
    "parameters": [
      {
        "in": "body",
        "name": "body",
        "schema": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
        }
      },
      {
        "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
        "in": "query",
        "name": "dryRun",
        "type": "string",
        "uniqueItems": true
      },
      {
        "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
        "in": "query",
        "name": "gracePeriodSeconds",
        "type": "integer",
        "uniqueItems": true
      },
      {
        "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
        "in": "query",
        "name": "orphanDependents",
        "type": "boolean",
        "uniqueItems": true
      },
      {
        "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
        "in": "query",
        "name": "propagationPolicy",
        "type": "string",
        "uniqueItems": true
      }
    ],
    "produces": [
      "application/json",
      "application/yaml",
      "application/vnd.kubernetes.protobuf"
    ],
    "responses": {
      "200": {
        "description": "OK",
        "schema": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        }
      },
      "202": {
        "description": "Accepted",
        "schema": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        }
      },
      "401": {
        "description": "Unauthorized"
      }
    },
    "schemes": [
      "https"
    ],
    "tags": [
      "rbacAuthorization_v1"
    ],
    "x-kubernetes-action": "delete",
    "x-kubernetes-group-version-kind": {
      "group": "rbac.authorization.k8s.io",
      "kind": "RoleBinding",
      "version": "v1"
    }
  },
  "get": {
    "consumes": [
      "*/*"
    ],
    "description": "read the specified RoleBinding",
    "operationId": "readRbacAuthorizationV1NamespacedRoleBinding",
    "produces": [
      "application/json",
      "application/yaml",
      "application/vnd.kubernetes.protobuf"
    ],
    "responses": {
      "200": {
        "description": "OK",
        "schema": {
          "$ref": "#/definitions/io.k8s.api.rbac.v1.RoleBinding"
        }
      },
      "401": {
        "description": "Unauthorized"
      }
    },
    "schemes": [
      "https"
    ],
    "tags": [
      "rbacAuthorization_v1"
    ],
    "x-kubernetes-action": "get",
    "x-kubernetes-group-version-kind": {
      "group": "rbac.authorization.k8s.io",
      "kind": "RoleBinding",
      "version": "v1"
    }
  },
  "parameters": [
    {
      "description": "name of the RoleBinding",
      "in": "path",
      "name": "name",
      "required": true,
      "type": "string",
      "uniqueItems": true
    },
    {
      "description": "object name and auth scope, such as for teams and projects",
      "in": "path",
      "name": "namespace",
      "required": true,
      "type": "string",
      "uniqueItems": true
    },
    {
      "description": "If 'true', then the output is pretty printed.",
      "in": "query",
      "name": "pretty",
      "type": "string",
      "uniqueItems": true
    }
  ],
  "patch": {
    "consumes": [
      "application/json-patch+json",
      "application/merge-patch+json",
      "application/strategic-merge-patch+json"
    ],
    "description": "partially update the specified RoleBinding",
    "operationId": "patchRbacAuthorizationV1NamespacedRoleBinding",
    "parameters": [
      {
        "in": "body",
        "name": "body",
        "required": true,
        "schema": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
        }
      },
      {
        "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
        "in": "query",
        "name": "dryRun",
        "type": "string",
        "uniqueItems": true
      },
      {
        "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).",
        "in": "query",
        "name": "fieldManager",
        "type": "string",
        "uniqueItems": true
      },
      {
        "description": "Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.",
        "in": "query",
        "name": "force",
        "type": "boolean",
        "uniqueItems": true
      }
    ],
    "produces": [
      "application/json",
      "application/yaml",
      "application/vnd.kubernetes.protobuf"
    ],
    "responses": {
      "200": {
        "description": "OK",
        "schema": {
          "$ref": "#/definitions/io.k8s.api.rbac.v1.RoleBinding"
        }
      },
      "401": {
        "description": "Unauthorized"
      }
    },
    "schemes": [
      "https"
    ],
    "tags": [
      "rbacAuthorization_v1"
    ],
    "x-kubernetes-action": "patch",
    "x-kubernetes-group-version-kind": {
      "group": "rbac.authorization.k8s.io",
      "kind": "RoleBinding",
      "version": "v1"
    }
  },
  "put": {
    "consumes": [
      "*/*"
    ],
    "description": "replace the specified RoleBinding",
    "operationId": "replaceRbacAuthorizationV1NamespacedRoleBinding",
    "parameters": [
      {
        "in": "body",
        "name": "body",
        "required": true,
        "schema": {
          "$ref": "#/definitions/io.k8s.api.rbac.v1.RoleBinding"
        }
      },
      {
        "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
        "in": "query",
        "name": "dryRun",
        "type": "string",
        "uniqueItems": true
      },
      {
        "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
        "in": "query",
        "name": "fieldManager",
        "type": "string",
        "uniqueItems": true
      }
    ],
    "produces": [
      "application/json",
      "application/yaml",
      "application/vnd.kubernetes.protobuf"
    ],
    "responses": {
      "200": {
        "description": "OK",
        "schema": {
          "$ref": "#/definitions/io.k8s.api.rbac.v1.RoleBinding"
        }
      },
      "201": {
        "description": "Created",
        "schema": {
          "$ref": "#/definitions/io.k8s.api.rbac.v1.RoleBinding"
        }
      },
      "401": {
        "description": "Unauthorized"
      }
    },
    "schemes": [
      "https"
    ],
    "tags": [
      "rbacAuthorization_v1"
    ],
    "x-kubernetes-action": "put",
    "x-kubernetes-group-version-kind": {
      "group": "rbac.authorization.k8s.io",
      "kind": "RoleBinding",
      "version": "v1"
    }
  }
}
#+end_SRC


#+begin_src tmate
  cd ~/go/src/k8s.io/kubernetes/api/openapi-spec
  
  cat swagger.json |jq '.paths["/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings/{name}"]'
#+END_SRC

#+RESULTS:
#+begin_SRC json
null
#+end_SRC

** groning

#+BEGIN_SRC shell :dir .. :wrap "SRC json"
  cat swagger.json | jq '.definitions' | gron
#+END_SRC

#+RESULTS:

* Definitions
** Keys
#+BEGIN_SRC shell :dir .. :wrap "SRC json"
  cat swagger.json | jq '.definitions' | jq -r 'keys[]' \
  | sort -R | head -20
  # | grep -vi alpha\\\|beta \
#+END_SRC

#+RESULTS:
#+begin_SRC json
io.k8s.api.apps.v1.ReplicaSetStatus
io.k8s.api.core.v1.GlusterfsVolumeSource
io.k8s.api.core.v1.ServiceAccountList
io.k8s.api.auditregistration.v1alpha1.WebhookThrottleConfig
io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerSpec
io.k8s.api.rbac.v1beta1.RoleList
io.k8s.api.core.v1.ReplicationController
io.k8s.api.apps.v1beta1.RollbackConfig
io.k8s.api.rbac.v1alpha1.ClusterRole
io.k8s.api.core.v1.SecretProjection
io.k8s.api.networking.v1.NetworkPolicyPeer
io.k8s.api.storage.v1beta1.CSIDriverSpec
io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaProps
io.k8s.api.core.v1.Lifecycle
io.k8s.api.apps.v1.DeploymentStatus
io.k8s.api.apps.v1beta1.ControllerRevision
io.k8s.api.core.v1.DownwardAPIVolumeSource
io.k8s.api.authentication.v1beta1.TokenReview
io.k8s.api.networking.v1beta1.Ingress
io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionCondition
#+end_SRC

* Metadata
** Info title: Kubernetes, version: v1.16.0
  
#+BEGIN_SRC shell :dir ~/go/src/k8s.io/kubernetes/api/openapi-spec :wrap "SRC json"
   cat swagger.json | jq '.info'
 #+END_SRC

 #+RESULTS:
 #+begin_SRC json
 {
   "title": "Kubernetes",
   "version": "v1.16.0"
 }
 #+end_SRC
** Swagger: 2.0

#+BEGIN_SRC shell :dir ~/go/src/k8s.io/kubernetes/api/openapi-spec :wrap "SRC json"
   cat swagger.json | jq '.swagger'
 #+END_SRC

 #+RESULTS:
 #+begin_SRC json
 "2.0"
 #+end_SRC
** Security BearerToken: []
  
#+BEGIN_SRC shell :dir ~/go/src/k8s.io/kubernetes/api/openapi-spec :wrap "SRC json"
   cat swagger.json | jq '.security'
 #+END_SRC

 #+RESULTS:
 #+begin_SRC json
 [
   {
     "BearerToken": []
   }
 ]
 #+end_SRC
** securityDefinitions: BearerToken

#+BEGIN_SRC shell :dir ~/go/src/k8s.io/kubernetes/api/openapi-spec :wrap "SRC json"
  cat swagger.json | jq '.securityDefinitions'
#+END_SRC

 #+RESULTS:
 #+begin_SRC json
 {
   "BearerToken": {
     "description": "Bearer Token authentication",
     "in": "header",
     "name": "authorization",
     "type": "apiKey"
   }
 }
 #+end_SRC

# Local Variables:
# eval: (add-hook 'after-save-hook (lambda () (org-babel-tangle-file buffer-file-name)))
# End:
