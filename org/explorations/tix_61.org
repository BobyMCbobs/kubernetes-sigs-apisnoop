#+TITLE: Ticket 61 Exploration
#+AUTHOR: Zach Mandeville


* The Ticket
[[https://gitlab.ii.coop/apisnoop/apisnoop_v3/issues/61][Gitlab Link]]

#+BEGIN_QUOTE
operationID is not built into kubernetes, it is a generated string made for swagger.json.  It is not a part of our audit events, and so we have to do some heavy regex matching to match an event to its definition.  It's also not a part of the community, really, in that the majority of people we talk to are not looking at kubernetes from the perspective of opID.
You can match an event to a swagger definition using a combination of object_ref and request_object.  We will rebuild our podspec field coverage using these.
From this refactoring, a hope is that it offers another perspective into the array types, and why they are not counting as event hits.
#+END_QUOTE
* Process
** TODO Confirm mapping event to swagger def using object_ref and request_object
   Let's grab the data for a sample audit event that has a request object (make sure you have line navigation turned on =SPC tL=)
  #+NAME: data for event with request_object
  #+BEGIN_SRC sql-mode
    SELECT
      operation_id,
      jsonb_pretty(data -> 'objectRef') as object_ref,
      jsonb_pretty(data->'requestObject') as request_object
      FROM
          audit_event
     WHERE request_object IS NOT NULL
       AND useragent ilike 'e2e.test%'
       AND (data -> 'requestObject' ->> 'kind') = 'Pod'
     LIMIT 1;
  #+END_SRC

  #+RESULTS: data for event with request_object
  #+begin_src sql-mode
         operation_id        |                         object_ref                          |                                request_object                                 
  ---------------------------+-------------------------------------------------------------+-------------------------------------------------------------------------------
   createCoreV1NamespacedPod | {                                                          +| {                                                                            +
                             |     "name": "pod-subpath-test-local-preprovisionedpv-pr48",+|     "kind": "Pod",                                                           +
                             |     "resource": "pods",                                    +|     "spec": {                                                                +
                             |     "namespace": "provisioning-5874",                      +|         "volumes": [                                                         +
                             |     "apiVersion": "v1"                                     +|             {                                                                +
                             | }                                                           |                 "name": "test-volume",                                       +
                             |                                                             |                 "persistentVolumeClaim": {                                   +
                             |                                                             |                     "readOnly": true,                                        +
                             |                                                             |                     "claimName": "pvc-68xfp"                                 +
                             |                                                             |                 }                                                            +
                             |                                                             |             },                                                               +
                             |                                                             |             {                                                                +
                             |                                                             |                 "name": "liveness-probe-volume",                             +
                             |                                                             |                 "emptyDir": {                                                +
                             |                                                             |                 }                                                            +
                             |                                                             |             }                                                                +
                             |                                                             |         ],                                                                   +
                             |                                                             |         "nodeName": "bootstrap-e2e-minion-group-t7h8",                       +
                             |                                                             |         "dnsPolicy": "ClusterFirst",                                         +
                             |                                                             |         "containers": [                                                      +
                             |                                                             |             {                                                                +
                             |                                                             |                 "args": [                                                    +
                             |                                                             |                     "--file_content_in_loop=/test-volume/test-file",         +
                             |                                                             |                     "--retry_time=20"                                        +
                             |                                                             |                 ],                                                           +
                             |                                                             |                 "name": "test-container-subpath-local-preprovisionedpv-pr48",+
                             |                                                             |                 "image": "gcr.io/kubernetes-e2e-test-images/mounttest:1.0",  +
                             |                                                             |                 "resources": {                                               +
                             |                                                             |                 },                                                           +
                             |                                                             |                 "volumeMounts": [                                            +
                             |                                                             |                     {                                                        +
                             |                                                             |                         "name": "test-volume",                               +
                             |                                                             |                         "subPath": "provisioning-5874",                      +
                             |                                                             |                         "mountPath": "/test-volume"                          +
                             |                                                             |                     },                                                       +
                             |                                                             |                     {                                                        +
                             |                                                             |                         "name": "liveness-probe-volume",                     +
                             |                                                             |                         "mountPath": "/probe-volume"                         +
                             |                                                             |                     }                                                        +
                             |                                                             |                 ],                                                           +
                             |                                                             |                 "imagePullPolicy": "IfNotPresent",                           +
                             |                                                             |                 "securityContext": {                                         +
                             |                                                             |                     "procMount": "Default",                                  +
                             |                                                             |                     "privileged": true                                       +
                             |                                                             |                 },                                                           +
                             |                                                             |                 "terminationMessagePath": "/dev/termination-log",            +
                             |                                                             |                 "terminationMessagePolicy": "File"                           +
                             |                                                             |             }                                                                +
                             |                                                             |         ],                                                                   +
                             |                                                             |         "restartPolicy": "Never",                                            +
                             |                                                             |         "schedulerName": "default-scheduler",                                +
                             |                                                             |         "securityContext": {                                                 +
                             |                                                             |             "seLinuxOptions": {                                              +
                             |                                                             |                 "level": "s0:c0,c1"                                          +
                             |                                                             |             }                                                                +
                             |                                                             |         },                                                                   +
                             |                                                             |         "enableServiceLinks": true,                                          +
                             |                                                             |         "terminationGracePeriodSeconds": 1                                   +
                             |                                                             |     },                                                                       +
                             |                                                             |     "status": {                                                              +
                             |                                                             |     },                                                                       +
                             |                                                             |     "metadata": {                                                            +
                             |                                                             |         "name": "pod-subpath-test-local-preprovisionedpv-pr48",              +
                             |                                                             |         "namespace": "provisioning-5874",                                    +
                             |                                                             |         "creationTimestamp": null                                            +
                             |                                                             |     },                                                                       +
                             |                                                             |     "apiVersion": "v1"                                                       +
                             |                                                             | }
  (1 row)

  #+end_src
  
  Here we have a set operationID for this event, which we can use to find the entry in our swagger.json. To do so is complicated as we need to follow the path, then the verb, then find the right operation_id.   I did this by going onto the raw swagger and just ctrl+f for the operationID.  This showed that for =createCoreV1NamespacedPod= it's definition was at: =#/definitions/io.k8s.api.core.v1.Pod=

 What we want is to go straight to the definition.  And this structure of the def seems to be consistent with the version and kind, but not sure how core was applied. Let's stretch out to view object_refs for more events that aren't in pod.
 
 #+NAME: audit events beyond podSPec
  #+BEGIN_SRC sql-mode
   SELECT
     DISTINCT operation_id,
     jsonb_pretty(data -> 'objectRef') as object_ref
     FROM
         audit_event
    WHERE request_object IS NOT NULL
      AND useragent ilike 'e2e.test%'
      AND (data -> 'objectRef' ->> 'apiVersion') = 'v1'
    LIMIT 10;
  #+END_SRC

  #+RESULTS: audit event with filled in group
  #+begin_src sql-mode
            operation_id           |              object_ref               
  ---------------------------------+---------------------------------------
   createAppsV1NamespacedDaemonSet | {                                    +
                                   |     "name": "csi-hostpathplugin",    +
                                   |     "apiGroup": "apps",              +
                                   |     "resource": "daemonsets",        +
                                   |     "namespace": "provisioning-2251",+
                                   |     "apiVersion": "v1"               +
                                   | }
   createAppsV1NamespacedDaemonSet | {                                    +
                                   |     "name": "csi-hostpathplugin",    +
                                   |     "apiGroup": "apps",              +
                                   |     "resource": "daemonsets",        +
                                   |     "namespace": "provisioning-3598",+
                                   |     "apiVersion": "v1"               +
                                   | }
   createAppsV1NamespacedDaemonSet | {                                    +
                                   |     "name": "csi-hostpathplugin",    +
                                   |     "apiGroup": "apps",              +
                                   |     "resource": "daemonsets",        +
                                   |     "namespace": "provisioning-3867",+
                                   |     "apiVersion": "v1"               +
                                   | }
   createAppsV1NamespacedDaemonSet | {                                    +
                                   |     "name": "csi-hostpathplugin",    +
                                   |     "apiGroup": "apps",              +
                                   |     "resource": "daemonsets",        +
                                   |     "namespace": "provisioning-4285",+
                                   |     "apiVersion": "v1"               +
                                   | }
   createAppsV1NamespacedDaemonSet | {                                    +
                                   |     "name": "csi-hostpathplugin",    +
                                   |     "apiGroup": "apps",              +
                                   |     "resource": "daemonsets",        +
                                   |     "namespace": "provisioning-461", +
                                   |     "apiVersion": "v1"               +
                                   | }
   createAppsV1NamespacedDaemonSet | {                                    +
                                   |     "name": "csi-hostpathplugin",    +
                                   |     "apiGroup": "apps",              +
                                   |     "resource": "daemonsets",        +
                                   |     "namespace": "provisioning-465", +
                                   |     "apiVersion": "v1"               +
                                   | }
   createAppsV1NamespacedDaemonSet | {                                    +
                                   |     "name": "csi-hostpathplugin",    +
                                   |     "apiGroup": "apps",              +
                                   |     "resource": "daemonsets",        +
                                   |     "namespace": "provisioning-5821",+
                                   |     "apiVersion": "v1"               +
                                   | }
   createAppsV1NamespacedDaemonSet | {                                    +
                                   |     "name": "csi-hostpathplugin",    +
                                   |     "apiGroup": "apps",              +
                                   |     "resource": "daemonsets",        +
                                   |     "namespace": "provisioning-611", +
                                   |     "apiVersion": "v1"               +
                                   | }
   createAppsV1NamespacedDaemonSet | {                                    +
                                   |     "name": "csi-hostpathplugin",    +
                                   |     "apiGroup": "apps",              +
                                   |     "resource": "daemonsets",        +
                                   |     "namespace": "provisioning-62",  +
                                   |     "apiVersion": "v1"               +
                                   | }
   createAppsV1NamespacedDaemonSet | {                                    +
                                   |     "name": "csi-hostpathplugin",    +
                                   |     "apiGroup": "apps",              +
                                   |     "resource": "daemonsets",        +
                                   |     "namespace": "provisioning-6539",+
                                   |     "apiVersion": "v1"               +
                                   | }
  (10 rows)

  #+end_src

 You can see that some of these have an 'objectRef -> apiGroup' that wasn't in the first sample we did.  What are the distinct apiGroups?
 #+NAME: distinct apiGroup
  #+BEGIN_SRC sql-mode
   SELECT
     DISTINCT (data -> 'objectRef' ->> 'apiGroup') as api_group,
     (data -> 'objectRef' ->> 'apiVersion') as api_version
     FROM
         audit_event
    WHERE request_object IS NOT NULL
      AND useragent ilike 'e2e.test%';
  #+END_SRC

  #+RESULTS: distinct apiGroup
  #+begin_src sql-mode
            api_group           | api_version 
  ------------------------------+-------------
   admissionregistration.k8s.io | v1beta1
   apiextensions.k8s.io         | v1beta1
   apiregistration.k8s.io       | v1beta1
   apps                         | v1
   authorization.k8s.io         | v1beta1
   autoscaling                  | v1
   batch                        | v1
   batch                        | v1beta1
   certificates.k8s.io          | v1beta1
   extensions                   | v1beta1
   node.k8s.io                  | v1beta1
   policy                       | v1beta1
   rbac.authorization.k8s.io    | v1
   rbac.authorization.k8s.io    | v1beta1
   scheduling.k8s.io            | v1
   storage.k8s.io               | v1
                                | v1
  (17 rows)

  #+end_src
 
  I would bet core is when the apiGroup is null, which would make sense.  It's part of core kubernetes, not a specific group.  In the [[https://kubernetes.io/docs/reference/using-api/api-overview/#api-groups][k8s API Docs]], core is described separately from the 'named groups'.  So in other words, it is not a named group and so its api_group value has no name.
  
*** Exploring v1 Core events
    
    #+NAME: Core Events
    #+BEGIN_SRC sql-mode
      SELECT
        distinct operation_id
        FROM
            audit_event
       WHERE
         request_object IS NOT NULL
         AND useragent ilike 'e2e.test%'
         AND (data->'objectRef'->>'apiGroup') IS NULL
         AND (data -> 'objectRef' ->> 'apiVersion') = 'v1';
    #+END_SRC

    #+RESULTS: Core Events
    #+begin_src sql-mode
                     operation_id                 
    ----------------------------------------------
     createCoreV1Namespace
     createCoreV1NamespacedEndpoints
     createCoreV1NamespacedLimitRange
     createCoreV1NamespacedPersistentVolumeClaim
     createCoreV1NamespacedPod
     createCoreV1NamespacedPodTemplate
     createCoreV1NamespacedReplicationController
     createCoreV1NamespacedResourceQuota
     createCoreV1NamespacedService
     createCoreV1NamespacedServiceAccount
     createCoreV1PersistentVolume
     deleteCoreV1NamespacedLimitRange
     deleteCoreV1NamespacedPersistentVolumeClaim
     deleteCoreV1NamespacedPod
     deleteCoreV1NamespacedReplicationController
     deleteCoreV1NamespacedService
     deleteCoreV1NamespacedServiceAccount
     deleteCoreV1PersistentVolume
     patchCoreV1NamespacedPod
     patchCoreV1NamespacedPodStatus
     patchCoreV1Node
     replaceCoreV1Namespace
     replaceCoreV1NamespacedLimitRange
     replaceCoreV1NamespacedPersistentVolumeClaim
     replaceCoreV1NamespacedPod
     replaceCoreV1NamespacedReplicationController
     replaceCoreV1NamespacedResourceQuota
     replaceCoreV1NamespacedService
     replaceCoreV1NamespacedServiceAccount
     replaceCoreV1Node
     replaceCoreV1NodeStatus
    (31 rows)

    #+end_src

    We can check out a couple of these in the swagger and grab their referenced definition.
    
     - createCoreV1Namespace :: #/definitions/io.k8s.api.core.v1.Namespace 
     - createCoreV1NamespacedEndpoints :: #/definitions/io.k8s.api.core.v1.Endpoints
     - createCoreV1PersistentVolume :: #/definitions/io.k8s.api.core.v1.PersistentVolume
     - deleteCoreV1NamespacedReplicationController :: #/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions 
     - patchCoreV1Node :: #/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch
     - replaceCoreV1NamespacedResourceQuota ::  #/definitions/io.k8s.api.core.v1.ResourceQuota

   so io.k8s is consistent, and then there'v variation between k8s.api.core, k8s.apimachinery, and k8s.api.meta
   What does the objectRef look like?
   
   #+NAME: Object Ref for events with selected operation_id's
   #+BEGIN_SRC sql-mode
     SELECT DISTINCT ON(operation_id)
       jsonb_pretty(data -> 'objectRef') as object_ref,
       operation_id,
       data -> 'requestObject' ->> 'kind'
       FROM
           audit_event
      WHERE request_object IS NOT NULL
        AND useragent ilike 'e2e.test%'
        AND (data->'objectRef'->>'apiGroup') IS NULL
        AND (data -> 'objectRef' ->> 'apiVersion') = 'v1'
        AND operation_id = ANY('{
                               createCoreV1Namespace,
                               createCoreV1PersistentVolume,
                               deleteCoreV1NamespacedReplicationController,
                               patchCoreV1Node,
                               replaceCoreV1NamespacedResourceQuota}') ;
   #+END_SRC

   #+RESULTS: Object Ref for events with selected operation_id's
   #+begin_src sql-mode
   apisnoop'# apisnoop'# apisnoop'# apisnoop'# apisnoop'#                           object_ref                           |                operation_id                 |     ?column?     
   ---------------------------------------------------------------+---------------------------------------------+------------------
    {                                                            +| createCoreV1Namespace                       | Namespace
        "name": "pv-271",                                        +|                                             | 
        "resource": "namespaces",                                +|                                             | 
        "apiVersion": "v1"                                       +|                                             | 
    }                                                             |                                             | 
    {                                                            +| createCoreV1PersistentVolume                | PersistentVolume
        "resource": "persistentvolumes",                         +|                                             | 
        "apiVersion": "v1"                                       +|                                             | 
    }                                                             |                                             | 
    {                                                            +| deleteCoreV1NamespacedReplicationController | DeleteOptions
        "name": "cleanup40-0855a67a-cb10-4fdf-8695-e0195a983395",+|                                             | 
        "resource": "replicationcontrollers",                    +|                                             | 
        "namespace": "kubelet-8090",                             +|                                             | 
        "apiVersion": "v1"                                       +|                                             | 
    }                                                             |                                             | 
    {                                                            +| patchCoreV1Node                             | 
        "name": "bootstrap-e2e-minion-group-t7h8",               +|                                             | 
        "resource": "nodes",                                     +|                                             | 
        "apiVersion": "v1"                                       +|                                             | 
    }                                                             |                                             | 
    {                                                            +| replaceCoreV1NamespacedResourceQuota        | ResourceQuota
        "uid": "61032454-1269-4581-aeaf-05504781c86b",           +|                                             | 
        "name": "quota-for-e2e-test-resourcequota-6488-crds",    +|                                             | 
        "resource": "resourcequotas",                            +|                                             | 
        "namespace": "resourcequota-193",                        +|                                             | 
        "apiVersion": "v1",                                      +|                                             | 
        "resourceVersion": "7708"                                +|                                             | 
    }                                                             |                                             | 
   (5 rows)

   #+end_src

   So I do not think constructing the right definition from this is smart, as it's too finicky on how the exact def is structured, and we are back in the regex biz.
   I am remembering this now from conversation on Friday, that we can perhaps refererece the x-kubernetes sections in the definitions and match direct to that instead.

        
*** Thoghtful Pause
    It feels a rocky path to construct the definition, instead we can match to the definition using x-kubernetes-kind.  there isn't a super simple way to do it and check it, outside of constructing the definitions themselves and then comparing it to the schema ref's in the swagger.json
*** Construct View for Swagger Definitions
    We want to take our swagger row and parse out each definition, plus its x-kubernetes-action
    #+NAME: New View: Swagger Definitions
    #+BEGIN_SRC sql-mode
     CREATE OR REPLACE VIEW "public"."swagger_definition" AS
      SELECT
        def.key as definition,
          def.value as value,
        swagger.id as swagger_id
        FROM api_swagger as swagger,
             jsonb_each((swagger.data ->'definitions')) def(key, value);
    #+END_SRC

    #+RESULTS: New View: Swagger Definitions
    #+begin_src sql-mode
    CREATE VIEW
    #+end_src
    
    I want to confirm that these definitions map to a single x-kubernetes-action
    #+NAME: Distinct Definitions and Distinct x-kubernetes actions
    #+BEGIN_SRC sql-mode
      SELECT
        count(DISTINCT definition) as total_definitions,
        count(DISTINCT definition) FILTER(WHERE (value ->'x-kubernetes-group-version-kind') IS NULL) as unkinds,
        count(DISTINCT definition) FILTER(WHERE (value ->'x-kubernetes-group-version-kind') IS NOT NULL) as kinds,
        count(distinct (value->'x-kubernetes-group-version-kind')) as actions
          FROM swagger_definition;
    #+END_SRC

    #+RESULTS: Distinct Definitions and Distinct x-kubernetes actions
    #+begin_src sql-mode
     total_definitions | unkinds | kinds | actions 
    -------------------+---------+-------+---------
                   662 |     468 |   194 |     194
    (1 row)

    #+end_src
    
    When a definition has 'x-kubernetes-group-version-kind' it is unique.  What are the ones without?
    
   #+NAME: Sample of definitions without group-version-kind 
    #+BEGIN_SRC sql-mode
     SELECT
     definition
       FROM swagger_definition
      WHERE (value->'x-kubernetes-group-version-kind') IS NULL
      LIMIT 50;

    #+END_SRC

    #+RESULTS: Sample of definitions without group-version-kind
    #+begin_src sql-mode
                definition            
    ----------------------------------
     io.k8s.api.core.v1.PodIP
     io.k8s.api.core.v1.Probe
     io.k8s.api.core.v1.Taint
     io.k8s.api.core.v1.EnvVar
     io.k8s.api.core.v1.Sysctl
     io.k8s.api.core.v1.Volume
     io.k8s.api.core.v1.Handler
     io.k8s.api.core.v1.PodSpec
     io.k8s.api.rbac.v1.RoleRef
     io.k8s.api.rbac.v1.Subject
     io.k8s.api.batch.v1.JobSpec
     io.k8s.api.core.v1.Affinity
     io.k8s.api.core.v1.NodeSpec
     io.k8s.api.core.v1.Container
     io.k8s.api.core.v1.HostAlias
     io.k8s.api.core.v1.KeyToPath
     io.k8s.api.core.v1.Lifecycle
     io.k8s.api.core.v1.PodStatus
     io.k8s.api.batch.v1.JobStatus
     io.k8s.api.core.v1.ExecAction
     io.k8s.api.core.v1.HTTPHeader
     io.k8s.api.core.v1.NodeStatus
     io.k8s.api.core.v1.Toleration
     io.k8s.api.rbac.v1.PolicyRule
     io.k8s.api.core.v1.EventSeries
     io.k8s.api.core.v1.EventSource
     io.k8s.api.core.v1.NodeAddress
     io.k8s.api.core.v1.PodAffinity
     io.k8s.api.core.v1.ServicePort
     io.k8s.api.core.v1.ServiceSpec
     io.k8s.api.core.v1.VolumeMount
     io.k8s.api.core.v1.Capabilities
     io.k8s.api.core.v1.EndpointPort
     io.k8s.api.core.v1.EnvVarSource
     io.k8s.api.core.v1.NodeAffinity
     io.k8s.api.core.v1.NodeSelector
     io.k8s.api.core.v1.PodCondition
     io.k8s.api.core.v1.PodDNSConfig
     io.k8s.api.core.v1.VolumeDevice
     io.k8s.api.rbac.v1beta1.RoleRef
     io.k8s.api.rbac.v1beta1.Subject
     io.k8s.api.apps.v1.DaemonSetSpec
     io.k8s.api.batch.v1.JobCondition
     io.k8s.api.core.v1.ContainerPort
     io.k8s.api.core.v1.EnvFromSource
     io.k8s.api.core.v1.HTTPGetAction
     io.k8s.api.core.v1.NamespaceSpec
     io.k8s.api.core.v1.NodeCondition
     io.k8s.api.core.v1.ScopeSelector
     io.k8s.api.core.v1.ServiceStatus
    (50 rows)

    #+end_src
    
    From this sampling, and comparing it to the swagger, it looks like these don't directly connect to an opID, meaning the path's param->body-in->body->$ref won't point to these definitions.  they are used in reference to other definitions, but that's it. 

    We can do a semi-sanity check by counting the number of distinct param_schemas in our api_operation_param view, since this would hold the reference to an event's definition.  I would expect it to be at or below 194.  Higher than that means we have operations whose parameters point to a definition without a group-version-kind.
    #+NAME: distinct operation_params
    #+BEGIN_SRC sql-mode
      SELECT 
      count( distinct param_schema )
      FROM api_operation_parameter
      WHERE NOT (param_schema = ANY('{integer, string, boolean}'));
    #+END_SRC

    #+RESULTS: distinct operation_params
    #+begin_src sql-mode
     count 
    -------
       104
    (1 row)

    #+end_src
    
    That looks reasonable.  

*** Conclusion  
    I think we could reference the definition simply using the objectRef and requestObject in the audit_event, at least enough to explore our field coverage again.

** TODO Rebuild initial Podspec query to not use operation_id
   Here we have our original. 
*** Original PodSpec Materialized View
 #+NAME: view podspec_field_coverage_material
 #+BEGIN_SRC sql-mode
   CREATE MATERIALIZED VIEW "public"."podspec_field_coverage_material" AS 
   SELECT DISTINCT
     audit_event.operation_id,
     jsonb_object_keys(audit_event.request_object -> 'spec'::text) AS podspec_field,
     count(event_field.event_field) AS hits,
     split_part(audit_event.useragent, '--', 2) as test,
     split_part(audit_event.useragent, '--', 1) as useragent
     FROM audit_event,
          LATERAL
            jsonb_object_keys(audit_event.request_object -> 'spec'::text)
            event_field(event_field)
    WHERE (audit_event.request_object ->> 'kind'::text) = 'Pod'::text
      AND audit_event.operation_id !~~ '%alpha%'::text
      AND audit_event.operation_id !~~ '%beta%'::text
    GROUP BY operation_id, podspec_field, useragent
   UNION
   SELECT DISTINCT
     audit_event.operation_id,
     jsonb_object_keys(audit_event.request_object -> 'template' -> 'spec'::text) AS podspec_field,
     count(event_field.event_field) AS hits,
     split_part(audit_event.useragent, '--', 2) as test,
     split_part(audit_event.useragent, '--', 1) as useragent
     FROM audit_event,
          LATERAL
            jsonb_object_keys(audit_event.request_object -> 'template' -> 'spec'::text)
            event_field(event_field)
    WHERE (audit_event.request_object ->> 'kind'::text) = 'PodTemplate'::text
      AND audit_event.operation_id !~~ '%alpha%'::text
      AND audit_event.operation_id !~~ '%beta%'::text
    GROUP BY operation_id, podspec_field, useragent
   UNION
   SELECT DISTINCT
     audit_event.operation_id,
     jsonb_object_keys(audit_event.request_object -> 'spec' -> 'template' -> 'spec'::text) AS podspec_field,
     count(event_field.event_field) AS hits,
     split_part(audit_event.useragent, '--', 2) as test,
     split_part(audit_event.useragent, '--', 1) as useragent
     FROM audit_event,
          LATERAL
            jsonb_object_keys(audit_event.request_object -> 'spec' -> 'template' -> 'spec'::text)
            event_field(event_field)
    WHERE (audit_event.request_object->>'kind' = 'DaemonSet'
      OR  audit_event.request_object->>'kind' = 'Deployment'
      OR  audit_event.request_object->>'kind' = 'ReplicationController'
      OR  audit_event.request_object->>'kind' = 'StatefulSet'
      OR  audit_event.request_object->>'kind' = 'Job'
      OR  audit_event.request_object->>'kind' = 'ReplicaSet')
      AND audit_event.operation_id !~~ '%alpha%'::text
      AND audit_event.operation_id !~~ '%beta%'::text
    GROUP BY operation_id, podspec_field, useragent;
 #+END_SRC
*** Revised Podspec Materialized View
    We are using operation_id in two areas, as a column to select and as a part of our WHERE clause.  
    I don't think we use the column in any of the cascading views. and could likely just remove it.
    #+BEGIN_SRC sql-mode
drop materialized view "public"."revised_podspec_field_coverage_material" cascade;
    #+END_SRC

    #+RESULTS:
    #+begin_src sql-mode
    DROP MATERIALIZED VIEW
    #+end_src


 #+NAME: view revised_podspec_field_coverage_material
 #+BEGIN_SRC sql-mode
   CREATE MATERIALIZED VIEW "public"."revised_podspec_field_coverage_material" AS 
   SELECT DISTINCT
     (audit_event.data -> 'objectRef' ->> 'apiVersion') as version,
     (audit_event.data->'objectRef'->>'apiGroup') as api_group,
     (audit_event.data->'requestObject'->>'kind') as kind,
     jsonb_object_keys(audit_event.request_object -> 'spec'::text) AS podspec_field,
     count(event_field.event_field) AS hits,
     split_part(audit_event.useragent, '--', 2) as test,
     split_part(audit_event.useragent, '--', 1) as useragent
     FROM audit_event,
          LATERAL
            jsonb_object_keys(audit_event.request_object -> 'spec'::text)
            event_field(event_field)
    WHERE (audit_event.request_object ->> 'kind'::text) = 'Pod'::text
      AND audit_event.operation_id !~~ '%alpha%'::text
      AND audit_event.operation_id !~~ '%beta%'::text
    GROUP BY version, api_group, kind, podspec_field, useragent
   UNION
   SELECT DISTINCT
     (audit_event.data -> 'objectRef' ->> 'apiVersion') as version,
     (audit_event.data->'objectRef'->>'apiGroup') as api_group,
     (audit_event.data->'requestObject'->>'kind') as kind,
     jsonb_object_keys(audit_event.request_object -> 'template' -> 'spec'::text) AS podspec_field,
     count(event_field.event_field) AS hits,
     split_part(audit_event.useragent, '--', 2) as test,
     split_part(audit_event.useragent, '--', 1) as useragent
     FROM audit_event,
          LATERAL
            jsonb_object_keys(audit_event.request_object -> 'template' -> 'spec'::text)
            event_field(event_field)
    WHERE (audit_event.request_object ->> 'kind'::text) = 'PodTemplate'::text
      AND audit_event.operation_id !~~ '%alpha%'::text
      AND audit_event.operation_id !~~ '%beta%'::text
    GROUP BY version, api_group, kind, podspec_field, useragent
   UNION
   SELECT DISTINCT
     (audit_event.data -> 'objectRef' ->> 'apiVersion') as version,
     (audit_event.data->'objectRef'->>'apiGroup') as api_group,
     (audit_event.data->'requestObject'->>'kind') as kind,
     jsonb_object_keys(audit_event.request_object -> 'spec' -> 'template' -> 'spec'::text) AS podspec_field,
     count(event_field.event_field) AS hits,
     split_part(audit_event.useragent, '--', 2) as test,
     split_part(audit_event.useragent, '--', 1) as useragent
     FROM audit_event,
          LATERAL
            jsonb_object_keys(audit_event.request_object -> 'spec' -> 'template' -> 'spec'::text)
            event_field(event_field)
    WHERE (audit_event.request_object->>'kind' = 'DaemonSet'
      OR  audit_event.request_object->>'kind' = 'Deployment'
      OR  audit_event.request_object->>'kind' = 'ReplicationController'
      OR  audit_event.request_object->>'kind' = 'StatefulSet'
      OR  audit_event.request_object->>'kind' = 'Job'
      OR  audit_event.request_object->>'kind' = 'ReplicaSet')
      AND audit_event.operation_id !~~ '%alpha%'::text
      AND audit_event.operation_id !~~ '%beta%'::text
    GROUP BY version, api_group, kind, podspec_field, useragent;
 #+END_SRC

 #+RESULTS: view revised_podspec_field_coverage_material
 #+begin_src sql-mode
 SELECT 6362
 #+end_src


 #+BEGIN_SRC sql-mode
   select
     (a.data -> 'objectRef' ->> 'apiVersion') as version,
     (a.data->'objectRef'->>'apiGroup') as api_group,
     (a.data->'requestObject'->>'kind') as kind 
     from audit_event as a;
 #+END_SRC

 #+RESULTS:
 #+begin_src sql-mode
  version  |                      api_group                      |              kind              
 ----------+-----------------------------------------------------+--------------------------------
  v1       | apiregistration.k8s.io                              | APIService
  v1       | apiregistration.k8s.io                              | DeleteOptions
  v1       | apiregistration.k8s.io                              | 
  v1       | apps                                                | ControllerRevision
  v1       | apps                                                | DaemonSet
  v1       | apps                                                | DeleteOptions
  v1       | apps                                                | Deployment
  v1       | apps                                                | ReplicaSet
  v1       | apps                                                | StatefulSet
  v1       | apps                                                | 
  v1       | authentication.k8s.io                               | 
  v1       | authorization.k8s.io                                | 
  v1       | autoscaling                                         | DeleteOptions
  v1       | autoscaling                                         | HorizontalPodAutoscaler
  v1       | autoscaling                                         | 
  v1       | batch                                               | DeleteOptions
  v1       | batch                                               | Job
  v1       | batch                                               | 
  v1       | coordination.k8s.io                                 | DeleteOptions
  v1       | coordination.k8s.io                                 | 
  v1       | crd-publish-openapi-test-empty.k8s.io               | 
  v1       | crd-publish-openapi-test-foo.k8s.io                 | 
  v1       | discovery-crd-test.k8s.io                           | 
  v1       | kubectl-crd-test.k8s.io                             | 
  v1       | networking.k8s.io                                   | DeleteOptions
  v1       | networking.k8s.io                                   | 
  v1       | rbac.authorization.k8s.io                           | ClusterRole
  v1       | rbac.authorization.k8s.io                           | ClusterRoleBinding
  v1       | rbac.authorization.k8s.io                           | DeleteOptions
  v1       | rbac.authorization.k8s.io                           | Role
  v1       | rbac.authorization.k8s.io                           | RoleBinding
  v1       | rbac.authorization.k8s.io                           | 
  v1       | resourcequota-crd-test.k8s.io                       | 
  v1       | scheduling.k8s.io                                   | DeleteOptions
  v1       | scheduling.k8s.io                                   | PriorityClass
  v1       | scheduling.k8s.io                                   | 
  v1       | stable.example.com                                  | 
  v1       | storage.k8s.io                                      | DeleteOptions
  v1       | storage.k8s.io                                      | StorageClass
  v1       | storage.k8s.io                                      | VolumeAttachment
  v1       | storage.k8s.io                                      | 
  v1       | webhook-crd-test.k8s.io                             | 
  v1       | webhook-multiversion-crd-test.k8s.io                | 
  v1       |                                                     | Binding
  v1       |                                                     | DeleteOptions
  v1       |                                                     | Endpoints
  v1       |                                                     | LimitRange
  v1       |                                                     | Namespace
  v1       |                                                     | Node
  v1       |                                                     | PersistentVolume
  v1       |                                                     | PersistentVolumeClaim
  v1       |                                                     | Pod
  v1       |                                                     | PodTemplate
  v1       |                                                     | ReplicationController
  v1       |                                                     | ResourceQuota
  v1       |                                                     | Service
  v1       |                                                     | ServiceAccount
  v1       |                                                     | 
  v1alpha1 | scalingpolicy.kope.io                               | 
  v1alpha1 | settings.k8s.io                                     | DeleteOptions
  v1alpha1 | settings.k8s.io                                     | 
  v1alpha1 | snapshot.storage.k8s.io                             | 
  v1alpha1 | wardle.k8s.io                                       | 
  v1beta1  | admissionregistration.k8s.io                        | MutatingWebhookConfiguration
  v1beta1  | admissionregistration.k8s.io                        | ValidatingWebhookConfiguration
  v1beta1  | admissionregistration.k8s.io                        | 
  v1beta1  | apiextensions.k8s.io                                | CustomResourceDefinition
  v1beta1  | apiextensions.k8s.io                                | 
  v1beta1  | apiregistration.k8s.io                              | APIService
  v1beta1  | apiregistration.k8s.io                              | 
  v1beta1  | authorization.k8s.io                                | SubjectAccessReview
  v1beta1  | batch                                               | CronJob
  v1beta1  | batch                                               | DeleteOptions
  v1beta1  | batch                                               | 
  v1beta1  | certificates.k8s.io                                 | CertificateSigningRequest
  v1beta1  | certificates.k8s.io                                 | 
  v1beta1  | coordination.k8s.io                                 | 
  v1beta1  | crd-publish-openapi-test-waldo.k8s.io               | 
  v1beta1  | events.k8s.io                                       | DeleteOptions
  v1beta1  | events.k8s.io                                       | 
  v1beta1  | extensions                                          | DeleteOptions
  v1beta1  | extensions                                          | Deployment
  v1beta1  | extensions                                          | DeploymentRollback
  v1beta1  | extensions                                          | Scale
  v1beta1  | extensions                                          | 
  v1beta1  | metrics.k8s.io                                      | 
  v1beta1  | mygroup.example.com                                 | 
  v1beta1  | networking.k8s.io                                   | DeleteOptions
  v1beta1  | networking.k8s.io                                   | 
  v1beta1  | node.k8s.io                                         | RuntimeClass
  v1beta1  | node.k8s.io                                         | 
  v1beta1  | policy                                              | DeleteOptions
  v1beta1  | policy                                              | PodDisruptionBudget
  v1beta1  | policy                                              | PodSecurityPolicy
  v1beta1  | policy                                              | 
  v1beta1  | rbac.authorization.k8s.io                           | ClusterRole
  v1beta1  | rbac.authorization.k8s.io                           | ClusterRoleBinding
  v1beta1  | rbac.authorization.k8s.io                           | DeleteOptions
  v1beta1  | rbac.authorization.k8s.io                           | Role
  v1beta1  | rbac.authorization.k8s.io                           | RoleBinding
  v1beta1  | rbac.authorization.k8s.io                           | 
  v1beta1  | scheduling.k8s.io                                   | PriorityClass
  v1beta1  | scheduling.k8s.io                                   | 
  v1beta1  | storage.k8s.io                                      | CSIDriver
  v1beta1  | storage.k8s.io                                      | CSINode
  v1beta1  | storage.k8s.io                                      | VolumeAttachment
  v1beta1  | storage.k8s.io                                      | 
  v2       | stable.example.com                                  | 
  v2       | webhook-multiversion-crd-test.k8s.io                | 
  v2alpha1 | batch                                               | CronJob
  v2alpha1 | batch                                               | 
  v3       | crd-publish-openapi-test-multi-ver.k8s.io           | 
  v4       | crd-publish-openapi-test-common-group.k8s.io        | 
  v4       | crd-publish-openapi-test-multi-ver.k8s.io           | 
  v5       | crd-publish-openapi-test-common-group.k8s.io        | 
  v5       | crd-publish-openapi-test-multi-to-single-ver.k8s.io | 
  v6       | crd-publish-openapi-test-common-group.k8s.io        | 
           |                                                     | 
 (118 rows)

 #+end_src

** TODO Move down line of cascading views based on this change
*** 601: Revised PodSpec Field Coverage View

 #+NAME: view podspec_field_coverage
 #+BEGIN_SRC sql-mode
 create view revised_podspec_field_coverage as select * from revised_podspec_field_coverage_material;
 #+END_SRC

 #+RESULTS: view podspec_field_coverage
 #+begin_src sql-mode
 CREATE VIEW
 #+end_src

 #+BEGIN_SRC sql-mode
SELECT  (
        SELECT COUNT(*)
        FROM   podspec_field_coverage
        ) AS original_count,
        (
        SELECT COUNT(*)
        FROM   revised_podspec_field_coverage
        ) AS revised_count;
 #+END_SRC

 #+RESULTS:
 #+begin_src sql-mode
  original_count | revised_count 
 ----------------+---------------
            6572 |          6572
 (1 row)

 #+end_src

* Footnotes
** PodSpec Field Coverage
   :PROPERTIES:
   :header-args:sql-mode+: :results silent
   :END:
*** 600: PodSpec Materialized View
    :PROPERTIES:
    :header-args:sql-mode+: :tangle ../apps/hasura/migrations/600_podspec_field_coverage_material.up.sql
    :END:
 #+NAME: view podspec_field_coverage_material
 #+BEGIN_SRC sql-mode
   CREATE MATERIALIZED VIEW "public"."podspec_field_coverage_material" AS 
   SELECT DISTINCT
     audit_event.operation_id,
     jsonb_object_keys(audit_event.request_object -> 'spec'::text) AS podspec_field,
     count(event_field.event_field) AS hits,
     split_part(audit_event.useragent, '--', 2) as test,
     split_part(audit_event.useragent, '--', 1) as useragent
     FROM audit_event,
          LATERAL
            jsonb_object_keys(audit_event.request_object -> 'spec'::text)
            event_field(event_field)
    WHERE (audit_event.request_object ->> 'kind'::text) = 'Pod'::text
      AND audit_event.operation_id !~~ '%alpha%'::text
      AND audit_event.operation_id !~~ '%beta%'::text
    GROUP BY operation_id, podspec_field, useragent
   UNION
   SELECT DISTINCT
     audit_event.operation_id,
     jsonb_object_keys(audit_event.request_object -> 'template' -> 'spec'::text) AS podspec_field,
     count(event_field.event_field) AS hits,
     split_part(audit_event.useragent, '--', 2) as test,
     split_part(audit_event.useragent, '--', 1) as useragent
     FROM audit_event,
          LATERAL
            jsonb_object_keys(audit_event.request_object -> 'template' -> 'spec'::text)
            event_field(event_field)
    WHERE (audit_event.request_object ->> 'kind'::text) = 'PodTemplate'::text
      AND audit_event.operation_id !~~ '%alpha%'::text
      AND audit_event.operation_id !~~ '%beta%'::text
    GROUP BY operation_id, podspec_field, useragent
   UNION
   SELECT DISTINCT
     audit_event.operation_id,
     jsonb_object_keys(audit_event.request_object -> 'spec' -> 'template' -> 'spec'::text) AS podspec_field,
     count(event_field.event_field) AS hits,
     split_part(audit_event.useragent, '--', 2) as test,
     split_part(audit_event.useragent, '--', 1) as useragent
     FROM audit_event,
          LATERAL
            jsonb_object_keys(audit_event.request_object -> 'spec' -> 'template' -> 'spec'::text)
            event_field(event_field)
    WHERE (audit_event.request_object->>'kind' = 'DaemonSet'
      OR  audit_event.request_object->>'kind' = 'Deployment'
      OR  audit_event.request_object->>'kind' = 'ReplicationController'
      OR  audit_event.request_object->>'kind' = 'StatefulSet'
      OR  audit_event.request_object->>'kind' = 'Job'
      OR  audit_event.request_object->>'kind' = 'ReplicaSet')
      AND audit_event.operation_id !~~ '%alpha%'::text
      AND audit_event.operation_id !~~ '%beta%'::text
    GROUP BY operation_id, podspec_field, useragent;
 #+END_SRC
*** 601: PodSpec Field Coverage View
    :PROPERTIES:
    :header-args:sql-mode+: :tangle ../apps/hasura/migrations/601_view_podspec_field_coverage.up.sql
    :END:
 #+NAME: view podspec_field_coverage
 #+BEGIN_SRC sql-mode
 create view podspec_field_coverage as select * from podspec_field_coverage_material;
 #+END_SRC
*** 602: PodSpec Field Summary View
    :PROPERTIES:
    :header-args:sql-mode+: :tangle ../apps/hasura/migrations/602_view_podspec_field_summary.up.sql
    :END:
 #+NAME: view podspec_field_summary
 #+BEGIN_SRC sql-mode
   create view podspec_field_summary as
   select distinct field_name as podspec_field,
                   0 as other_hits,
                   0 as e2e_hits,
                   0 as conf_hits
     from api_schema_field
    where field_schema like '%PodSpec%'
    UNION
   select
     podspec_field,
     sum(hits) as other_hits,
     0 as e2e_hits,
     0 as conf_hits
     from podspec_field_coverage
    where useragent not like 'e2e.test%'
    group by podspec_field
    UNION
   select
     podspec_field,
     0 as other_hits,
     sum(hits) as e2e_hits,
     0 as conf_hits
     from podspec_field_coverage
    where useragent like 'e2e.test%'
      and test not like '%Conformance%'
    group by podspec_field
    UNION
   select
     podspec_field,
     0 as other_hits,
     0 as e2e_hits,
     sum(hits) as conf_hits
     from podspec_field_coverage
    where useragent like 'e2e.test%'
      and test like '%Conformance%'
    group by podspec_field;
 #+END_SRC
*** 604: PodSpec Field mid Report View
    :PROPERTIES:
    :header-args:sql-mode+: :tangle ../apps/hasura/migrations/604_view_podspec_field_report.up.sql
    :END:
 #+NAME: podspec_field_hits
 #+BEGIN_SRC sql-mode
   create or replace view podspec_field_mid_report as
   select distinct
     field_name as podspec_field,
     0 as other_hits,
     0 as e2e_hits,
     0 as conf_hits,
     release,
     deprecated,
     feature_gated as gated,
     required,
     field_kind,
     field_type
     from api_schema_field
    where field_schema like '%PodSpec%'
    UNION
   select distinct podspec_field,
         sum(other_hits) as other_hits,
         sum(e2e_hits) as e2e_hits,
         sum(conf_hits) as conf_hits,
         kfp.release,
         kfp.deprecated,
         kfp.gated,
         kfp.required,
         kfp.field_kind,
         kfp.field_type
   from podspec_field_summary pfs, kind_field_path kfp
   where kfp.field_type not like 'io%'
     and (kfp.kind like '%PodSpec'
     or kfp.sub_kind like '%PodSpec')
     and pfs.podspec_field = regexp_replace(kfp.field_path, '.*\.','') 
   group by podspec_field, kfp.release, kfp.deprecated, kfp.gated, kfp.required, kfp.field_kind, kfp.field_type
   order by conf_hits, e2e_hits, other_hits;
 #+END_SRC

*** 604: PodSpec Field Report View
    :PROPERTIES:
    :header-args:sql-mode+: :tangle ../apps/hasura/migrations/604_view_podspec_field_report.up.sql
    :END:
 #+NAME: podspec_field_hits
 #+BEGIN_SRC sql-mode
   create or replace view podspec_field_report as
   select distinct podspec_field,
         sum(other_hits) as other_hits,
         sum(e2e_hits) as e2e_hits,
         sum(conf_hits) as conf_hits,
         release,
         deprecated,
         gated,
         required,
         field_kind,
         field_type
   from podspec_field_mid_report
   group by podspec_field, release, deprecated, gated, required, field_kind, field_type
   order by conf_hits, e2e_hits, other_hits;
 #+END_SRC

** Connect to Database
    If you already have your db and hasura endpoint up and running:
 - [ ] Connect to your postgres db from within this file
   You'll want execute this code block by moving your cursor within and typing =,,=
  
   #+NAME: Connect org to postgres
   #+BEGIN_SRC emacs-lisp :results silent
     (sql-connect "apisnoop" (concat "*SQL: postgres:data*"))
   #+END_SRC

 - [ ] Test your connection works
   You can run this sql block, and it see a message in your minbuffer like:
   : You are connected to database "apisnoop" as user "apisnoop" on host "localhost" at port "10041".

   #+NAME: Test Connection
   #+BEGIN_SRC sql-mode :results silent
   \conninfo
   #+END_SRC

 If the db is not running, or hasn't been setup yet, follow the instructions in [[file:~/ii/apisnoop_v3/org/meta.org::*Welcome,%20ii%20dev!][meta.org]]  , then come back and do the steps above.
