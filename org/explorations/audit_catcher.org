#+TITLE: dynamic audit logging w/ apisnoop

* [8/8] Configuring the cluster to log audit events
- [X] look at kind (needs to set args to kubeadm)
- [X] kubeadm sets args for apiserver
- [X] use above to set apiserver '--audit-dynamic-configuration --feature-gates=DynamicAuditing=true'
Verify that you can set the https url to something!
And that traffic goes there
https://foob.sharing.io
- [X] setup an http logger up as a container 
Setup a container that launches this.
Maybe launches sleep 9999, and this . so you can debug and restart/ recompbine test-server.go
https://github.com/cncf/apisnoop/blob/shell-script-paths/dev/minikube/test-server.go
- [X] raw JSON data returns for each request
- [X] configure working https within cluster so spec.webhook.clientConfig.url can be https from the apiserver
^^^
- [X] kubectl apply the AuditSink pointing to the service
- [X] load data into Postgres Database for APISnoop

** Statically enabling auditlogfiles... via kind
** Statically enabling auditsink / webhook
* auditlogger
** javascript code
#+NAME: auditlogger bot (nodejs)
#+begin_src js :tangle auditlogger.js
  // apisnoop auditlogger
  const connectionString = typeof process.env.PG_CONNECTION_STRING !== 'undefined' ? process.env.PG_CONNECTION_STRING : 'postgres://apisnoop:s3cretsauc3@postgres/apisnoop?sslmode=disable'
  const express = require('express')
  const app = express()
  const bodyParser = require('body-parser')
  const morgan = require('morgan')
  const knex = require('knex')({
      client: 'pg',
      connection: connectionString
  })

  console.log(`[status] using connection string: ${connectionString}`)

  function hello (req, res, next) {
      const helloMsg = 'Hey! I\'m your friendly neighbourhood auditlogger. Note: the endpoint /events is where logging takes place.'
      console.log(helloMsg)
      res.json({ message: helloMsg })
      return res.end()
  }

  function requestFailure (req, res, next, message) {
      res.status(400)
      res.json({ message })
      return res.end()
  }

  function checkForBodyContent (req, res, next) {
      if (Object.keys(req.body).length === 0 || typeof req.body !== 'object') {
          console.log('[error] request contains no body')
          return requestFailure(req, res, next, 'request must contain a body')
      }
      return next()
  }

  function checkUserAgent (req, res, next) {
      const requestContent = req.body
      console.log(req.headers['user-agent'])
      if (req.headers['user-agent'] !== 'kube-apiserver-admission') {
          console.log('[error] request didn\'t come from kube-apiserver')
          return requestFailure(req, res, next, 'Error: request must come from Kubernetes apiserver')
      }
      return next()
  }

  function logEventsToDB (req, res, next) {
      const requestContent = req.body
      const items = requestContent.items[0]

      console.log(JSON.stringify(requestContent, null, 2))

      console.log('[status] inserting into database')
      var dataToInsert = {
           bucket: 'apisnoop',
           job: 'live', 
           audit_id: items.auditID,
           stage: items.stage, 
           event_verb: items.verb,
           request_uri: items.requestURI,
           data: JSON.stringify(requestContent)
      }
      console.log(dataToInsert)
  
      knex.transaction((trx) => {
           knex('raw_audit_event').transacting(trx).insert(dataToInsert)
               .then(trx.commit)
               .catch(trx.rollback)
      }).then(resp => {
          console.log('[status] successfully submitted entry')
          res.json({ message: 'operation complete; data inserted' })
          return res.end()
      }).catch(err => {
          console.log('[error] database: ${err}')
          requestFailure(req, res, next, '[error] database: ${err}')
      })
  }

  console.log('[status] starting apisnoop-auditlog-event-handler')

  app.use(bodyParser.urlencoded({
      extended: true
  }))
  app.use(express.json())
  app.use(morgan('combined'))

  app.get('/', hello)
  app.post('/events', [checkForBodyContent, checkUserAgent], logEventsToDB)

  knex.raw('select 0;').then(() => {
      console.log('[status] connected to database')
      app.listen('9900', () => {
          console.log('[status] started; listening on port 9900')
      })

  }).catch(err => {
      console.log('[error] No database connection found.')
      console.log(err)
      process.exit(1)
  }) 

#+end_src

#+NAME: auditlogger bot (nodejs) package
#+begin_src javascript :tangle package.json
{
  "name": "apisnoop-auditlogger",
  "version": "0.0.1",
  "description": "AuditLogger for apisnoop",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "Caleb Woodbine <caleb@ii.coop>",
  "license": "Apache-2.0",
  "dependencies": {
    "express": "^4.17.1",
    "knex": "^0.20.1",
    "morgan": "^1.9.1",
    "pg": "^7.12.1"
  }
}
#+end_src

** Dockerfile
#+NAME: dockerfile for auditlogger bot
#+begin_src dockerfile :tangle Dockerfile
FROM node:12.13.0-stretch
RUN wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add -
RUN  echo "deb http://apt.postgresql.org/pub/repos/apt/ stretch-pgdg main" > /etc/apt/sources.list.d/pgdg.list
RUN apt update && \
    apt install -y vim postgresql-client-12 netcat
WORKDIR /opt/apisnoop
COPY auditlogger.js .
COPY package.json .
RUN npm i
EXPOSE 9900
CMD ["node", "auditlogger.js"]
#+end_src

#+NAME: build auditlog bot container image
#+begin_src tmate
docker build -t raiinbow/auditlogger .
#+end_src

* kube yamls
** kind-cluster-config.yaml
#+NAME: kind kubeadm DynamicAuditing configuration
#+begin_src yaml :tangle kind-cluster-config.yaml
kind: Cluster
apiVersion: kind.sigs.k8s.io/v1alpha3
kubeadmConfigPatches:
- |
  apiVersion: kubeadm.k8s.io/v1beta2
  kind: ClusterConfiguration
  metadata:
    name: config
  apiServer:
    extraArgs:
      "feature-gates": "DynamicAuditing=true"
      "runtime-config": "auditregistration.k8s.io/v1alpha1=true"
      "audit-dynamic-configuration": "true"
nodes:
 - role: control-plane
  #+end_src
** auditlogging-deployment.yaml

#+NAME: auditlog handler container
#+begin_src yaml :tangle apisnoop-auditlogger-deployment-service.yaml
  apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: apisnoop-auditlogger
    namespace: kube-system
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: apisnoop-auditlogger
    template:
      metadata:
        labels:
          app: apisnoop-auditlogger
      spec:
        containers:
          - name: apisnoop-auditlogger
            image: raiinbow/auditlogger:06-11-19_16-20
            #command:
            #  - "sleep"
            #args: 
            #  - "+Inf"
            ports:
              - containerPort: 9900
  ---
  apiVersion: v1
  kind: Service
  metadata:
    name: apisnoop-auditlogger
    namespace: kube-system
  spec:
    ports:
      - port: 9900
        targetPort: 9900
    selector:
      app: apisnoop-auditlogger
    clusterIP: 10.96.96.96
    type: ClusterIP
#+end_src
** auditsink.yaml (currentyl hardcoded IP)
The virtual IP address in spec.webhook.clientConfig.url (for now) must be manually adjusted to the virtual IP of the webserver API

#+NAME: dynamic audit webhook configuration
#+begin_src yaml :tangle auditsink.yaml
    apiVersion: auditregistration.k8s.io/v1alpha1
    kind: AuditSink
    metadata:
      name: auditlogger
      namespace: kube-system
    spec:
      policy:
        level: Metadata
        stages:
        - ResponseComplete
      webhook:
        throttle:
          qps: 10
          burst: 15
        clientConfig:
          #url: "http://apisnoop-auditlogger.kube-system.svc.cluster.local:9900/events"
          # svc cluster ip of apisnoop-auditlogger
          url: "http://10.96.96.96:9900/events"
#+end_src
* Ensure Kind will allow dynamic Auditing
** kind create cluster --with-auditing
#+NAME: Bring up a kind cluster
#+begin_src tmate
kind create cluster --name kind-$USER --config kind-cluster-config.yaml
#+end_src
** kubectl apply apisnoop
#+NAME: bring up APIsnoop
#+begin_src tmate
kubectl apply -f https://raw.githubusercontent.com/cncf/apisnoop/master/apps/raiinbow.yaml --namespace=kube-system
#+end_src
** kubectl apply auditlogger
#+NAME: create container deployment
#+begin_src tmate
kubectl apply -f apisnoop-auditlogger-deployment-service.yaml 
#+end_src
** kubectl apply the auditsink
#+NAME: create auditsink                                                                                        
#+begin_src tmate
kubectl apply -f auditsink.yaml                                                                 
#+end_src
* DOCS
** what are the defaults  
   #+name: kubeadm config init-defaults
   #+begin_src shell :wrap "src yaml"
     docker exec kind-$USER-control-plane kubeadm config print init-defaults
   #+end_src

   #+RESULTS: kubeadm config init-defaults
   #+begin_src yaml
   apiVersion: kubeadm.k8s.io/v1beta2
   bootstrapTokens:
   - groups:
     - system:bootstrappers:kubeadm:default-node-token
     token: abcdef.0123456789abcdef
     ttl: 24h0m0s
     usages:
     - signing
     - authentication
   kind: InitConfiguration
   localAPIEndpoint:
     advertiseAddress: 1.2.3.4
     bindPort: 6443
   nodeRegistration:
     criSocket: /var/run/dockershim.sock
     name: kind-hh-control-plane
     taints:
     - effect: NoSchedule
       key: node-role.kubernetes.io/master
   ---
   apiServer:
     timeoutForControlPlane: 4m0s
   apiVersion: kubeadm.k8s.io/v1beta2
   certificatesDir: /etc/kubernetes/pki
   clusterName: kubernetes
   controllerManager: {}
   dns:
     type: CoreDNS
   etcd:
     local:
       dataDir: /var/lib/etcd
   imageRepository: k8s.gcr.io
   kind: ClusterConfiguration
   kubernetesVersion: v1.14.0
   networking:
     dnsDomain: cluster.local
     serviceSubnet: 10.96.0.0/12
   scheduler: {}
   #+end_src

** auditing docs
AuditSink is still Alpha... so it has to be manually enabled
At Beta it's enabled by default
So we have to pass arguments to the apiserver when it starts to enable dynamic configuration of it
Which is not much different than configurating it statically
https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.16/#auditsink-v1alpha1-auditregistration-k8s-io

https://kubernetes.io/docs/tasks/debug-application-cluster/audit/
https://github.com/kubernetes/website/blob/master/content/en/docs/tasks/debug-application-cluster/audit.md
https://github.com/kubernetes/website/blob/master/content/en/docs/tasks/debug-application-cluster/audit.md#dynamic-backend
API Ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.16/
** existing tickets for kind

https://github.com/kubernetes-sigs/kind/pull/457
https://github.com/kubernetes-sigs/kind/pull/457

** useful golang libraries
- https://github.com/gin-gonic/gin (go http API library)
- https://github.com/lib/pq (go postgres connector)
** original attempt at auditlogger

https://github.com/cncf/apisnoop/tree/shell-script-paths/dev/minikube
https://github.com/cncf/apisnoop/blob/shell-script-paths/dev/minikube/webhook-config.yaml
https://github.com/cncf/apisnoop/blob/shell-script-paths/dev/minikube/test-server.go


