#+NAME: META
#+TODO: TODO(t) NEXT(n) IN-PROGRESS(i) BLOCKED(b) | TADA(d)

* Purpose
  This holds the authorative way to get setup and exploring with our hasura backend.

* Working with this repo/org file** Work happens in Org first
   Within ii, our emphasis is on the documentation/org-file first.  
   We can document and craft the queries for our db, then tangle them into our migration files.
   as such: 
   *NOTE: Don't commit the hasura/migrations, they should be tangled from the org file.*
   In the future, we may add a commit hook that tangles org => hasura
* Iteration Loop
** listing tables
#+BEGIN_SRC sql-mode
\conninfo
\d+
#+END_SRC

#+RESULTS:
#+begin_src sql-mode
You are connected to database "zz" as user "zz" on host "172.17.0.1" at port "5432".
SSL connection (protocol: TLSv1.3, cipher: TLS_AES_256_GCM_SHA384, bits: 256, compression: off)
                                List of relations
 Schema |           Name            |   Type   | Owner |    Size    | Description 
--------+---------------------------+----------+-------+------------+-------------
 public | api_operations            | view     | zz    | 0 bytes    | 
 public | api_operations_parameters | view     | zz    | 0 bytes    | 
 public | api_operations_responses  | view     | zz    | 0 bytes    | 
 public | api_resources             | view     | zz    | 0 bytes    | 
 public | api_resources_fields      | view     | zz    | 0 bytes    | 
 public | audit_events              | view     | zz    | 0 bytes    | 
 public | over                      | view     | zz    | 0 bytes    | 
 public | raw_audit_events          | table    | zz    | 389 MB     | 
 public | raw_audit_events_id_seq   | sequence | zz    | 8192 bytes | 
 public | raw_swaggers              | table    | zz    | 1752 kB    | 
 public | raw_swaggers_id_seq       | sequence | zz    | 8192 bytes | 
(11 rows)

#+end_src

** dropping all data
#+NAME: do not run
#+BEGIN_SRC sql-mode :eval ask
  drop table raw_swaggers cascade;
  drop table raw_audit_events cascade;
  drop schema hdb_catalog cascade;
  drop schema hdb_views cascade;
#+END_SRC

#+RESULTS: do not run
#+begin_src sql-mode
ERROR:  table "raw_swaggers" does not exist
ERROR:  table "raw_audit_events" does not exist
ERROR:  schema "hdb_catalog" does not exist
ERROR:  schema "hdb_views" does not exist
#+end_src

** Restart Hasura
   #+NAME: iteration loop
   #+BEGIN_SRC tmate
     cd ~/ii/apisnoop_v3/apps/hasura
     docker-compose down
     # drop all data while down
     echo 'drop table raw_swaggers cascade; drop table raw_audit_events cascade; drop schema hdb_catalog cascade;' | psql
     docker-compose up
   #+END_SRC

** setting up the hasura postgresql-permissions
   
Run the following as the postgres user via psql:
https://docs.hasura.io/1.0/graphql/manual/deployment/postgres-permissions.html

#+NAME: hasura-user
#+BEGIN_SRC shell :results silent
echo -n $USER
#+END_SRC

#+NAME: create database and granting all privs to a user
#+BEGIN_SRC sql-mode :noweb yes :tangle ../apps/hasura/db_setup.sql
create database <<hasura-user()>>;
-- create user myuser with encrypted password 'mypass';
grant all privileges on database <<hasura-user()>> to <<hasura-user()>>;
create role dba with superuser noinherit;
grant dba to <<hasura-user()>>;
\connect <<hasura-user()>>
-- we write python functions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS plpython3u;
CREATE EXTENSION IF NOT EXISTS plsh;
CREATE EXTENSION IF NOT EXISTS pgcrypto;
CREATE SCHEMA IF NOT EXISTS hdb_catalog;
CREATE SCHEMA IF NOT EXISTS hdb_views;
-- make the user an owner of system schemas
ALTER SCHEMA hdb_catalog OWNER TO <<hasura-user()>>;
ALTER SCHEMA hdb_views OWNER TO <<hasura-user()>>;
GRANT SELECT ON ALL TABLES IN SCHEMA information_schema TO <<hasura-user()>>;
GRANT SELECT ON ALL TABLES IN SCHEMA pg_catalog TO <<hasura-user()>>;
GRANT USAGE ON SCHEMA public TO <<hasura-user()>>;
GRANT ALL ON ALL TABLES IN SCHEMA public TO <<hasura-user()>>;
GRANT ALL ON ALL SEQUENCES IN SCHEMA public TO <<hasura-user()>>;
GRANT pg_execute_server_program TO <<hasura-user()>>;
#+END_SRC

#+RESULTS: create database and granting all privs to a user
#+begin_src sql-mode
ERROR:  database "zz" already exists
WARNING:  no privileges were granted for "zz"
GRANT
ERROR:  must be superuser to create superusers
ERROR:  must be superuser to alter superusers
SSL connection (protocol: TLSv1.3, cipher: TLS_AES_256_GCM_SHA384, bits: 256, compression: off)
You are now connected to database "zz" as user "zz".
NOTICE:  extension "uuid-ossp" already exists, skipping
CREATE EXTENSION
NOTICE:  extension "plpython3u" already exists, skipping
CREATE EXTENSION
ERROR:  permission denied to create extension "plsh"
HINT:  Must be superuser to create this extension.
NOTICE:  extension "pgcrypto" already exists, skipping
CREATE EXTENSION
NOTICE:  schema "hdb_catalog" already exists, skipping
CREATE SCHEMA
NOTICE:  schema "hdb_views" already exists, skipping
CREATE SCHEMA
ALTER SCHEMA
ALTER SCHEMA
WARNING:  no privileges were granted for "sql_features"
WARNING:  no privileges were granted for "sql_implementation_info"
WARNING:  no privileges were granted for "sql_languages"
WARNING:  no privileges were granted for "sql_packages"
WARNING:  no privileges were granted for "sql_parts"
WARNING:  no privileges were granted for "sql_sizing"
WARNING:  no privileges were granted for "sql_sizing_profiles"
WARNING:  no privileges were granted for "collations"
WARNING:  no privileges were granted for "collation_character_set_applicability"
WARNING:  no privileges were granted for "column_domain_usage"
WARNING:  no privileges were granted for "constraint_column_usage"
WARNING:  no privileges were granted for "domains"
WARNING:  no privileges were granted for "constraint_table_usage"
WARNING:  no privileges were granted for "domain_constraints"
WARNING:  no privileges were granted for "role_column_grants"
WARNING:  no privileges were granted for "enabled_roles"
WARNING:  no privileges were granted for "referential_constraints"
WARNING:  no privileges were granted for "parameters"
WARNING:  no privileges were granted for "routine_privileges"
WARNING:  no privileges were granted for "role_routine_grants"
WARNING:  no privileges were granted for "routines"
WARNING:  no privileges were granted for "schemata"
WARNING:  no privileges were granted for "table_constraints"
WARNING:  no privileges were granted for "sequences"
WARNING:  no privileges were granted for "triggered_update_columns"
WARNING:  no privileges were granted for "table_privileges"
WARNING:  no privileges were granted for "role_table_grants"
WARNING:  no privileges were granted for "triggers"
WARNING:  no privileges were granted for "tables"
WARNING:  no privileges were granted for "transforms"
WARNING:  no privileges were granted for "role_udt_grants"
WARNING:  no privileges were granted for "udt_privileges"
WARNING:  no privileges were granted for "role_usage_grants"
WARNING:  no privileges were granted for "usage_privileges"
WARNING:  no privileges were granted for "user_defined_types"
WARNING:  no privileges were granted for "view_column_usage"
WARNING:  no privileges were granted for "view_routine_usage"
WARNING:  no privileges were granted for "view_table_usage"
WARNING:  no privileges were granted for "views"
WARNING:  no privileges were granted for "data_type_privileges"
WARNING:  no privileges were granted for "user_mapping_options"
WARNING:  no privileges were granted for "element_types"
WARNING:  no privileges were granted for "_pg_foreign_table_columns"
WARNING:  no privileges were granted for "column_options"
WARNING:  no privileges were granted for "_pg_foreign_data_wrappers"
WARNING:  no privileges were granted for "foreign_data_wrapper_options"
WARNING:  no privileges were granted for "user_mappings"
WARNING:  no privileges were granted for "foreign_data_wrappers"
WARNING:  no privileges were granted for "_pg_foreign_servers"
WARNING:  no privileges were granted for "foreign_server_options"
WARNING:  no privileges were granted for "foreign_servers"
WARNING:  no privileges were granted for "_pg_foreign_tables"
WARNING:  no privileges were granted for "key_column_usage"
WARNING:  no privileges were granted for 
#+end_src

#+NAME: as posgres admin, setup hasura user and db
#+BEGIN_SRC tmate
#+BEGIN_SRC shell  :var SUDO_ASKPASS="/usr/bin/ssh-askpass" :prologue "export SUDO_ASKPASS"
# :var DISPLAY=":0.0"
sudo su - postgres -c psql < ~/ii/apisnoop_v3/apps/hasura/db_setup.sql
#+END_SRC

#+RESULTS: as posgres admin, setup hasura user and db
#+begin_EXAMPLE
#+end_EXAMPLE

* Hasura
** config.yaml

Can be used by itself to run hasura cli or console from another host

#+BEGIN_SRC yaml :tangle ../apps/hasura/config.yaml
endpoint: http://sharing.io:8888
#+END_SRC

** docker-compose.yml
#+BEGIN_SRC yaml :tangle ../apps/hasura/docker-compose.yaml
  # hasura/docker-compose.yaml
  version: "3.7"

  services:
   hasura:
      #image: hasura/graphql-engine:v1.0.0-beta.3
      # append '.cli-migrations' to auto run 'hasura migrations apply'
      container_name: "${USER}-hasura"
      image: hasura/graphql-engine:v1.0.0-beta.4.cli-migrations
      restart: always
      networks:
        - web
      environment:
        # Should try and set database be read only for public
        #- HASURA_GRAPHQL_DATABASE_URL=postgres://non-priv-user@172.17.0.1:5432/database-name
        #- HASURA_GRAPHQL_DATABASE_URL=postgres://non-priv-user@172.17.0.1:5432/$OUTER-USER
        # https://docs.docker.com/compose/compose-file/#variable-substitution
        # https://docs.docker.com/compose/env-file/
        - "HASURA_GRAPHQL_DATABASE_URL=postgres://${USER}@172.17.0.1:5432/${USER}"
        - HASURA_GRAPHQL_ENABLE_CONSOLE=true
      volumes:
        - ./migrations:/hasura-migrations
      expose:
        - "8080"
      labels:
        - "traefik.docker.network=web"
        - "traefik.enable=true"
        - "traefik.basic.port=8080"
        - "traefik.basic.protocol=http"
        - "traefik.basic.frontend.rule=Host:${USER}-hasura.sharing.io"
  #volumes:
  #  migrations:
  networks:
    web:
      external: true
#+END_SRC

** start hasura

#+BEGIN_SRC shell :dir hasura
docker-compose up -d
#+END_SRC

#+RESULTS:
#+begin_EXAMPLE
#+end_EXAMPLE
** Watch hasura logs

#+BEGIN_SRC emacs-lisp
    (defun hasura-logs ()
      (interactive)
      (setq *hasura-buffer*
            (get-buffer-create "hasura-logs"))
      (with-current-buffer *hasura-buffer*
        (ansi-color-for-comint-mode-on)
        (comint-mode)
        (spacemacs/toggle-line-numbers-on)
       ;; (linum-mode t)
        )
      (let ((default-directory (file-name-directory (concat (file-name-directory buffer-file-name) "../hasura/")))
            (logs-command "docker-compose logs -f --no-color")
            ;; (logs-command "tail -f /var/log/messages")
            ;;(logs-command "docker-compose logs -f --no-color 2>/dev/null | sed 's:hasura_1  | ::g' | grep '^{' | jq .")
            )
        (setq *hasura-process*
              (start-file-process-shell-command
               "hasura" *hasura-buffer* logs-command))
        (set-process-filter *hasura-process* 'comint-output-filter)
  )
      )
    (hasura-logs)
    ;; unsure how to display
    ;; (add-to-list 'display-buffer-alist
    ;;            '("hasura-logs" . ((display-buffer-pop-up-window) .
    ;;                               ((inhibit-same-window . t)))))
    ;; (
    ;; display-buffer (get-buffer "hasura-logs") nil)
    ;; "docker-compose logs -f| jq .")
#+END_SRC

#+RESULTS:
#+begin_src emacs-lisp
comint-output-filter
#+end_src

* OpenAPI / Swagger Table
** swagger.json

#+NAME: raw_swaggers
#+BEGIN_SRC sql-mode :tangle ../apps/hasura/migrations/100_table_raw_swaggers.up.sql :results silent
CREATE TABLE raw_swaggers (
    id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ingested_at timestamp DEFAULT CURRENT_TIMESTAMP,
    -- version text NOT NULL,
    -- definition_id text NOT NULL,
    data jsonb NOT NULL
);
#+END_SRC

#+NAME: track raw_swaggers
#+BEGIN_SRC yaml :tangle ../apps/hasura/migrations/100_table_raw_swaggers.up.yaml
- type: track_table
  args:
    schema: public
    name: raw_swaggers
#+END_SRC
** swagger.json INDEX

#+NAME: general index the raw_swagger
#+BEGIN_SRC sql-mode :tangle ../apps/hasura/migrations/100_table_raw_swaggers.up.sql :results silent
CREATE INDEX idx_swagger_jsonb_ops ON raw_swaggers USING GIN (data jsonb_ops);
CREATE INDEX idx_swagger_jsonb_path_ops ON raw_swaggers USING GIN (data jsonb_path_ops);
     -- api_operations view:
     --  , jsonb_each((raw_swaggers.data -> 'paths'::text)) paths(key, value)
     --  , jsonb_each(paths.value) d(key, value)
     --  , jsonb_array_elements((d.value -> 'tags'::text)) cat_tag(value)
     --  , jsonb_array_elements((d.value -> 'tags'::text)) jsonstring(value)
     --  , jsonb_array_elements((d.value -> 'schemes'::text)) schemestring(value)
     -- GROUP BY raw_swaggers.id, paths.key, d.key, d.value, cat_tag.value
     -- ORDER BY paths.key;
     -- api_resources view:
     --   , jsonb_each((raw_swaggers.data -> 'definitions'::text)) d(key, value)
     --   , jsonb_array_elements((d.value -> 'required'::text)) reqstring(value)
     -- GROUP BY raw_swaggers.id, d.key, d.value;
-- CREATE INDEX idx_swagger_X ON raw_swagger USING GIN ((jsb->‘X’));
-- CREATE INDEX idx_swagger_X ON raw_swagger USING BTREE ((jsb->>‘X’));
-- CREATE INDEX idx_swagger_X ON raw_swagger USING HASH ((jsb->>‘X’))
#+END_SRC


** load swagger via curl

#+NAME: load_swagger_via_curl.py
#+BEGIN_SRC python :eval never
  # should probably sanitize branch_or_tag
  try:
      from string import Template
      sql = Template("copy raw_swaggers (data) FROM PROGRAM '$curl' (DELIMITER e'\x02', FORMAT 'csv', QUOTE e'\x01');").substitute(
          curl =  f'curl https://raw.githubusercontent.com/kubernetes/kubernetes/{branch_or_tag}/api/openapi-spec/swagger.json | jq -c .'
      )
      rv = plpy.execute(sql)
      return "it worked"
  except:
      return "something went wrong"
#+END_SRC

#+NAME: load_swagger_via_curl.sql
#+BEGIN_SRC sql-mode :noweb yes :tangle ../apps/hasura/migrations/120_function_load_swagger_via_curl.up.sql :results silent
  set role dba;
  CREATE OR REPLACE FUNCTION load_swagger_via_curl(branch_or_tag text)
  RETURNS text AS $$
  <<load_swagger_via_curl.py>>
  $$ LANGUAGE plpython3u ;
  reset role;
#+END_SRC

#+NAME: reload swaggers for particluar releases
#+BEGIN_SRC sql-mode :noweb yes :tangle ../apps/hasura/migrations/130_populate_swaggers.up.sql :results silent
  delete from raw_swaggers;
  select * from load_swagger_via_curl('master');
  -- select * from load_swagger_via_curl('release-1.15');
  -- select * from load_swagger_via_curl('release-1.14');
  -- select * from load_swagger_via_curl('release-1.13');
  -- select * from load_swagger_via_curl('release-1.12');
  -- select * from load_swagger_via_curl('release-1.11');
  -- select * from load_swagger_via_curl('release-1.10');
#+END_SRC

#+NAME: number of raw_swaggers
#+BEGIN_SRC sql-mode
  select count(*) from raw_swaggers;
#+END_SRC

#+RESULTS: number of raw_swaggers
#+begin_src sql-mode
 count 
-------
     1
(1 row)

#+end_src

#+BEGIN_SRC sql-mode
\dt+
#+END_SRC

#+RESULTS:
#+begin_src sql-mode
                          List of relations
 Schema |       Name       | Type  | Owner |    Size    | Description 
--------+------------------+-------+-------+------------+-------------
 public | raw_audit_events | table | hh    | 8192 bytes | 
 public | raw_swaggers     | table | hh    | 1752 kB    | 
(2 rows)

#+end_src

* Raw Audit Events JSONB Table
** raw_audit_events

#+NAME: raw_audit_events
#+BEGIN_SRC sql-mode :tangle ../apps/hasura/migrations/220_table_raw_audit_events.up.sql :results silent
CREATE TABLE raw_audit_events (
    id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ingested_at timestamp DEFAULT CURRENT_TIMESTAMP,
    bucket text,
    job text,
    data jsonb NOT NULL
);
#+END_SRC

#+NAME: track raw_audit_events
#+BEGIN_SRC yaml :tangle ../apps/hasura/migrations/220_table_raw_audit_events.up.yaml
- type: track_table
  args:
    schema: public
    name: raw_audit_events
#+END_SRC
** raw_audit_events INDEX

#+NAME: index the raw_audit_events
#+BEGIN_SRC sql-mode
CREATE INDEX idx_audit_events_jsonb_ops        ON raw_audit_events USING GIN (data jsonb_ops);
CREATE INDEX idx_audit_events_jsonb_path_jobs  ON raw_audit_events USING GIN (data jsonb_path_ops);
-- CREATE INDEX idx_audit_events_level_btree      ON raw_audit_events USING BTREE ((data->>'level'));
-- CREATE INDEX idx_audit_events_level_hash       ON raw_audit_events USING HASH  ((data->>'level'));
-- CREATE INDEX idx_audit_events_stage_btree      ON raw_audit_events USING BTREE ((data->>'stage'));
-- CREATE INDEX idx_audit_events_stage_hash       ON raw_audit_events USING HASH  ((data->>'stage'));
-- CREATE INDEX idx_audit_events_verb_btree       ON raw_audit_events USING BTREE ((data->>'verb'));
-- CREATE INDEX idx_audit_events_verb_hash        ON raw_audit_events USING HASH  ((data->>'verb'));
-- CREATE INDEX idx_audit_events_apiVersion_btree ON raw_audit_events USING BTREE ((data->>'apiVersion'));
-- CREATE INDEX idx_audit_events_apiVersion_hash  ON raw_audit_events USING HASH  ((data->>'apiVersion'));
-- CREATE INDEX idx_audit_events_requestURI_btree ON raw_audit_events USING BTREE ((data->>'requestURI'));
-- CREATE INDEX idx_audit_events_requestURI_hash  ON raw_audit_events USING HASH  ((data->>'requestURI'));
-- CREATE INDEX idx_audit_events_userAgent_btree  ON raw_audit_events USING BTREE ((data->>'userAgent'));
-- CREATE INDEX idx_audit_events_userAgent_hash   ON raw_audit_events USING HASH  ((data->>'userAgent'));
-- CREATE INDEX idx_audit_events_namespace_btree  ON raw_audit_events USING BTREE ((data->'objectRef' ->> 'namespace'));
-- CREATE INDEX idx_audit_events_namespace_hash   ON raw_audit_events USING HASH  ((data->'objectRef' ->> 'namespace'));
-- CREATE INDEX idx_audit_events_resource_btree   ON raw_audit_events USING BTREE ((data->'objectRef' ->> 'resource'));
-- CREATE INDEX idx_audit_events_resource_hash    ON raw_audit_events USING HASH  ((data->'objectRef' ->> 'resource'));
-- CREATE INDEX idx_audit_events_apiGroup_btree   ON raw_audit_events USING BTREE ((data->'objectRef' ->> 'apiGroup'));
-- CREATE INDEX idx_audit_events_apiGroup_hash    ON raw_audit_events USING HASH  ((data->'objectRef' ->> 'apiGroup'));
-- CREATE INDEX idx_audit_events_apiVersion_btree ON raw_audit_events USING BTREE ((data->'objectRef' ->> 'apiVersion'));
-- CREATE INDEX idx_audit_events_apiVersion_hash  ON raw_audit_events USING HASH  ((data->'objectRef' ->> 'apiVersion'));
-- CREATE INDEX idx_audit_events_requests_gin     ON raw_audit_events USING GIN ((data->'requestObject'));
-- CREATE INDEX idx_audit_events_requests_gin     ON raw_audit_events USING GIN ((data->'requestObject'));
-- CREATE INDEX idx_audit_events_namespace_hash   ON raw_audit_events USING HASH  ((data->'objectRef' ->> 'namespace'));
-- CREATE INDEX idx_audit_events_X_gin  ON raw_audit_events USING GIN ((data->'X'));
-- CREATE INDEX idx_audit_events_X_btree ON raw_audit_events USING BTREE ((data->'X'));
-- CREATE INDEX idx_audit_events_X_hash ON raw_audit_events USING HASH ((data->'X'));
-- CREATE INDEX idx_audit_events_X ON raw_audit_events USING GIN ((jsb->‘X’));
-- CREATE INDEX idx_audit_events_X ON raw_audit_events USING BTREE ((jsb->>‘X’));
-- CREATE INDEX idx_audit_events_X ON raw_audit_events USING HASH ((jsb->>‘X’))
#+END_SRC

#+RESULTS: index the raw_audit_events
#+begin_src sql-mode
ERROR:  relation "idx_audit_events_jsonb_ops" already exists
ERROR:  relation "idx_audit_events_jsonb_path_jobs" already exists
#+end_src

** load audit_events via plpython3u

#+NAME: load_audit_events.py
#+BEGIN_SRC python :tangle load_audit_events.py
  #!/usr/bin/env python3
  from urllib.request import urlopen, urlretrieve
  import os
  import re
  from bs4 import BeautifulSoup
  import subprocess
  import time
  import glob
  from tempfile import mkdtemp
  from string import Template


  def get_html(url):
      html = urlopen(url).read()
      soup = BeautifulSoup(html, 'html.parser')
      return soup


  def download_url_to_path(url, local_path):
      local_dir = os.path.dirname(local_path)
      if not os.path.isdir(local_dir):
          os.makedirs(local_dir)
      if not os.path.isfile(local_path):
          process = subprocess.Popen(['wget', '-q', url, '-O', local_path])
          downloads[local_path] = process

  # this global dict is used to track our wget subprocesses
  # wget was used because the files can get to several halfa gig
  downloads = {}
  def load_audit_events(bucket,job):
      bucket_url = f'https://storage.googleapis.com/kubernetes-jenkins/logs/{bucket}/{job}/'
      artifacts_url = f'https://gcsweb.k8s.io/gcs/kubernetes-jenkins/logs/{bucket}/{job}/artifacts'
      job_metadata_files = [
          'finished.json',
          'artifacts/metadata.json',
          'artifacts/junit_01.xml',
          'build-log.txt'
      ]
      download_path = mkdtemp( dir='/tmp', prefix=f'apisnoop-{bucket}-{job}' ) + '/'
      combined_log_file = download_path + 'audit.log'

      # meta data to download
      for jobfile in job_metadata_files:
          download_url_to_path( bucket_url + jobfile,
                                download_path + jobfile )

      # Use soup to grab url of each of audit.log.* (some end in .gz)
      soup = get_html(artifacts_url)
      master_link = soup.find(href=re.compile("master"))
      master_soup = get_html(
          "https://gcsweb.k8s.io" + master_link['href'])
      log_links = master_soup.find_all(
          href=re.compile("audit.log"))

      # download all logs
      for link in log_links:
          log_url = link['href']
          log_file = download_path + os.path.basename(log_url)
          download_url_to_path( log_url, log_file)

      # Our Downloader uses subprocess of curl for speed
      for download in downloads.keys():
          # Sleep for 5 seconds and check for next download
          while downloads[download].poll() is None:
              time.sleep(5)
              # print("Still downloading: " + download)
          # print("Downloaded: " + download)

      # Loop through the files, (z)cat them into a combined audit.log
      with open(combined_log_file, 'ab') as log:
          for logfile in sorted(
                  glob.glob(download_path + '*kube-apiserver-audit*'), reverse=True):
              if logfile.endswith('z'):
                  subprocess.run(['zcat', logfile], stdout=log, check=True)
              else:
                  subprocess.run(['cat', logfile], stdout=log, check=True)
      # Load the resulting combined audit.log directly into raw_audit_events
      try:
          sql = Template("""CREATE TEMPORARY TABLE raw_audit_events_import (data jsonb not null) ;
          copy raw_audit_events_import (data)
          FROM PROGRAM '${cat}' (DELIMITER e'\x02', FORMAT 'csv', QUOTE e'\x01');
          INSERT INTO raw_audit_events(data, bucket, job)
          SELECT data, '${bucket}', '${job}'
          FROM raw_audit_events_import;
          """).substitute(
              cat = f'cat {combined_log_file}',
              bucket = bucket,
              job = job
          )
          with open(download_path + 'load.sql', 'w') as sqlfile:
            sqlfile.write(sql)
          rv = plpy.execute(sql)
          return "it worked"
      except plpy.SPIError:
          return "something went wrong with plpy"
      except:
          return "something unknown went wrong"
  if __name__ == "__main__":
      load_audit_events('ci-kubernetes-e2e-gci-gce','1134962072287711234')
  else:
      load_audit_events(bucket,job)
#+END_SRC

#+NAME: min_load_audit_events.py
#+BEGIN_SRC python :tangle min_load_audit_events.py
  return f'{bucket} + {job}'
  # from urllib.request import urlopen, urlretrieve
  # import os
  # import re
  # from bs4 import BeautifulSoup
  # import subprocess
  # import time
  # import glob
  # from tempfile import mkdtemp
  # from string import Template
  # return "WERAN"
#+END_SRC

#+RESULTS: min_load_audit_events.py

#+NAME: load_audit_events.sql
#+BEGIN_SRC sql-mode :noweb yes :tangle ../apps/hasura/migrations/245_function_load_audit_events.up.sql :results silent
  set role dba;
  CREATE OR REPLACE FUNCTION load_audit_events(bucket text, job text)
  RETURNS text AS $$
  <<load_audit_events.py>>
  $$ LANGUAGE plpython3u ;
  reset role;
#+END_SRC

#+BEGIN_SRC sql-mode
\df load_audit_events
#+END_SRC

#+RESULTS:
#+begin_src sql-mode
                              List of functions
 Schema |       Name        | Result data type |  Argument data types  | Type 
--------+-------------------+------------------+-----------------------+------
 public | load_audit_events | text             | bucket text, job text | func
(1 row)

#+end_src


#+BEGIN_SRC sql-mode
  delete from raw_audit_events;
#+END_SRC

#+RESULTS:
#+begin_src sql-mode
DELETE 0
#+end_src


#+NAME: reload sample audit event
#+BEGIN_SRC sql-mode :noweb yes :tangle ../apps/hasura/migrations/250_populate_audit_events.up.sql
  select * from load_audit_events('ci-kubernetes-e2e-gci-gce','1134962072287711234');
  -- select * from load_swagger_via_curl('release-1.15');
  -- select * from load_swagger_via_curl('release-1.14');
  -- select * from load_swagger_via_curl('release-1.13');
  -- select * from load_swagger_via_curl('release-1.12');
  -- select * from load_swagger_via_curl('release-1.11');
  -- select * from load_swagger_via_curl('release-1.10');
#+END_SRC

#+RESULTS: reload sample audit event
#+begin_src sql-mode
 load_audit_events 
-------------------
 
(1 row)

#+end_src

#+BEGIN_SRC sql-mode
  select count(*) from raw_audit_events;
#+END_SRC

#+RESULTS:
#+begin_src sql-mode
 count 
-------
     0
(1 row)

#+end_src


** load audit_events_via local cli

#+BEGIN_SRC sql-mode
  \d raw_audit_events;
  -- delete from raw_audit_events;
#+END_SRC

#+RESULTS:
#+begin_src sql-mode
                                   Table "public.raw_audit_events"
   Column    |            Type             | Collation | Nullable |             Default              
-------------+-----------------------------+-----------+----------+----------------------------------
 id          | integer                     |           | not null | generated by default as identity
 ingested_at | timestamp without time zone |           |          | CURRENT_TIMESTAMP
 bucket      | text                        |           |          | 
 job         | text                        |           |          | 
 data        | jsonb                       |           | not null | 
Indexes:
    "raw_audit_events_pkey" PRIMARY KEY, btree (id)

#+end_src


#+NAME: load_audit_events.sh
#+BEGIN_SRC shell :var AUDIT_LOG="../data/artifacts/ci-kubernetes-e2e-gci-gce/1134962072287711234/combined-audit.log"
  BUCKET='ci-kubernetes-e2e-gci-gce'
  JOB='1134962072287711234'
  SQL="
  CREATE TEMPORARY TABLE raw_audit_events_import (data jsonb not null) ;
  copy raw_audit_events_import (data)
  FROM STDIN (DELIMITER e'\x02', FORMAT 'csv', QUOTE e'\x01');
  INSERT INTO raw_audit_events(data, bucket, job)
  SELECT data, '$BUCKET', '$JOB'
  FROM raw_audit_events_import;
  "
  cat $AUDIT_LOG | psql -c "$SQL"
  date
#+END_SRC

#+RESULTS: load_audit_events.sh
#+begin_EXAMPLE
INSERT 0 313431
Thu Aug  8 01:14:52 UTC 2019
#+end_EXAMPLE

#+BEGIN_SRC sql-mode
  select distinct bucket, job from raw_audit_events;
#+END_SRC

#+RESULTS:
#+begin_src sql-mode
 bucket  | job  
---------+------
 bucket1 | job1
(1 row)

#+end_src

#+BEGIN_SRC sql-mode
\dt+
#+END_SRC

#+RESULTS:
#+begin_src sql-mode
                          List of relations
 Schema |       Name       | Type  | Owner |    Size    | Description 
--------+------------------+-------+-------+------------+-------------
 public | audit_events     | table | zz    | 8192 bytes | 
 public | raw_audit_events | table | zz    | 376 MB     | 
 public | raw_swaggers     | table | zz    | 1752 kB    | 
(3 rows)

#+end_src

* Audit Events View

** event_verb_to_http_method

#+BEGIN_SRC sql-mode :tangle ../apps/hasura/migrations/222_function_verb_to_method.up.sql :results silent
  CREATE FUNCTION event_verb_to_http_method(verb text) RETURNS text as $$
  BEGIN
    CASE
    WHEN verb = 'get' OR
         verb = 'list' OR
         verb = 'proxy'
    THEN return 'get' ;

    WHEN verb = 'deletecollection' OR
         verb = 'delete'
    THEN return 'delete' ;

    WHEN verb = 'watch' OR
         verb = 'watchlist'
    THEN return 'watch' ;

    WHEN verb = 'create'
    THEN return 'post' ;

    WHEN verb = 'update'
    THEN return 'put' ;

    WHEN verb = 'patch'
    THEN return 'patch' ;

    ELSE return null ;
    END CASE;
  END;
  $$ LANGUAGE plpgsql;
#+END_SRC

#+BEGIN_SRC sql-mode
select * from event_verb_to_http_method('proxy');
-- select * from event_verb_to_http_method('deletecollection');
#+END_SRC

#+RESULTS:
#+begin_src sql-mode
 event_verb_to_http_method 
---------------------------
 get
(1 row)

#+end_src


** Initial View
   #+BEGIN_SRC sql-mode :tangle ../apps/hasura/migrations/225_material_audit_events.up.sql :results silent
     -- CREATE MATERIALIZED VIEW "public"."audit_events_material" AS
     CREATE OR REPLACE VIEW "public"."audit_events" AS
       SELECT (raw.data ->> 'auditID') as audit_id,
              raw.bucket,
              raw.job,
              raw.data ->> 'level' as event_level,
              raw.data ->> 'stage' as event_stage,
              ops.operation_id,
              ops.k8s_action,
              ops.http_method,
              -- event_verb_to_http_method(raw.data ->> 'verb') AS operation_verb,
              ops.path as op_path,
              raw.data ->> 'verb' as event_verb,
              raw.data ->> 'apiVersion' as api_version,
              raw.data ->> 'requestURI' as request_uri,
              -- Always "Event"
              -- raw.data ->> 'kind' as kind,
              raw.data ->> 'userAgent' as useragent,
              raw.data -> 'user' as event_user,
              raw.data #>> '{objectRef,namespace}' as object_namespace,
              raw.data #>> '{objectRef,resource}' as object_type,
              raw.data #>> '{objectRef,apiGroup}' as object_group,
              raw.data #>> '{objectRef,apiVersion}' as object_ver,
              raw.data -> 'sourceIPs' as source_ips,
              raw.data -> 'annotations' as annotations,
              raw.data -> 'requestObject' as request_object,
              raw.data -> 'responseObject' as response_object,
              raw.data -> 'responseStatus' as response_status,
              raw.data ->> 'stageTimestamp' as stage_timestamp,
              raw.data ->> 'requestReceivedTimestamp' as request_received_timestamp,
              raw.data as data
       FROM raw_audit_events raw
       JOIN api_operations ops ON
            -- of done in order, this should limit our regex to < 5 targets to compare
         -- raw.data ->> 'requestURI' ~ ops.regex;
              ((event_verb_to_http_method(raw.data ->> 'verb'::text) = ops.http_method)
              AND raw.data ->> 'requestURI' ~ ops.regex);
            -- OR raw.data ->> 'requestURI' ~ ops.regex;
        -- WITH NO DATA;
   #+END_SRC

** audit_event indexes

   #+BEGIN_SRC sql-mode
   SELECT event_verb, http_method, k8s_action, operation_id, object_group, object_ver, object_type
   FROM audit_events
   where true
   -- and resource_ver not like '%beta%'
   and event_verb not like 'patch'
   and event_verb not like 'deletecollection'
   and event_verb not like 'delete' -- everything is delete
   and event_verb not like 'list'
   and event_verb not like 'get'
   -- and event_verb not like 'create'
   and event_verb not like 'update'
   and object_type = 'pods'
   and not operation_id = 'createCoreV1NamespacedPod'
   and not operation_id = 'connectCoreV1PostNamespacedPodAttach'
   and not operation_id = 'createCoreV1NamespacedPodBinding'
   and not operation_id = 'createCoreV1NamespacedPodEviction'
   and not operation_id = 'connectCoreV1PostNamespacedPodExec'
   and not operation_id = 'connectCoreV1PostNamespacedPodPortforward'
   -- and event_verb = 'create'
   -- order by operation_id
   LIMIT 300;
   #+END_SRC

   #+RESULTS:
   #+begin_src sql-mode
    event_verb | http_method | k8s_action |               operation_id                | object_group | object_ver | object_type 
   ------------+-------------+------------+-------------------------------------------+--------------+------------+-------------
    create     | post        | connect    | connectCoreV1PostNamespacedPodPortforward |              | v1         | pods
    create     | post        | connect    | connectCoreV1PostNamespacedPodPortforward |              | v1         | pods
    create     | post        | connect    | connectCoreV1PostNamespacedPodPortforward |              | v1         | pods
    create     | post        | connect    | connectCoreV1PostNamespacedPodPortforward |              | v1         | pods
    create     | post        | connect    | connectCoreV1PostNamespacedPodPortforward |              | v1         | pods
    create     | post        | connect    | connectCoreV1PostNamespacedPodPortforward |              | v1         | pods
    create     | post        | connect    | connectCoreV1PostNamespacedPodPortforward |              | v1         | pods
    create     | post        | connect    | connectCoreV1PostNamespacedPodPortforward |              | v1         | pods
    create     | post        | connect    | connectCoreV1PostNamespacedPodPortforward |              | v1         | pods
    create     | post        | connect    | connectCoreV1PostNamespacedPodPortforward |              | v1         | pods
    create     | post        | connect    | connectCoreV1PostNamespacedPodPortforward |              | v1         | pods
    create     | post        | connect    | connectCoreV1PostNamespacedPodPortforward |              | v1         | pods
    create     | post        | connect    | connectCoreV1PostNamespacedPodPortforward |              | v1         | pods
    create     | post        | connect    | connectCoreV1PostNamespacedPodPortforward |              | v1         | pods
   (14 rows)

   #+end_src

   #+BEGIN_SRC sql-mode :results silent
     -- CREATE MATERIALIZED VIEW "public"."audit_events_podspec" AS
     CREATE OR REPLACE VIEW "public"."audit_events_podspec" AS
       SELECT (raw.data ->> 'auditID') as audit_id,
              raw.bucket,
              raw.job,
              raw.data ->> 'level' as event_level,
              raw.data ->> 'stage' as event_stage,
              ops.operation_id,
              ops.http_method,
              ops.k8s_action,
              raw.data ->> 'verb' as event_verb,
              raw.data ->> 'apiVersion' as api_version,
              raw.data ->> 'requestURI' as request_uri,
              -- Always "Event"
              -- raw.data ->> 'kind' as kind,
              raw.data ->> 'userAgent' as useragent,
              raw.data -> 'user' as event_user,
              raw.data -> 'objectRef' ->> 'namespace' as object_namespace,
              raw.data -> 'objectRef' ->> 'resource' as object_type,
              raw.data -> 'objectRef' ->> 'apiGroup' as object_group,
              raw.data -> 'objectRef' ->> 'apiVersion' as object_ver,
              raw.data -> 'sourceIPs' as source_ips,
              raw.data -> 'annotations' as annotations,
              raw.data -> 'requestObject' as request_object,
              raw.data -> 'responseObject' as response_object,
              raw.data -> 'responseStatus' as response_status,
              raw.data ->> 'stageTimestamp' as stage_timestamp,
              raw.data ->> 'requestReceivedTimestamp' as request_received_timestamp,
              raw.data as data
       FROM raw_audit_events raw
       JOIN api_operations ops ON
            -- of done in order, this should limit our regex to < 5 targets to compare
         raw.data ->> 'requestURI' ~ ops.regex;
        --     raw.data ->> 'verb'       = ops.k8s_action
        -- AND raw.data ->> 'requestURI' ~ ops.regex;
        -- WITH NO DATA;
   #+END_SRC

#+BEGIN_SRC sql-mode
   SELECT event_verb, http_method, k8s_action, operation_id, object_group, object_ver, object_type
   FROM audit_events_podspec
   where true
   -- and resource_ver not like '%beta%'
   and event_verb not like 'patch'
   and event_verb not like 'deletecollection'
   and event_verb not like 'delete'
   and event_verb not like 'list'
   and event_verb not like 'get'
   -- and event_verb = 'create'
   LIMIT 300;
   #+END_SRC

   #+RESULTS:
   #+begin_src sql-mode
    event_verb | http_method |    k8s_action    |                         operation_id                          |       object_group        | object_ver |     object_type      
   ------------+-------------+------------------+---------------------------------------------------------------+---------------------------+------------+----------------------
    watch      | delete      | deletecollection | deleteCoreV1CollectionNamespacedServiceAccount                |                           | v1         | serviceaccounts
    watch      | get         | list             | listCoreV1NamespacedServiceAccount                            |                           | v1         | serviceaccounts
    watch      | post        | post             | createCoreV1NamespacedServiceAccount                          |                           | v1         | serviceaccounts
    create     | delete      | deletecollection | deleteRbacAuthorizationV1beta1CollectionNamespacedRoleBinding | rbac.authorization.k8s.io | v1beta1    | rolebindings
    create     | get         | list             | listRbacAuthorizationV1beta1NamespacedRoleBinding             | rbac.authorization.k8s.io | v1beta1    | rolebindings
    create     | post        | post             | createRbacAuthorizationV1beta1NamespacedRoleBinding           | rbac.authorization.k8s.io | v1beta1    | rolebindings
    create     | delete      | deletecollection | deleteCoreV1CollectionNamespacedSecret                        |                           | v1         | secrets
    create     | get         | list             | listCoreV1NamespacedSecret                                    |                           | v1         | secrets
    create     | post        | post             | createCoreV1NamespacedSecret                                  |                           | v1         | secrets
    create     | delete      | deletecollection | deleteCoreV1CollectionNamespacedPod                           |                           | v1         | pods
    create     | get         | list             | listCoreV1NamespacedPod                                       |                           | v1         | pods
    create     | post        | post             | createCoreV1NamespacedPod                                     |                           | v1         | pods
    create     | post        | post             | createAuthorizationV1beta1SubjectAccessReview                 | authorization.k8s.io      | v1beta1    | subjectaccessreviews
    update     | get         | get              | readAppsV1NamespacedStatefulSetStatus                         | apps                      | v1         | statefulsets
    update     | patch       | patch            | patchAppsV1NamespacedStatefulSetStatus                        | apps                      | v1         | statefulsets
    update     | put         | put              | replaceAppsV1NamespacedStatefulSetStatus                      | apps                      | v1         | statefulsets
    create     | post        | post             | createCoreV1NamespacedPodBinding                              |                           | v1         | pods
    create     | delete      | deletecollection | deleteCoreV1CollectionNamespacedSecret                        |                           | v1         | secrets
    create     | get         | list             | listCoreV1NamespacedSecret                                    |                           | v1         | secrets
    create     | post        | post             | createCoreV1NamespacedSecret                                  |                           | v1         | secrets
    create     | get         | list             | listCoreV1Namespace                                           |                           | v1         | namespaces
    create     | post        | post             | createCoreV1Namespace                                         |                           | v1         | namespaces
    watch      | delete      | deletecollection | deleteCoreV1CollectionNamespacedServiceAccount                |                           | v1         | serviceaccounts
    watch      | get         | list             | listCoreV1NamespacedServiceAccount                            |                           | v1         | serviceaccounts
    watch      | post        | post             | createCoreV1NamespacedServiceAccount                          |                           | v1         | serviceaccounts
    create     | get         | connect          | connectCoreV1GetNamespacedPodExec                             |                           | v1         | pods
    create     | post        | connect          | connectCoreV1PostNamespacedPodExec                            |                           | v1         | pods
    watch      | delete      | deletecollection | deleteCoreV1CollectionNamespacedServiceAccount                |                           | v1         | serviceaccounts
    watch      | get         | list             | listCoreV1NamespacedServiceAccount                            |                           | v1         | serviceaccounts
    watch      | post        | post             | createCoreV1NamespacedServiceAccount                          |                           | v1         | serviceaccounts
    watch      | delete      | deletecollection | deleteCoreV1CollectionNamespacedServiceAccount                |                           | v1         | serviceaccounts
    watch      | get         | list             | listCoreV1NamespacedServiceAccount                            |                           | v1         | serviceaccounts
    watch      | post        | post             | createCoreV1NamespacedServiceAccount                          |                           | v1         | serviceaccounts
    create     | delete      | deletecollection | deleteCoreV1CollectionNamespacedServiceAccount                |                           | v1         | serviceaccounts
    create     | get         | list             | listCoreV1NamespacedServiceAccount                            |                           | v1         | serviceaccounts
    create     | post        | post             | createCoreV1NamespacedServiceAccount                          |                           | v1         | serviceaccounts
    watch      | delete      | deletecollection | deleteCoreV1CollectionNamespacedConfigMap                     |                           | v1         | configmaps
    watch      | get         | list             | listCoreV1NamespacedConfigMap                                 |                           | v1         | configmaps
    watch      | post        | post             | createCoreV1NamespacedConfigMap                               |                           | v1         | configmaps
    create     | delete      | deletecollection | deleteCoreV1CollectionNamespacedSecret                        |                           | v1         | secrets
    create     | get         | list             | listCoreV1NamespacedSecret                                    |                           | v1         | secrets
    create     | post        | post             | createCoreV1NamespacedSecret                                  |                           | v1         | secrets
    create     | delete      | deletecollection | deleteCoreV1CollectionNamespacedSecret                        |                           | v1         | secrets
    create     | get         | list             | listCoreV1NamespacedSecret                                    |                           | v1         | secrets
    create     | post        | post             | createCoreV1NamespacedSecret                                  |                           | v1         | secrets
    update     | delete      | delete           | deleteCoreV1NamespacedServiceAccount                          |                           | v1         | serviceaccounts
    update     | get         | get              | readCoreV1NamespacedServiceAccount                            |                           | v1         | serviceaccounts
    update     | patch       | patch            | patchCoreV1NamespacedServiceAccount                           |                           | v1         | serviceaccounts
    update     | put         | put              | replaceCoreV1NamespacedServiceAccount                         |                           | v1         | serviceaccounts
    update     | put         | put              | replaceCoreV1NamespaceFinalize                                |                           | v1         | namespaces
    watch      | delete      | deletecollection | deleteCoreV1CollectionNamespacedServiceAccount                |                           | v1         | serviceaccounts
    watch      | get         | list             | listCoreV1NamespacedServiceAccount                            |                           | v1         | serviceaccounts
    watch      | post        | post             | createCoreV1NamespacedServiceAccount                          |                           | v1         | serviceaccounts
    create     | delete      | deletecollection | deleteRbacAuthorizationV1beta1CollectionNamespacedRoleBinding | rbac.authorization.k8s.io | v1beta1    | rolebindings
    create     | get         | list             | listRbacAuthorizationV1beta1NamespacedRoleBinding             | rbac.authorization.k8s.io | v1beta1    | rolebindings
    create     | post        | post             | createRbacAuthorizationV1beta1NamespacedRoleBinding           | rbac.authorization.k8s.io | v1beta1    | rolebindings
    watch      | delete      | deletecollection | deleteCoreV1CollectionNamespacedSecret                        |                           | v1         | secrets
    watch      | get         | list             | listCoreV1NamespacedSecret                                    |                           | v1         | secrets
    watch      | post        | post             | createCoreV1NamespacedSecret                                  |                           | v1         | secrets
    watch      | delete      | deletecollection | deleteCoreV1CollectionNamespacedSecret                        |                           | v1         | secrets
    watch      | get         | list             | listCoreV1NamespacedSecret                                    |                           | v1         | secrets
    watch      | post        | post             | createCoreV1NamespacedSecret                                  |                           | v1         | secrets
    create     | delete      | deletecollection | deleteCoreV1CollectionNamespacedPod                           |                           | v1         | pods
    create     | get         | list             | listCoreV1NamespacedPod                                       |                           | v1         | pods
    create     | post        | post             | createCoreV1NamespacedPod                                     |                           | v1         | pods
    create     | get         | connect          | connectCoreV1GetNamespacedPodExec                             |                           | v1         | pods
    create     | post        | connect          | connectCoreV1PostNamespacedPodExec                            |                           | v1         | pods
    create     | delete      | deletecollection | deleteCoreV1CollectionNamespacedSecret                        |                           | v1         | secrets
    create     | get         | list             | listCoreV1NamespacedSecret                                    |                           | v1         | secrets
    create     | post        | post             | createCoreV1NamespacedSecret                                  |                           | v1         | secrets
    create     | post        | post             | createAuthorizationV1beta1SubjectAccessReview                 | authorization.k8s.io      | v1beta1    | subjectaccessreviews
    update     | put         | put              | replaceCoreV1NamespaceFinalize                                |                           | v1         | namespaces
    watch      | delete      | deletecollection | deleteCoreV1CollectionNamespacedSecret                        |                           | v1         | secrets
    watch      | get         | list             | listCoreV1NamespacedSecret                                    |                           | v1         | secrets
    watch      | post        | post             | createCoreV1NamespacedSecret                                  |                           | v1         | secrets
    watch      | delete      | deletecollection | deleteCoreV1CollectionNamespacedServiceAccount                |                           | v1         | serviceaccounts
    watch      | get         | list             | listCoreV1NamespacedServiceAccount                            |                           | v1         | serviceaccounts
    watch      | post        | post             | createCoreV1NamespacedServiceAccount                          |                           | v1         | serviceaccounts
    watch      | delete      | deletecollection | deleteCoreV1CollectionNamespacedServiceAccount                |                           | v1         | serviceaccounts
    watch      | get         | list             | listCoreV1NamespacedServiceAccount                            |                           | v1         | serviceaccounts
    watch      | post        | post             | createCoreV1NamespacedServiceAccount                          |                           | v1         | serviceaccounts
    update     | put         | put              | replaceCoreV1NamespaceFinalize                                |                           | v1         | namespaces
    create     | delete      | deletecollection | deleteCoreV1CollectionNamespacedSecret                        |                           | v1         | secrets
    create     | get         | list             | listCoreV1NamespacedSecret                                    |                           | v1         | secrets
    create     | post        | post             | createCoreV1NamespacedSecret                                  |                           | v1         | secrets
    create     | delete      | deletecollection | deleteCoreV1CollectionNamespacedSecret                        |                           | v1         | secrets
    create     | get         | list             | listCoreV1NamespacedSecret                                    |                           | v1         | secrets
    create     | post        | post             | createCoreV1NamespacedSecret                                  |                           | v1         | secrets
    create     | get         | list             | listCoreV1Namespace                                           |                           | v1         | namespaces
    create     | post        | post             | createCoreV1Namespace                                         |                           | v1         | namespaces
    watch      | delete      | deletecollection | deleteCoreV1CollectionNamespacedSecret                        |                           | v1         | secrets
    watch      | get         | list             | listCoreV1NamespacedSecret                                    |                           | v1         | secrets
    watch      | post        | post             | createCoreV1NamespacedSecret                                  |                           | v1         | secrets
    create     | delete      | deletecollection | deleteCoreV1CollectionNamespacedServiceAccount                |                           | v1         | serviceaccounts
    create     | get         | list             | listCoreV1NamespacedServiceAccount                            |                           | v1         | serviceaccounts
    create     | post        | post             | createCoreV1NamespacedServiceAccount                          |                           | v1         | serviceaccounts
    watch      | delete      | deletecollection | deleteCoreV1CollectionNamespacedServiceAccount                |                           | v1         | serviceaccounts
    watch      | get         | list             | listCoreV1NamespacedServiceAccount                            |                           | v1         | serviceaccounts
    watch      | post        | post             | createCoreV1NamespacedServiceAccount                          |                           | v1         | serviceaccounts
    update     | delete      | delete           | deleteCoreV1NamespacedServiceAccount                          |                           | v1         | serviceaccounts
    update     | get         | get              | readCoreV1NamespacedServiceAccount                            |                           | v1         | serviceaccounts
    update     | patch       | patch            | patchCoreV1NamespacedServiceAccount                           |                           | v1         | serviceaccounts
    update     | put         | put              | replaceCoreV1NamespacedServiceAccount                         |                           | v1         | serviceaccounts
    watch      | delete      | deletecollection | deleteCoreV1CollectionNamespacedServiceAccount                |                           | v1         | serviceaccounts
    watch      | get         | list             | listCoreV1NamespacedServiceAccount                            |                           | v1         | serviceaccounts
    watch      | post        | post             | createCoreV1NamespacedServiceAccount                          |                           | v1         | serviceaccounts
    watch      | delete      | deletecollection | deleteCoreV1CollectionNamespacedSecret                        |                           | v1         | secrets
    watch      | get         | list             | listCoreV1NamespacedSecret                                    |                           | v1         | secrets
    watch      | post        | post             | createCoreV1NamespacedSecret                                  |                           | v1         | secrets
    create     | delete      | deletecollection | deleteRbacAuthorizationV1beta1CollectionNamespacedRoleBinding | rbac.authorization.k8s.io | v1beta1    | rolebindings
    create     | get         | list             | listRbacAuthorizationV1beta1NamespacedRoleBinding             | rbac.authorization.k8s.io | v1beta1    | rolebindings
    create     | post        | post             | createRbacAuthorizationV1beta1NamespacedRoleBinding           | rbac.authorization.k8s.io | v1beta1    | rolebindings
    update     | delete      | delete           | deleteCoordinationV1beta1NamespacedLease                      | coordination.k8s.io       | v1beta1    | leases
    update     | get         | get              | readCoordinationV1beta1NamespacedLease                        | coordination.k8s.io       | v1beta1    | leases
    update     | patch       | patch            | patchCoordinationV1beta1NamespacedLease                       | coordination.k8s.io       | v1beta1    | leases
    update     | put         | put              | replaceCoordinationV1beta1NamespacedLease                     | coordination.k8s.io       | v1beta1    | leases
    create     | post        | post             | createAuthorizationV1beta1SubjectAccessReview                 | authorization.k8s.io      | v1beta1    | subjectaccessreviews
    update     | delete      | delete           | deleteCoordinationV1beta1NamespacedLease                      | coordination.k8s.io       | v1beta1    | leases
    update     | get         | get              | readCoordinationV1beta1NamespacedLease                        | coordination.k8s.io       | v1beta1    | leases
    update     | patch       | patch            | patchCoordinationV1beta1NamespacedLease                       | coordination.k8s.io       | v1beta1    | leases
    update     | put         | put              | replaceCoordinationV1beta1NamespacedLease                     | coordination.k8s.io       | v1beta1    | leases
    watch      | delete      | deletecollection | deleteCoreV1CollectionNamespacedServiceAccount                |                           | v1         | serviceaccounts
    watch      | get         | list             | listCoreV1NamespacedServiceAccount                            |                           | v1         | serviceaccounts
    watch      | post        | post             | createCoreV1NamespacedServiceAccount                          |                           | v1         | serviceaccounts
    watch      | delete      | deletecollection | deleteCoreV1CollectionNamespacedServiceAccount                |                           | v1         | serviceaccounts
    watch      | get         | list             | listCoreV1NamespacedServiceAccount                            |                           | v1         | serviceaccounts
    watch      | post        | post             | createCoreV1NamespacedServiceAccount                          |                           | v1         | serviceaccounts
    create     | delete      | deletecollection | deleteRbacAuthorizationV1beta1CollectionClusterRoleBinding    | rbac.authorization.k8s.io | v1beta1    | clusterrolebindings
    create     | get         | list             | listRbacAuthorizationV1beta1ClusterRoleBinding                | rbac.authorization.k8s.io | v1beta1    | clusterrolebindings
    create     | post        | post             | createRbacAuthorizationV1beta1ClusterRoleBinding              | rbac.authorization.k8s.io | v1beta1    | clusterrolebindings
    create     | post        | post             | createAuthorizationV1beta1SubjectAccessReview                 | authorization.k8s.io      | v1beta1    | subjectaccessreviews
    create     | delete      | deletecollection | deleteCoreV1CollectionNamespacedPod                           |                           | v1         | pods
    create     | get         | list             | listCoreV1NamespacedPod                                       |                           | v1         | pods
    create     | post        | post             | createCoreV1NamespacedPod                                     |                           | v1         | pods
    watch      | delete      | deletecollection | deleteCoreV1CollectionNamespacedSecret                        |                           | v1         | secrets
    watch      | get         | list             | listCoreV1NamespacedSecret                                    |                           | v1         | secrets
    watch      | post        | post             | createCoreV1NamespacedSecret                                  |                           | v1         | secrets
    create     | post        | post             | createCoreV1NamespacedPodBinding                              |                           | v1         | pods
    update     | get         | get              | readBatchV1NamespacedJobStatus                                | batch                     | v1         | jobs
    update     | patch       | patch            | patchBatchV1NamespacedJobStatus                               | batch                     | v1         | jobs
    update     | put         | put              | replaceBatchV1NamespacedJobStatus                             | batch                     | v1         | jobs
    update     | delete      | delete           | deleteCoordinationV1beta1NamespacedLease                      | coordination.k8s.io       | v1beta1    | leases
    update     | get         | get              | readCoordinationV1beta1NamespacedLease                        | coordination.k8s.io       | v1beta1    | leases
    update     | patch       | patch            | patchCoordinationV1beta1NamespacedLease                       | coordination.k8s.io       | v1beta1    | leases
    update     | put         | put              | replaceCoordinationV1beta1NamespacedLease                     | coordination.k8s.io       | v1beta1    | leases
    update     | delete      | delete           | deleteCoordinationV1beta1NamespacedLease                      | coordination.k8s.io       | v1beta1    | leases
    update     | get         | get              | readCoordinationV1beta1NamespacedLease                        | coordination.k8s.io       | v1beta1    | leases
    update     | patch       | patch            | patchCoordinationV1beta1NamespacedLease                       | coordination.k8s.io       | v1beta1    | leases
    update     | put         | put              | replaceCoordinationV1beta1NamespacedLease                     | coordination.k8s.io       | v1beta1    | leases
    create     | delete      | deletecollection | deleteCoreV1CollectionNamespacedPod                           |                           | v1         | pods
    create     | get         | list             | listCoreV1NamespacedPod                                       |                           | v1         | pods
    create     | post        | post             | createCoreV1NamespacedPod                                     |                           | v1         | pods
    create     | post        | post             | createCoreV1NamespacedPodBinding                              |                           | v1         | pods
    watch      | delete      | deletecollection | deleteCoreV1CollectionNamespacedSecret                        |                           | v1         | secrets
    watch      | get         | list             | listCoreV1NamespacedSecret                                    |                           | v1         | secrets
    watch      | post        | post             | createCoreV1NamespacedSecret                                  |                           | v1         | secrets
    watch      | delete      | deletecollection | deleteCoreV1CollectionNamespacedSecret                        |                           | v1         | secrets
    watch      | get         | list             | listCoreV1NamespacedSecret                                    |                           | v1         | secrets
    watch      | post        | post             | createCoreV1NamespacedSecret                                  |                           | v1         | secrets
    update     | delete      | delete           | deleteCoordinationV1beta1NamespacedLease                      | coordination.k8s.io       | v1beta1    | leases
    update     | get         | get              | readCoordinationV1beta1NamespacedLease                        | coordination.k8s.io       | v1beta1    | leases
    update     | patch       | patch            | patchCoordinationV1beta1NamespacedLease                       | coordination.k8s.io       | v1beta1    | leases
    update     | put         | put              | replaceCoordinationV1beta1NamespacedLease                     | coordination.k8s.io       | v1beta1    | leases
    watch      | delete      | deletecollection | deleteCoreV1CollectionNamespacedSecret                        |                           | v1         | secrets
    watch      | get         | list             | listCoreV1NamespacedSecret                                    |                           | v1         | secrets
    watch      | post        | post             | createCoreV1NamespacedSecret                                  |                           | v1         | secrets
    update     | delete      | delete           | deleteCoreV1NamespacedConfigMap                               |                           | v1         | configmaps
    update     | get         | get              | readCoreV1NamespacedConfigMap                                 |                           | v1         | configmaps
    update     | patch       | patch            | patchCoreV1NamespacedConfigMap                                |                           | v1         | configmaps
    update     | put         | put              | replaceCoreV1NamespacedConfigMap                              |                           | v1         | configmaps
    update     | put         | put              | replaceCoreV1NamespaceFinalize                                |                           | v1         | namespaces
    create     | delete      | deletecollection | deleteCoreV1CollectionNamespacedPod                           |                           | v1         | pods
    create     | get         | list             | listCoreV1NamespacedPod                                       |                           | v1         | pods
    create     | post        | post             | createCoreV1NamespacedPod                                     |                           | v1         | pods
    watch      | delete      | deletecollection | deleteCoreV1CollectionNamespacedSecret                        |                           | v1         | secrets
    watch      | get         | list             | listCoreV1NamespacedSecret                                    |                           | v1         | secrets
    watch      | post        | post             | createCoreV1NamespacedSecret                                  |                           | v1         | secrets
    update     | put         | put              | replaceCoreV1NamespaceFinalize                                |                           | v1         | namespaces
    update     | delete      | delete           | deleteCoreV1NamespacedServiceAccount                          |                           | v1         | serviceaccounts
    update     | get         | get              | readCoreV1NamespacedServiceAccount                            |                           | v1         | serviceaccounts
    update     | patch       | patch            | patchCoreV1NamespacedServiceAccount                           |                           | v1         | serviceaccounts
    update     | put         | put              | replaceCoreV1NamespacedServiceAccount                         |                           | v1         | serviceaccounts
    create     | delete      | deletecollection | deleteCoreV1CollectionNamespacedSecret                        |                           | v1         | secrets
    create     | get         | list             | listCoreV1NamespacedSecret                                    |                           | v1         | secrets
    create     | post        | post             | createCoreV1NamespacedSecret                                  |                           | v1         | secrets
    create     | delete      | deletecollection | deleteCoreV1CollectionNamespacedSecret                        |                           | v1         | secrets
    create     | get         | list             | listCoreV1NamespacedSecret                                    |                           | v1         | secrets
    create     | post        | post             | createCoreV1NamespacedSecret                                  |                           | v1         | secrets
    create     | delete      | deletecollection | deleteCoreV1CollectionNamespacedSecret                        |                           | v1         | secrets
    create     | get         | list             | listCoreV1NamespacedSecret                                    |                           | v1         | secrets
    create     | post        | post             | createCoreV1NamespacedSecret                                  |                           | v1         | secrets
    create     | delete      | deletecollection | deleteCoreV1CollectionNamespacedSecret                        |                           | v1         | secrets
    create     | get         | list             | listCoreV1NamespacedSecret                                    |                           | v1         | secrets
    create     | post        | post             | createCoreV1NamespacedSecret                                  |                           | v1         | secrets
    watch      | delete      | deletecollection | deleteCoreV1CollectionNamespacedSecret                        |                           | v1         | secrets
    watch      | get         | list             | listCoreV1NamespacedSecret                                    |                           | v1         | secrets
    watch      | post        | post             | createCoreV1NamespacedSecret                                  |                           | v1         | secrets
    create     | delete      | deletecollection | deleteCoreV1CollectionNamespacedSecret                        |                           | v1         | secrets
    create     | get         | list             | listCoreV1NamespacedSecret                                    |                           | v1         | secrets
    create     | post        | post             | createCoreV1NamespacedSecret                                  |                           | v1         | secrets
    watch      | delete      | deletecollection | deleteCoreV1CollectionNamespacedSecret                        |                           | v1         | secrets
    watch      | get         | list             | listCoreV1NamespacedSecret                                    |                           | v1         | secrets
    watch      | post        | post             | createCoreV1NamespacedSecret                                  |                           | v1         | secrets
    update     | get         | get              | readBatchV1beta1NamespacedCronJobStatus                       | batch                     | v1beta1    | cronjobs
    update     | patch       | patch            | patchBatchV1beta1NamespacedCronJobStatus                      | batch                     | v1beta1    | cronjobs
    update     | put         | put              | replaceBatchV1beta1NamespacedCronJobStatus                    | batch                     | v1beta1    | cronjobs
    update     | get         | get              | readBatchV1beta1NamespacedCronJobStatus                       | batch                     | v1beta1    | cronjobs
    update     | patch       | patch            | patchBatchV1beta1NamespacedCronJobStatus                      | batch                     | v1beta1    | cronjobs
    update     | put         | put              | replaceBatchV1beta1NamespacedCronJobStatus                    | batch                     | v1beta1    | cronjobs
    update     | get         | get              | readBatchV1beta1NamespacedCronJobStatus                       | batch                     | v1beta1    | cronjobs
    update     | patch       | patch            | patchBatchV1beta1NamespacedCronJobStatus                      | batch                     | v1beta1    | cronjobs
    update     | put         | put              | replaceBatchV1beta1NamespacedCronJobStatus                    | batch                     | v1beta1    | cronjobs
    update     | get         | get              | readBatchV1beta1NamespacedCronJobStatus                       | batch                     | v1beta1    | cronjobs
    update     | patch       | patch            | patchBatchV1beta1NamespacedCronJobStatus                      | batch                     | v1beta1    | cronjobs
    update     | put         | put              | replaceBatchV1beta1NamespacedCronJobStatus                    | batch                     | v1beta1    | cronjobs
    update     | get         | get              | readBatchV1beta1NamespacedCronJobStatus                       | batch                     | v1beta1    | cronjobs
    update     | patch       | patch            | patchBatchV1beta1NamespacedCronJobStatus                      | batch                     | v1beta1    | cronjobs
    update     | put         | put              | replaceBatchV1beta1NamespacedCronJobStatus                    | batch                     | v1beta1    | cronjobs
    update     | get         | get              | readBatchV1beta1NamespacedCronJobStatus                       | batch                     | v1beta1    | cronjobs
    update     | patch       | patch            | patchBatchV1beta1NamespacedCronJobStatus                      | batch                     | v1beta1    | cronjobs
    update     | put         | put              | replaceBatchV1beta1NamespacedCronJobStatus                    | batch                     | v1beta1    | cronjobs
    update     | put         | put              | replaceCoreV1NamespaceFinalize                                |                           | v1         | namespaces
    create     | get         | list             | listCoreV1Namespace                                           |                           | v1         | namespaces
    create     | post        | post             | createCoreV1Namespace                                         |                           | v1         | namespaces
    create     | delete      | deletecollection | deleteCoreV1CollectionNamespacedServiceAccount                |                           | v1         | serviceaccounts
    create     | get         | list             | listCoreV1NamespacedServiceAccount                            |                           | v1         | serviceaccounts
    create     | post        | post             | createCoreV1NamespacedServiceAccount                          |                           | v1         | serviceaccounts
    create     | delete      | deletecollection | deleteCoreV1CollectionNamespacedSecret                        |                           | v1         | secrets
    create     | get         | list             | listCoreV1NamespacedSecret                                    |                           | v1         | secrets
    create     | post        | post             | createCoreV1NamespacedSecret                                  |                           | v1         | secrets
    watch      | delete      | deletecollection | deleteCoreV1CollectionNamespacedServiceAccount                |                           | v1         | serviceaccounts
    watch      | get         | list             | listCoreV1NamespacedServiceAccount                            |                           | v1         | serviceaccounts
    watch      | post        | post             | createCoreV1NamespacedServiceAccount                          |                           | v1         | serviceaccounts
    update     | delete      | delete           | deleteCoreV1NamespacedServiceAccount                          |                           | v1         | serviceaccounts
    update     | get         | get              | readCoreV1NamespacedServiceAccount                            |                           | v1         | serviceaccounts
    update     | patch       | patch            | patchCoreV1NamespacedServiceAccount                           |                           | v1         | serviceaccounts
    update     | put         | put              | replaceCoreV1NamespacedServiceAccount                         |                           | v1         | serviceaccounts
    watch      | delete      | deletecollection | deleteCoreV1CollectionNamespacedServiceAccount                |                           | v1         | serviceaccounts
    watch      | get         | list             | listCoreV1NamespacedServiceAccount                            |                           | v1         | serviceaccounts
    watch      | post        | post             | createCoreV1NamespacedServiceAccount                          |                           | v1         | serviceaccounts
    create     | delete      | deletecollection | deleteRbacAuthorizationV1beta1CollectionNamespacedRoleBinding | rbac.authorization.k8s.io | v1beta1    | rolebindings
    create     | get         | list             | listRbacAuthorizationV1beta1NamespacedRoleBinding             | rbac.authorization.k8s.io | v1beta1    | rolebindings
    create     | post        | post             | createRbacAuthorizationV1beta1NamespacedRoleBinding           | rbac.authorization.k8s.io | v1beta1    | rolebindings
    create     | post        | post             | createAuthorizationV1beta1SubjectAccessReview                 | authorization.k8s.io      | v1beta1    | subjectaccessreviews
    create     | get         | list             | listCoreV1Namespace                                           |                           | v1         | namespaces
    create     | post        | post             | createCoreV1Namespace                                         |                           | v1         | namespaces
    create     | delete      | deletecollection | deleteCoreV1CollectionNamespacedServiceAccount                |                           | v1         | serviceaccounts
    create     | get         | list             | listCoreV1NamespacedServiceAccount                            |                           | v1         | serviceaccounts
    create     | post        | post             | createCoreV1NamespacedServiceAccount                          |                           | v1         | serviceaccounts
    watch      | delete      | deletecollection | deleteCoreV1CollectionNamespacedServiceAccount                |                           | v1         | serviceaccounts
    watch      | get         | list             | listCoreV1NamespacedServiceAccount                            |                           | v1         | serviceaccounts
    watch      | post        | post             | createCoreV1NamespacedServiceAccount                          |                           | v1         | serviceaccounts
    create     | delete      | deletecollection | deleteCoreV1CollectionNamespacedSecret                        |                           | v1         | secrets
    create     | get         | list             | listCoreV1NamespacedSecret                                    |                           | v1         | secrets
    create     | post        | post             | createCoreV1NamespacedSecret                                  |                           | v1         | secrets
    watch      | delete      | deletecollection | deleteCoreV1CollectionNamespacedServiceAccount                |                           | v1         | serviceaccounts
    watch      | get         | list             | listCoreV1NamespacedServiceAccount                            |                           | v1         | serviceaccounts
    watch      | post        | post             | createCoreV1NamespacedServiceAccount                          |                           | v1         | serviceaccounts
    create     | get         | list             | listCoreV1Namespace                                           |                           | v1         | namespaces
    create     | post        | post             | createCoreV1Namespace                                         |                           | v1         | namespaces
    update     | delete      | delete           | deleteCoreV1NamespacedServiceAccount                          |                           | v1         | serviceaccounts
    update     | get         | get              | readCoreV1NamespacedServiceAccount                            |                           | v1         | serviceaccounts
    update     | patch       | patch            | patchCoreV1NamespacedServiceAccount                           |                           | v1         | serviceaccounts
    update     | put         | put              | replaceCoreV1NamespacedServiceAccount                         |                           | v1         | serviceaccounts
    create     | delete      | deletecollection | deleteCoreV1CollectionNamespacedServiceAccount                |                           | v1         | serviceaccounts
    create     | get         | list             | listCoreV1NamespacedServiceAccount                            |                           | v1         | serviceaccounts
    create     | post        | post             | createCoreV1NamespacedServiceAccount                          |                           | v1         | serviceaccounts
    watch      | delete      | deletecollection | deleteCoreV1CollectionNamespacedServiceAccount                |                           | v1         | serviceaccounts
    watch      | get         | list             | listCoreV1NamespacedServiceAccount                            |                           | v1         | serviceaccounts
    watch      | post        | post             | createCoreV1NamespacedServiceAccount                          |                           | v1         | serviceaccounts
    create     | delete      | deletecollection | deleteCoreV1CollectionNamespacedSecret                        |                           | v1         | secrets
    create     | get         | list             | listCoreV1NamespacedSecret                                    |                           | v1         | secrets
    create     | post        | post             | createCoreV1NamespacedSecret                                  |                           | v1         | secrets
    update     | delete      | delete           | deleteCoreV1NamespacedServiceAccount                          |                           | v1         | serviceaccounts
    update     | get         | get              | readCoreV1NamespacedServiceAccount                            |                           | v1         | serviceaccounts
    update     | patch       | patch            | patchCoreV1NamespacedServiceAccount                           |                           | v1         | serviceaccounts
    update     | put         | put              | replaceCoreV1NamespacedServiceAccount                         |                           | v1         | serviceaccounts
    watch      | delete      | deletecollection | deleteCoreV1CollectionNamespacedServiceAccount                |                           | v1         | serviceaccounts
    watch      | get         | list             | listCoreV1NamespacedServiceAccount                            |                           | v1         | serviceaccounts
    watch      | post        | post             | createCoreV1NamespacedServiceAccount                          |                           | v1         | serviceaccounts
    watch      | delete      | deletecollection | deleteCoreV1CollectionNamespacedServiceAccount                |                           | v1         | serviceaccounts
    watch      | get         | list             | listCoreV1NamespacedServiceAccount                            |                           | v1         | serviceaccounts
    watch      | post        | post             | createCoreV1NamespacedServiceAccount                          |                           | v1         | serviceaccounts
    create     | delete      | deletecollection | deleteRbacAuthorizationV1beta1CollectionNamespacedRoleBinding | rbac.authorization.k8s.io | v1beta1    | rolebindings
    create     | get         | list             | listRbacAuthorizationV1beta1NamespacedRoleBinding             | rbac.authorization.k8s.io | v1beta1    | rolebindings
    create     | post        | post             | createRbacAuthorizationV1beta1NamespacedRoleBinding           | rbac.authorization.k8s.io | v1beta1    | rolebindings
    create     | get         | list             | listCoreV1Namespace                                           |                           | v1         | namespaces
    create     | post        | post             | createCoreV1Namespace                                         |                           | v1         | namespaces
    watch      | delete      | deletecollection | deleteCoreV1CollectionNamespacedServiceAccount                |                           | v1         | serviceaccounts
    watch      | get         | list             | listCoreV1NamespacedServiceAccount                            |                           | v1         | serviceaccounts
    watch      | post        | post             | createCoreV1NamespacedServiceAccount                          |                           | v1         | serviceaccounts
    create     | delete      | deletecollection | deleteRbacAuthorizationV1beta1CollectionNamespacedRoleBinding | rbac.authorization.k8s.io | v1beta1    | rolebindings
    create     | get         | list             | listRbacAuthorizationV1beta1NamespacedRoleBinding             | rbac.authorization.k8s.io | v1beta1    | rolebindings
    create     | post        | post             | createRbacAuthorizationV1beta1NamespacedRoleBinding           | rbac.authorization.k8s.io | v1beta1    | rolebindings
    watch      | delete      | deletecollection | deleteCoreV1CollectionNamespacedServiceAccount                |                           | v1         | serviceaccounts
    watch      | get         | list             | listCoreV1NamespacedServiceAccount                            |                           | v1         | serviceaccounts
    watch      | post        | post             | createCoreV1NamespacedServiceAccount                          |                           | v1         | serviceaccounts
    create     | delete      | deletecollection | deleteCoreV1CollectionNamespacedServiceAccount                |                           | v1         | serviceaccounts
    create     | get         | list             | listCoreV1NamespacedServiceAccount                            |                           | v1         | serviceaccounts
    create     | post        | post             | createCoreV1NamespacedServiceAccount                          |                           | v1         | serviceaccounts
   (300 rows)

   #+end_src


#+BEGIN_SRC sql-mode
   SELECT count(audit_id)
   FROM audit_events;
 #+END_SRC


   #+RESULTS:
   #+begin_src sql-mode
    count 
   -------
        0
   (1 row)

   #+end_src
   #+BEGIN_SRC sql-mode :tangle ../apps/hasura/migrations/230_view_audit_events.up.sql :results silent
     CREATE OR REPLACE VIEW "public"."audit_events" AS
       SELECT audit_id,
              bucket,
              job,
              event_level,
              event_stage,
              operation_id,
              event_verb,
              api_version,
              request_uri,
              useragent,
              event_user,
              object_name,
              object_namespace,
              event_resource,
              object_api_version,
              object_ref,
              source_ips,
              annotations,
              request_object,
              response_object,
              response_status,
              stage_timestamp,
              request_received_timestamp,
              data
       FROM audit_events_material;
   #+END_SRC
   
#+NAME: track audit_events
#+BEGIN_SRC yaml :tangle ../apps/hasura/migrations/230_audit_events.up.yaml
- type: track_table
  args:
    schema: public
    name: audit_events
#+END_SRC
** requestObjects
*** columns
**** requestkind
 #+NAME: requestObject.kind
 #+BEGIN_SRC sql-mode
     requestkind text NOT NULL,
 #+END_SRC

***** Examples
 #+BEGIN_SRC json
 "requestObject": {
     "kind": "SubjectAccessReview",
 #+END_SRC

 #+BEGIN_SRC shell
 cat kube-apiserver-audit.log | jq  -r .requestObject.kind | sort | uniq > kinds.txt
 cat kube-apiserver-audit.log | jq  -r .responseObject.kind | sort | uniq > rkinds.txt
 diff kinds.txt rkinds.txt
 #+END_SRC

 Only requestObjects include Binding, DeleteOptions, and DeploymentRollback
 Only responsesObjects include Status and TokenRequest

 #+BEGIN_SRC diff
 2d1
 < Binding
 12d10
 < DeleteOptions
 14d11
 < DeploymentRollback
 39a37
 > Status
 41a40
 > TokenRequest
 #+END_SRC

**** requestapiversion
 #+NAME: requestObject.apiVersion
 #+BEGIN_SRC sql-mode
   requestapiversion text NOT NULL,
 #+END_SRC
 Might be tied to level = request, response etc
***** examples
 #+BEGIN_SRC json
 "requestObject": {
     "apiVersion": "authorization.k8s.io/v1",
 #+END_SRC

 I'm not sure here, but I feel like we should only be looking at RequestResponse... not all three.
 Huh, that was wrong.. the counts differ wildly:

**** requestmeta
 #+NAME: requestObject.metadata
 #+BEGIN_SRC sql-mode
   requestmeta jsonb NOT NULL,
 #+END_SRC
***** examples
 #+BEGIN_SRC json
 "requestObject": {
     "metadata": {
       "creationTimestamp": null
     },
 #+END_SRC
**** requestspec
 #+NAME: requestObject.spec
 #+BEGIN_SRC sql-mode
   requestspec jsonb NOT NULL,
 #+END_SRC
***** examples
 #+BEGIN_SRC json
 "requestObject": {
     "spec": {
       "resourceAttributes": {
         "namespace": "kubernetes-dashboard-6069",
         "verb": "use",
         "group": "extensions",
         "resource": "podsecuritypolicies",
         "name": "e2e-test-privileged-psp"
       },
       "user": "system:serviceaccount:kubernetes-dashboard-6069:default"
     },
 #+END_SRC
**** requeststatus
 #+NAME: requestObject.status
 #+BEGIN_SRC sql-mode
   requeststatus jsonb NOT NULL,
 #+END_SRC
***** examples
 #+BEGIN_SRC json
   "responseObject": {
     "status": {
       "allowed": true,
       "reason": "RBAC: allowed by RoleBinding \"kubernetes-dashboard-6069--e2e-test-privileged-psp/kubernetes-dashboard-6069\" of ClusterRole \"e2e-test-privileged-psp\" to ServiceAccount \"default/kubernetes-dashboard-6069\""
     }
 #+END_SRC

*** table

 We'll just load these as jsonb into the main audit_events table.

 From https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.15/

 #+BEGIN_EXAMPLE
 Resource objects typically have 3 components:

 Resource ObjectMeta: This is metadata about the resource, such as its name, type, api version, annotations, and labels. This contains fields that maybe updated both by the end user and the system (e.g. annotations).

 ResourceSpec: This is defined by the user and describes the desired state of system. Fill this in when creating or updating an object.

 ResourceStatus: This is filled in by the server and reports the current state of the system. In most cases, users don't need to change this.
 #+END_EXAMPLE

 These have more information
 #+BEGIN_SRC json
 "requestObject": {
     "kind": "SubjectAccessReview",
     "apiVersion": "authorization.k8s.io/v1",
     "metadata": {
       "creationTimestamp": null
     },
     "spec": {
       "resourceAttributes": {
         "namespace": "kubernetes-dashboard-6069",
         "verb": "use",
         "group": "extensions",
         "resource": "podsecuritypolicies",
         "name": "e2e-test-privileged-psp"
       },
       "user": "system:serviceaccount:kubernetes-dashboard-6069:default"
     },
     "status": {
       "allowed": false
     }
   },
 #+END_SRC

** responseObjects
*** columns
**** responsekind
 #+NAME: responseObject.kind
 #+BEGIN_SRC sql-mode
     responsekind text NOT NULL,
 #+END_SRC

***** Examples
 #+BEGIN_SRC json
 "responseObject": {
     "kind": "SubjectAccessReview",
 #+END_SRC

 #+BEGIN_SRC shell
 cat kube-apiserver-audit.log | jq  -r .responseObject.kind | sort | uniq > kinds.txt
 cat kube-apiserver-audit.log | jq  -r .responseObject.kind | sort | uniq > rkinds.txt
 diff kinds.txt rkinds.txt
 #+END_SRC

 Only responseObjects include Binding, DeleteOptions, and DeploymentRollback
 Only responsesObjects include Status and TokenResponse

 #+BEGIN_SRC diff
 2d1
 < Binding
 12d10
 < DeleteOptions
 14d11
 < DeploymentRollback
 39a37
 > Status
 41a40
 > TokenResponse
 #+END_SRC

**** responseapiversion
 #+NAME: responseObject.apiVersion
 #+BEGIN_SRC sql-mode
   responseapiversion text NOT NULL,
 #+END_SRC
 Might be tied to level = response, response etc
***** examples
 #+BEGIN_SRC json
 "responseObject": {
     "apiVersion": "authorization.k8s.io/v1",
 #+END_SRC

 I'm not sure here, but I feel like we should only be looking at ResponseResponse... not all three.
 Huh, that was wrong.. the counts differ wildly:

**** responsemeta
 #+NAME: responseObject.metadata
 #+BEGIN_SRC sql-mode
   responsemeta jsonb NOT NULL,
 #+END_SRC
***** examples
 #+BEGIN_SRC json
 "responseObject": {
     "metadata": {
       "creationTimestamp": null
     },
 #+END_SRC
**** responsespec
 #+NAME: responseObject.spec
 #+BEGIN_SRC sql-mode
   responsespec jsonb NOT NULL,
 #+END_SRC
***** examples
 #+BEGIN_SRC json
 "responseObject": {
     "spec": {
       "resourceAttributes": {
         "namespace": "kubernetes-dashboard-6069",
         "verb": "use",
         "group": "extensions",
         "resource": "podsecuritypolicies",
         "name": "e2e-test-privileged-psp"
       },
       "user": "system:serviceaccount:kubernetes-dashboard-6069:default"
     },
 #+END_SRC
**** responsestatus
 #+NAME: responseObject.status
 #+BEGIN_SRC sql-mode
   responsestatus jsonb NOT NULL,
 #+END_SRC
***** examples
 #+BEGIN_SRC json
   "responseObject": {
     "status": {
       "allowed": true,
       "reason": "RBAC: allowed by RoleBinding \"kubernetes-dashboard-6069--e2e-test-privileged-psp/kubernetes-dashboard-6069\" of ClusterRole \"e2e-test-privileged-psp\" to ServiceAccount \"default/kubernetes-dashboard-6069\""
     }
 #+END_SRC

*** Notes
 #+BEGIN_SRC json
   "responseObject": {
     "kind": "SubjectAccessReview",
     "apiVersion": "authorization.k8s.io/v1",
     "metadata": {
       "creationTimestamp": null
     },
     "spec": {
       "resourceAttributes": {
         "namespace": "kubernetes-dashboard-6069",
         "verb": "use",
         "group": "extensions",
         "resource": "podsecuritypolicies",
         "name": "e2e-test-privileged-psp"
       },
       "user": "system:serviceaccount:kubernetes-dashboard-6069:default"
     },
     "status": {
       "allowed": true,
       "reason": "RBAC: allowed by RoleBinding \"kubernetes-dashboard-6069--e2e-test-privileged-psp/kubernetes-dashboard-6069\" of ClusterRole \"e2e-test-privileged-psp\" to ServiceAccount \"default/kubernetes-dashboard-6069\""
     }
   },
 #+END_SRC

* Operation Views
** api_operations view
*** regex_from_path function
#+NAME: regex_from_path.py
#+BEGIN_SRC python :eval never
  import re
  if path is None:
    return None
  K8S_PATH_VARIABLE_PATTERN = re.compile("{(path)}$")
  VARIABLE_PATTERN = re.compile("{([^}]+)}")
  path_regex = K8S_PATH_VARIABLE_PATTERN.sub("(.*)", path).rstrip('/')
  path_regex = VARIABLE_PATTERN.sub("([^/]*)", path_regex).rstrip('/')
  if not path_regex.endswith(")") and not path_regex.endswith("?"): 
      path_regex += "([^/]*)"
  if path_regex.endswith("proxy"): 
      path_regex += "/?$"
  else:
      path_regex += "$"
  return path_regex
#+END_SRC

#+NAME: regex_from_path.sql
#+BEGIN_SRC sql-mode :noweb yes :tangle ../apps/hasura/migrations/145_function_regex_from_path.up.sql :results silent
  set role dba;
  CREATE OR REPLACE FUNCTION regex_from_path(path text)
  RETURNS text AS $$
  <<regex_from_path.py>>
  $$ LANGUAGE plpython3u ;
  reset role;
#+END_SRC

*** api_operations view
    This grabs the 'paths' section of our swagger.json, where each path contains operation Id, tags, schemes, etc.
#+NAME: api_operations view
#+BEGIN_SRC sql-mode :eval never-export :tangle ../apps/hasura/migrations/150_view_api_operations.up.sql :results silent
  CREATE OR REPLACE VIEW "public"."api_operations" AS 
    SELECT raw_swaggers.id AS raw_swagger_id,
           paths.key AS path,
           regex_from_path(paths.key) as regex,
           d.key AS http_method,
           (d.value ->> 'x-kubernetes-action'::text) AS k8s_action,
           (d.value ->> 'operationId'::text) AS operation_id,
           ((d.value -> 'x-kubernetes-group-version-kind'::text) ->> 'group'::text) AS k8s_group,
           ((d.value -> 'x-kubernetes-group-version-kind'::text) ->> 'version'::text) AS k8s_version,
           ((d.value -> 'x-kubernetes-group-version-kind'::text) ->> 'kind'::text) AS k8s_kind,
           (d.value ->> 'description'::text) AS description,
           (d.value -> 'consumes'::text) AS consumes,
           (d.value -> 'responses'::text) AS responses,
           (d.value -> 'parameters'::text) AS parameters,
           (lower((d.value ->> 'description'::text)) ~~ '%deprecated%'::text) AS deprecated,
           split_part((cat_tag.value ->> 0), '_'::text, 1) AS category,
           string_agg(btrim((jsonstring.value)::text, '"'::text), ', '::text) AS tags,
           string_agg(btrim((schemestring.value)::text, '"'::text), ', '::text) AS schemes
      FROM raw_swaggers
      , jsonb_each((raw_swaggers.data -> 'paths'::text)) paths(key, value)
      , jsonb_each(paths.value) d(key, value)
      , jsonb_array_elements((d.value -> 'tags'::text)) cat_tag(value)
      , jsonb_array_elements((d.value -> 'tags'::text)) jsonstring(value)
      , jsonb_array_elements((d.value -> 'schemes'::text)) schemestring(value)
     GROUP BY raw_swaggers.id, paths.key, d.key, d.value, cat_tag.value
     ORDER BY paths.key;
#+END_SRC

#+NAME: api_operations indexes the raw_swagger
#+BEGIN_SRC sql-mode :tangle ../apps/hasura/migrations/100_table_raw_swaggers.up.sql :results silent
  CREATE INDEX idx_swagger_gin_paths ON raw_swagger USING GIN ((data->>'paths'));
  CREATE INDEX idx_swagger_btree_paths ON raw_swagger USING BTREE ((data->>'paths'));
  CREATE INDEX idx_swagger_hash_paths ON raw_swagger USING HASH ((data->>'paths'))
       -- api_operations view:
       --  , jsonb_each((raw_swaggers.data -> 'paths'::text)) paths(key, value)
       --  , jsonb_each(paths.value) d(key, value)
       --  , jsonb_array_elements((d.value -> 'tags'::text)) cat_tag(value)
       --  , jsonb_array_elements((d.value -> 'tags'::text)) jsonstring(value)
       --  , jsonb_array_elements((d.value -> 'schemes'::text)) schemestring(value)
       -- GROUP BY raw_swaggers.id, paths.key, d.key, d.value, cat_tag.value
       -- ORDER BY paths.key;
       -- api_resources view:
       --   , jsonb_each((raw_swaggers.data -> 'definitions'::text)) d(key, value)
       --   , jsonb_array_elements((d.value -> 'required'::text)) reqstring(value)
       -- GROUP BY raw_swaggers.id, d.key, d.value;
  -- CREATE INDEX idx_swagger_X ON raw_swagger USING GIN ((jsb->‘X’));
  -- CREATE INDEX idx_swagger_X ON raw_swagger USING BTREE ((jsb->>‘X’));
  -- CREATE INDEX idx_swagger_X ON raw_swagger USING HASH ((jsb->>‘X’))
  #+END_SRC

  #+RESULTS: api_operations indexes the raw_swagger
  #+begin_src sql-mode
      event_verb    
  ------------------
   create
   delete
   deletecollection
   get
   list
   patch
   update
  (7 rows)

  #+end_src

#
#+NAME: uniq audit entry verbs raw
#+BEGIN_SRC shell
cd /tmp/apisnoop-ci-kubernetes-e2e-gci-gce-11349620722877112346arl78tw
cat audit.log | jq .verb | sort | uniq
#+END_SRC

#+RESULTS: uniq audit entry verbs raw
#+begin_EXAMPLE
"abcd"
"create"
"delete"
"deletecollection"
"get"
"list"
"patch"
"post"
"update"
"watch"
#+end_EXAMPLE


#+NAME: Double check operation_id verbs
#+BEGIN_SRC sql-mode
SELECT DISTINCT k8s_action, http_method
FROM api_operations
order by k8s_action;
#+END_SRC

#+RESULTS: Double check operation_id verbs
#+begin_src sql-mode
    k8s_action    | http_method 
------------------+-------------
 connect          | delete
 connect          | get
 connect          | head
 connect          | options
 connect          | patch
 connect          | post
 connect          | put
 delete           | delete
 deletecollection | delete
 get              | get
 list             | get
 patch            | patch
 post             | post
 put              | put
 watch            | get
 watchlist        | get
                  | get
(17 rows)

#+end_src
#+NAME: Double check operation_id verbs

#+NAME: method = options
#+BEGIN_SRC sql-mode
SELECT operation_id, k8s_action, http_method, path
FROM api_operations
where http_method like 'options';
#+END_SRC

#+RESULTS: method = options
#+begin_src sql-mode
                    operation_id                    | k8s_action | http_method |                            path                             
----------------------------------------------------+------------+-------------+-------------------------------------------------------------
 connectCoreV1OptionsNamespacedPodProxy             | connect    | options     | /api/v1/namespaces/{namespace}/pods/{name}/proxy
 connectCoreV1OptionsNamespacedPodProxyWithPath     | connect    | options     | /api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}
 connectCoreV1OptionsNamespacedServiceProxy         | connect    | options     | /api/v1/namespaces/{namespace}/services/{name}/proxy
 connectCoreV1OptionsNamespacedServiceProxyWithPath | connect    | options     | /api/v1/namespaces/{namespace}/services/{name}/proxy/{path}
 connectCoreV1OptionsNodeProxy                      | connect    | options     | /api/v1/nodes/{name}/proxy
 connectCoreV1OptionsNodeProxyWithPath              | connect    | options     | /api/v1/nodes/{name}/proxy/{path}
(6 rows)

#+end_src

#+NAME: Double check audit_entries verbs / ops
#+BEGIN_SRC sql-mode
explain SELECT DISTINCT event_verb
FROM audit_events;
-- order by event_verb;
#+END_SRC

#+RESULTS: Double check audit_entries verbs / ops
#+begin_src sql-mode
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Unique  (cost=18311202947114.33..18320060226114.33 rows=313532 width=32)
   ->  Sort  (cost=18311202947114.33..18315631586614.33 rows=1771455800000 width=32)
         Sort Key: ((raw.data ->> 'verb'::text))
         ->  Nested Loop  (cost=8857888750630.28..17654133088298.60 rows=1771455800000 width=32)
               Join Filter: ((raw.data ->> 'requestURI'::text) ~ ops.regex)
               ->  Seq Scan on raw_audit_events raw  (cost=0.00..50648.32 rows=313532 width=1091)
               ->  Materialize  (cost=8857888750630.28..9027707225240.28 rows=1130000000 width=32)
                     ->  Subquery Scan on ops  (cost=8857888750630.28..9027693850630.28 rows=1130000000 width=32)
                           ->  GroupAggregate  (cost=8857888750630.28..9027682550630.28 rows=1130000000 width=549)
                                 Group Key: paths.key, raw_swaggers.id, d.key, d.value, cat_tag.value
                                 ->  Sort  (cost=8857888750630.28..8886138750630.28 rows=11300000000000 width=132)
                                       Sort Key: paths.key, raw_swaggers.id, d.key, d.value, cat_tag.value
                                       ->  Nested Loop  (cost=0.02..228282828281.32 rows=11300000000000 width=132)
                                             ->  Nested Loop  (cost=0.02..2282828281.32 rows=113000000000 width=132)
                                                   ->  Nested Loop  (cost=0.01..22828281.31 rows=1130000000 width=132)
                                                         ->  Nested Loop  (cost=0.01..228281.31 rows=11300000 width=100)
                                                               ->  Nested Loop  (cost=0.01..2281.30 rows=113000 width=68)
                                                                     ->  Seq Scan on raw_swaggers  (cost=0.00..21.30 rows=1130 width=36)
                                                                     ->  Function Scan on jsonb_each paths  (cost=0.01..1.00 rows=100 width=64)
                                                               ->  Function Scan on jsonb_each d  (cost=0.00..1.00 rows=100 width=64)
                                                         ->  Function Scan on jsonb_array_elements cat_tag  (cost=0.01..1.00 rows=100 width=32)
                                                   ->  Function Scan on jsonb_array_elements jsonstring  (cost=0.01..1.00 rows=100 width=0)
                                             ->  Function Scan on jsonb_array_elements schemestring  (cost=0.01..1.00 rows=100 width=0)
(23 rows)

#+end_src


#+RESULTS: api_operations view
#+begin_src sql-mode
CREATE VIEW
#+end_src

#+NAME: track api_operations
#+BEGIN_SRC yaml :tangle ../apps/hasura/migrations/150_view_api_operations.up.yaml
- type: track_table
  args:
    schema: public
    name: api_operations
#+END_SRC


#+NAME: possible indexes
#+BEGIN_SRC sql-mode :eval never
create index api_operations_id on api_operations(id);
create index api_operations_method on api_operations(method);
create index api_operations_regexp on api_operations(regexp);
#+END_SRC

** api_operations_parameters view
Using our api_operations view, look into the parameters field in each one.     
#+NAME: api_operations_parameters view
#+BEGIN_SRC sql-mode :eval no-export :tangle ../apps/hasura/migrations/160_view_api_operations_parameters.up.sql
  CREATE OR REPLACE VIEW "public"."api_operations_parameters" AS 
    SELECT (param.entry ->> 'name'::text) AS name,
           (param.entry ->> 'in'::text) AS "in",
           -- for resource:
           -- if param is body in body, take its $ref from its schema
           -- otherwise, take its type
           replace(
             CASE
             WHEN ((param.entry ->> 'in'::text) = 'body'::text) 
              AND ((param.entry -> 'schema'::text) is not null)
               THEN ((param.entry -> 'schema'::text) ->> '$ref'::text)
             ELSE (param.entry ->> 'type'::text)
             END, '#/definitions/','') AS resource,
           (param.entry ->> 'description'::text) AS description,
           CASE
           WHEN ((param.entry ->> 'required'::text) = 'true') THEN true
           ELSE false
            END AS required,
           CASE
           WHEN ((param.entry ->> 'uniqueItems'::text) = 'true') THEN true
           ELSE false
           END AS unique_items,
           api_operations.raw_swagger_id,
           param.entry as entry,
           api_operations.operation_id
      FROM api_operations
           , jsonb_array_elements(api_operations.parameters) WITH ORDINALITY param(entry, index)
            WHERE api_operations.parameters IS NOT NULL;
#+END_SRC

#+RESULTS: api_operations_parameters view
#+begin_src sql-mode
CREATE VIEW
#+end_src

#+NAME: track api_operations_parameters
#+BEGIN_SRC yaml :eval no-export :tangle ../apps/hasura/migrations/160_view_api_operations_parameters.up.yaml
- type: track_table
  args:
    schema: public
    name: api_operations_parameters
#+END_SRC

** api_operations_responses view
   Similar to parameters, within each of the paths of the swagger.json, there is a responses field.  We are listing the values within this field.
   
#+NAME: Responses View
#+BEGIN_SRC sql-mode :eval no-export :tangle ../apps/hasura/migrations/180_view_api_operations_responses.up.sql
  CREATE OR REPLACE VIEW "public"."api_operations_responses" AS 
    SELECT d.key AS code,
           (d.value ->> 'description'::text) AS description,
           replace(
             CASE
             WHEN (((d.value -> 'schema'::text) IS NOT NULL) AND (((d.value -> 'schema'::text) -> 'type'::text) IS NOT NULL))
               THEN ((d.value -> 'schema'::text) ->> 'type'::text)
             WHEN (((d.value -> 'schema'::text) IS NOT NULL) AND (((d.value -> 'schema'::text) -> '$ref'::text) IS NOT NULL))
               THEN ((d.value -> 'schema'::text) ->> '$ref'::text)
             ELSE NULL::text
             END, '#/definitions/','') AS resource,
             api_operations.operation_id,
             api_operations.raw_swagger_id
      FROM (api_operations
            JOIN LATERAL jsonb_each(api_operations.responses) d(key, value) ON (true))
     ORDER BY (uuid_generate_v1());
#+END_SRC

#+RESULTS: Responses View
#+begin_src sql-mode
CREATE VIEW
#+end_src

#+NAME: track api_operations_responses
#+BEGIN_SRC yaml :tangle ../apps/hasura/migrations/180_view_api_operations_responses.up.yaml
- type: track_table
  args:
    schema: public
    name: api_operations_responses
#+END_SRC

* Resource Views
** api_resources view
#+NAME: api_resources view
#+BEGIN_SRC sql-mode :eval never-export :tangle ../apps/hasura/migrations/190_view_api_resources.up.sql
  CREATE VIEW "public"."api_resources" AS 
   SELECT 
      raw_swaggers.id AS raw_swagger_id,
      d.key AS name,
      (d.value ->> 'type'::text) AS resource_type,
      (((d.value -> 'x-kubernetes-group-version-kind'::text) -> 0) ->> 'group'::text) AS k8s_group,
      (((d.value -> 'x-kubernetes-group-version-kind'::text) -> 0) ->> 'version'::text) AS k8s_version,
      (((d.value -> 'x-kubernetes-group-version-kind'::text) -> 0) ->> 'kind'::text) AS k8s_kind,
      string_agg(btrim((reqstring.value)::text, '"'::text), ', '::text) AS required_params,
      (d.value ->> 'required'::text) as required_params_text,
      (d.value -> 'properties'::text) AS properties,
      d.value
     FROM raw_swaggers
       , jsonb_each((raw_swaggers.data -> 'definitions'::text)) d(key, value)
       , jsonb_array_elements((d.value -> 'required'::text)) reqstring(value)
     GROUP BY raw_swaggers.id, d.key, d.value;

#+END_SRC

#+RESULTS: api_resources view
#+begin_src sql-mode
ERROR:  relation "raw_swaggers" does not exist
LINE 13:    FROM raw_swaggers
                 ^
#+end_src

#+NAME: track api_resources
#+BEGIN_SRC yaml :tangle ../apps/hasura/migrations/190_view_api_resources.up.yaml
- type: track_table
  args:
    schema: public
    name: api_resources
#+END_SRC

** api_resources_fields view
#+NAME: Older Properties View
#+BEGIN_SRC sql-mode :eval never-export :notangle ../apps/hasura/migrations/200_view_api_resources_fields.up.sql
  -- DROP VIEW api_resources_properties;
  -- DROP MATERIALIZED VIEW api_resources_properties;
  CREATE VIEW "public"."api_resources_fields" AS 
    SELECT api_resources.id AS type_id,
           d.key AS property,
           CASE
           WHEN ((d.value ->> 'type'::text) IS NULL) THEN 'subtype'::text
           ELSE (d.value ->> 'type'::text)
             END AS param_type,
           replace(
             CASE
             WHEN ((d.value ->> 'type'::text) = 'string'::text) THEN 'string'::text
             WHEN ((d.value ->> 'type'::text) IS NULL) THEN (d.value ->> '$ref'::text)
             WHEN ((d.value ->> 'type'::text) = 'array'::text)
              AND ((d.value -> 'items'::text) ->> 'type'::text) IS NULL
               THEN ((d.value -> 'items'::text) ->> '$ref'::text)
             WHEN ((d.value ->> 'type'::text) = 'array'::text)
              AND ((d.value -> 'items'::text) ->> '$ref'::text) IS NULL
               THEN ((d.value -> 'items'::text) ->> 'type'::text)
             ELSE 'integer'::text
             END, '#/definitions/','') AS param_kind,
           (d.value ->> 'description'::text) AS description,
           (d.value ->> 'format'::text) AS format,
           (d.value ->> 'x-kubernetes-patch-merge-key'::text) AS merge_key,
           (d.value ->> 'x-kubernetes-patch-strategy'::text) AS patch_strategy,
           -- CASE
           --   WHEN d.key is null THEN false
           --   WHEN (api_resources.required_params ? d.key) THEN true
           --   ELSE false
           --     END
           --   AS required,
           -- with param type also containing array, we don't need array as a boolean
           -- CASE
           -- WHEN ((d.value ->> 'type'::text) = 'array'::text) THEN true
           -- ELSE false
           --  END AS "array"
           d.value
      FROM (api_resources
            JOIN LATERAL jsonb_each(api_resources.properties) d(key, value) ON (true))
     ORDER BY api_resources.id;
#+END_SRC

#+NAME: api_resources_fields view
#+BEGIN_SRC sql-mode :eval never-export :tangle ../apps/hasura/migrations/200_view_api_resources_fields.up.sql
  CREATE VIEW "public"."api_resources_fields" AS 
    SELECT api_resources.name as api_resource_name,
           api_resources.raw_swagger_id,
           d.key AS resource_field,
           CASE
           WHEN ((d.value ->> 'type'::text) IS NULL) THEN 'subtype'::text
           ELSE (d.value ->> 'type'::text)
             END AS param_type,
           replace(
             CASE
             WHEN ((d.value ->> 'type'::text) = 'string'::text) THEN 'string'::text
             WHEN ((d.value ->> 'type'::text) IS NULL) THEN (d.value ->> '$ref'::text)
             WHEN ((d.value ->> 'type'::text) = 'array'::text)
              AND ((d.value -> 'items'::text) ->> 'type'::text) IS NULL
               THEN ((d.value -> 'items'::text) ->> '$ref'::text)
             WHEN ((d.value ->> 'type'::text) = 'array'::text)
              AND ((d.value -> 'items'::text) ->> '$ref'::text) IS NULL
               THEN ((d.value -> 'items'::text) ->> 'type'::text)
             ELSE 'integer'::text
             END, '#/definitions/','') AS param_kind,
           (d.value ->> 'description'::text) AS description,
           (d.value ->> 'format'::text) AS format,
           (d.value ->> 'x-kubernetes-patch-merge-key'::text) AS merge_key,
           (d.value ->> 'x-kubernetes-patch-strategy'::text) AS patch_strategy,
           d.value
      FROM (api_resources
            JOIN LATERAL jsonb_each(api_resources.properties) d(key, value) ON (true));
#+END_SRC

#+NAME: track api_resources_fields
#+BEGIN_SRC yaml :tangle ../apps/hasura/migrations/200_view_api_resources_fields.up.yaml
- type: track_table
  args:
    schema: public
    name: api_resources_fields
#+END_SRC

* Over View
** TODO opname => op_param_name
** TODO opdescription => op_param_description
#+NAME: over view
#+BEGIN_SRC sql-mode :eval never-export :tangle ../apps/hasura/migrations/210_view_over.up.sql
  CREATE OR REPLACE VIEW "public"."over" AS
    SELECT
      op.name as opname,
      op.required,
      op.description as opdescription,
      o.operation_id,
      op.resource,
      r.name as resource_name,
      r.k8s_group,
      r.k8s_version,
      r.k8s_kind,
      rf.resource_field,
      rf.param_type,
      rf.param_kind,
      rf.description,
      rf.format,
      rf.merge_key,
      rf.patch_strategy
      FROM 
          api_operations_parameters op
          JOIN api_operations o ON (
            o.raw_swagger_id = op.raw_swagger_id
            AND
            o.operation_id = op.operation_id
          )
          LEFT JOIN api_resources r ON (
            op.resource = r.name
            AND
            op.raw_swagger_id = r.raw_swagger_id
            )
          LEFT JOIN api_resources_fields rf ON (
            rf.api_resource_name = r.name
            AND
            rf.raw_swagger_id = r.raw_swagger_id
          )
     ORDER BY op.name;
#+END_SRC

#+RESULTS: over view
#+begin_src sql-mode
CREATE VIEW
#+end_src

#+NAME: track over
#+BEGIN_SRC yaml :tangle ../apps/hasura/migrations/210_view_over.up.yaml
- type: track_table
  args:
    schema: public
    name: over
#+END_SRC

* #40: PodSpec and Audit Events
  There is only a single resource, it seems, that references podspec.  So our list of 'podspec fields' is really coming from this resource.
  
  #+RESULTS: Properties of podspec
  #+begin_src sql-mode
               field             |            name            
  -------------------------------+----------------------------
   hostIPC                       | io.k8s.api.core.v1.PodSpec
   hostPID                       | io.k8s.api.core.v1.PodSpec
   volumes                       | io.k8s.api.core.v1.PodSpec
   affinity                      | io.k8s.api.core.v1.PodSpec
   hostname                      | io.k8s.api.core.v1.PodSpec
   nodeName                      | io.k8s.api.core.v1.PodSpec
   overhead                      | io.k8s.api.core.v1.PodSpec
   priority                      | io.k8s.api.core.v1.PodSpec
   dnsConfig                     | io.k8s.api.core.v1.PodSpec
   dnsPolicy                     | io.k8s.api.core.v1.PodSpec
   subdomain                     | io.k8s.api.core.v1.PodSpec
   containers                    | io.k8s.api.core.v1.PodSpec
   hostAliases                   | io.k8s.api.core.v1.PodSpec
   hostNetwork                   | io.k8s.api.core.v1.PodSpec
   tolerations                   | io.k8s.api.core.v1.PodSpec
   nodeSelector                  | io.k8s.api.core.v1.PodSpec
   restartPolicy                 | io.k8s.api.core.v1.PodSpec
   schedulerName                 | io.k8s.api.core.v1.PodSpec
   initContainers                | io.k8s.api.core.v1.PodSpec
   readinessGates                | io.k8s.api.core.v1.PodSpec
   serviceAccount                | io.k8s.api.core.v1.PodSpec
   securityContext               | io.k8s.api.core.v1.PodSpec
   imagePullSecrets              | io.k8s.api.core.v1.PodSpec
   preemptionPolicy              | io.k8s.api.core.v1.PodSpec
   runtimeClassName              | io.k8s.api.core.v1.PodSpec
   priorityClassName             | io.k8s.api.core.v1.PodSpec
   enableServiceLinks            | io.k8s.api.core.v1.PodSpec
   serviceAccountName            | io.k8s.api.core.v1.PodSpec
   ephemeralContainers           | io.k8s.api.core.v1.PodSpec
   activeDeadlineSeconds         | io.k8s.api.core.v1.PodSpec
   shareProcessNamespace         | io.k8s.api.core.v1.PodSpec
   topologySpreadConstraints     | io.k8s.api.core.v1.PodSpec
   automountServiceAccountToken  | io.k8s.api.core.v1.PodSpec
   terminationGracePeriodSeconds | io.k8s.api.core.v1.PodSpec
  (34 rows)

  #+end_src

  #+RESULTS:
  #+begin_src sql-mode
              name            
  ----------------------------
   io.k8s.api.core.v1.PodSpec
  (1 row)
  #+end_src
  
  One thing we can try is to quickly connect the audit event to its api_operation, so that we get a standard definition of what happened.
  
  From there, we could see if that operation is part of the podSpec in some way.
 
  #+NAME: Properties of podspec
  #+BEGIN_SRC sql-mode
    SELECT 
      resource_field as field,
      api_resource_name as name
      FROM
          api_resources_fields
      WHERE api_resources_fields.api_resource_name ILIKE '%podspec%';
  #+END_SRC

  #+NAME: adding RegEx matching
  #+BEGIN_SRC sql-mode
    SELECT
      events.request_uri,
      ops.operation_id
      FROM audit_events events
         JOIN api_operations ops ON events.request_uri ~ ops.regex
      LIMIT 3;
  #+END_SRC

  #+RESULTS: adding RegEx matching
  #+begin_src sql-mode
                                      request_uri                                    |                         operation_id                          
  -----------------------------------------------------------------------------------+---------------------------------------------------------------
   /apis/rbac.authorization.k8s.io/v1beta1/namespaces/provisioning-6870/rolebindings | deleteRbacAuthorizationV1beta1CollectionNamespacedRoleBinding
   /apis/rbac.authorization.k8s.io/v1beta1/namespaces/provisioning-6870/rolebindings | listRbacAuthorizationV1beta1NamespacedRoleBinding
   /apis/rbac.authorization.k8s.io/v1beta1/namespaces/provisioning-6870/rolebindings | createRbacAuthorizationV1beta1NamespacedRoleBinding
  (3 rows)

  #+end_src

* TODO Create Import for CSV view
  We have a file started here: [[file:test_gen.org][test_gen.org]] 
  that brings in the work devan and caleb did to pull all the tests used in a specific/commit version of k8s.
  If we can build a script for this, then we can have:
  - A test name
  - its description
  - its link to official k8s definition
  - a link to the lines of go code that define it.
  
    We can then use this as a cross refernece for any audit event that references a test.
* FOOTNOTES
# Local Variables:
# eval: (sql-connect "hasura" (concat "*SQL: postgres:data*"))
# End:
