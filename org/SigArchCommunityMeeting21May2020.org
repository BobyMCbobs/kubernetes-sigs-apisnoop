#+Title:In  News letter summery of the SIG Arch meeting on 21 May 2020


* The Ownership of Kube-up
Ownership of Kube-up was placed on the agenda. It was not well advertised in advance, therefore it was agreed to inform the community via the mailing list to ensure that all interested parties could join the discussion.

* Platform extension mechanisms
Boundaries of platform extension mechanisms was discussed out of a mailing list tread about a recent KEP about adding a dynamic, remotely accessible platform extension for configuring the authentication chain of the kube-apiserver. In the mailing list thread several dimensions of extensibility was identified. Below is a short summery of the SIG Arch discussion.

** The anchor points discussed in the meeting was:
1. How are people thinking about cluster configuration? API's vs. API is served by the Kube API server.
2. How does a path to being included in conformance affect our thinking about whether things should be built into the Kube API server as built in API's?
3. Is the expectation the we would require something to be in conformance and require configuration?

** Configuration possibilities discussed:
*** Good Staring point for configuration:
- OIDC Configuration
- Ability to use multiple OIDC providers via tools for configuration instead of new API's
*** Secondary points to considered:
- Role-based access control
- Auth Mechanisms / Controlling authentication stack
- Custom resources definition
- Certificate Signing Reqsuest
- Dynamic Kubelet configuration
It would be possible to start slow, not through API's. It would be a good approach to see how it is used, then evaluate the use and demand.

** Factors to considered:
- Dynamic configuration options should have a “use-case” with justifiable value.
- The dynamic configuration should be a reasonable and helpful “Knob to turn” that a significant amount of people want to change at a high frequency or else must be significantly painful to change in any other way.
- If the function can be achieved with other primitives, adding it to the API surface area isn’t required.
- Openshift as an example of a platform which delivers additional value as a provider with a built-in auth server. Dynamic configuration can let people experiment to see how they can be used

** Three possible levels of configuration was distinguished:
- Static - never change
- Runtime soft - can change on the fly
- Runtime hard - requires process restart

** One-time vs. Many-time configuration:
- Experience show that as things are made dynamic, it result in user use-case discovery.
- Even if the configuration is a one-time cluster operator setting it allow for better interaction.
- It should also be considered if the options should be configurable at the cluster operator level or cloud provider level. Cluster operator rights vs. Cloud provider allowance.

** Possible different levels for Conformance releated to number of configurables
One way to approach the issue is through conformance levels where more or less configurables are available dependant on the "conformance level".

** The way forward:
The implementation of a decision tree would help to move things forward and to get consensus.





* Transcript
00:01
hello everybody this is the community
Sagan architecture meeting for May 21st
2020 and just we have a full house here
I want to mind everybody to abide by our
code of conduct and treat each other
with respect
we'll get started now so I'm displaying
my hang-up
children so in any case why don't we get
started there a couple things on the
agenda

John Belmaric:
I did what I say something I know a number here I probably for the second
item here unfortunately I didn't there was nothing on the mailing list about
this and so I personally have not had a chance to gather state about it I'm
talking about that keep ownership so I think that we would be better off if for
that particular item we send it out to the mailing list make sure that
everybody who's interested has an opportunity to know it's going to be on
the agenda for next time and we defer it to that so that's generally our policy
is that these sort of things like the free the first item on the agenda here
was raised a few days ago on the mailing list gives everybody an opportunity to
gather up their their thoughts about it and for people who are particularly
interesting it to actually show up the any case so sorry if that's a
disappointment but if my co-chairs agree I think that should be deferred to the
next meeting that sounds good to me okay thank you

Then let's get started then on the first item on the agenda here boundaries of platform extension mechanisms so

David and lo and Jordan which one of you
wants to expire

Jordan Liggit:
I can I can give an overview of this so the thing that prompted this was a
proposal to add api's to cube API server
to allow controlling the authentication
configuration for the API servers and so
that that was linked in the mailing list
thread there's a there's a open kept PR
around that and that started listing off
leads trying to trying to think about
how do we extend the platform what are
the different dimensions of
extensibility and what what is sort of
the reasoning behind the different types
of extensions we provide and support and
where where we expose those how we
expose those and so the goal here is to
kind of share some of that thinking
hopefully so it helps other SIG's other
components that are also trying to think
about reason about their extension
mechanisms this represents at least a
few hours of untangling our thoughts so
hopefully these dimensions are helpful
to share and think about but then also
to kind of ask questions about how
people are thinking about cluster
configuration api's versus api is served
by the cube api server so that's one
question and then the second one and
this was brought up in the mailing list
discussion how does sort of a path to
being included in conformance
our thinking about whether things should
be built into the cube API server as
built-in api's if if we don't think we
would require something to be in
conformance and require every
cube API server that's conformant to
surface this capability is that is that
the bar for a built-in API now something
that Brendan said in the mailing list
thread sort of sounded like that and I
know we've sort of danced around that at
points we're in a weird place where we
have things like our back that are not
part of conformance but our
sort of older built-in api's it's it
would be good to be clearer if
the expectation that something would be
added to conformance is basically the
bar for building a new API into the cube
API server so those those are the three
things that I was kind of wanting to
cover here just if people had thoughts
about these dimensions of extensibility
other ways of thinking about it
additional things they think we missed
that would be helpful to maybe add to
this body of knowledge and then those
two questions like do we do we
distinguish between cluster
configuration api's and cube api server
api's and the conformance question

Dims:
so a question here Jordan so what do we
expect to come out of this discussion
are we trying to write down what we
expect so next time when another cap
comes with a question similar to what
was pointed out then it's easy to answer
thumbs up thumbs knit thumbs down

Jordan Liggit:
yeah decision trees that kind of help us
think about things like this so that if
a proposal comes up and we've already
thought through like is this more of a
cluster configuration API if so then
maybe it belongs in cluster API or
something similar and not in a built in
queue API server API a decision tree
like that is hopeful similarly a
decision tree like based on feedback
this would not be acceptable in some
percentage some significant percentage
of environments it doesn't look like
this would be reasonable to including
conformance therefore we don't think it
should be a built in API so decision
trees like that are helpful and look
kind of both of those both of those
things the boundaries of what should be
in the API server and the conformance
aspects are things that touch shake
architecture 

Unknown
one other comment maybe
Jordan I would have is we've both

Jordan Liggit:
Before we already dumped into discussion is
someone taking notes notes would be
helpful for this I'm sure

Joe Beda
yes oh I'll try and take notes if
somebody drops a handy linking candy
link into the chat I was gonna have

Derick:
Jordan it's ok was I agree we haven't
been consistent on this and the decision
tree is really helpful we also have some
api's that we haven't fully promoted
that went down various paths that I'd
want to use this as an opportunity to
maybe reflect on so dynamic cubic
configuration is a situation where I
feel like we started down a path that we
haven't really fully finished and I
think I can't identify a user who has
enabled it and I'm wondering if we
should reflect on that as we evaluate it
guys like this.

Tim St Clair
yeah it's hard this is a pretty large
call just to as it's been pointed out
it's weird for us to have a bar around
conformance because I've worked on
confirmes for so long
as being the gate because it's very
inconsistent with what we do today so I
think as kind of maybe as Dirk pointed
out is that we need to rationalize kind
of what we have today along with any
criteria we want to put forwards towards
the future because otherwise it's way
too arbitrary myrrh to say like it must
meet this bar going forwards it's clear
that we've never had a bar or clearly
had that clearly defined lines as
prescriptive before

John Belamaric:
oh I think you've got your hand up there
I guess I'll raise my hand

Mo Khan:
yeah I just want to ask time Derrick
could you describe the dynamic cubed
configuration in like two sentences for
folks that are not familiar

Derick:
about I want
to say two years ago there was an effort
to allow the cubic configuration to be
changed dynamically right so if you you
wanted a cube API surface to go and say
enable this cube looks like you could do
that and you had a link on a node that
says this is where my cubic config is
and then the cubic had a complicated
orchestration procedure to roll out that
new config my experience on this is that
the feature I think did reach a beta
status but I don't think any anyone is
actually using it in production and I
think it's fair to say that in signal I
wouldn't encourage users to use this
right now one of the issues that I think
comes up with cubic configuration as
making that surface configurable was
insufficient when you didn't make the
container runtime or operating system
itself configurable so it wasn't like
you had one uniform config you could
apply across all clusters and everything
was going to be great
when dealing with how cubic
configuration was laid down so my
personal feeling was knowing what I know
now I would probably have cautioned us
against doing cubic config dynamically
but that I'm not sure if other
components to memory have explored
similar things but my experience right
now with cubic config was I think it was
a mistake maybe others in the sig feel
differently but I think that's my
personal feeling

John Belamaric:
all right I don't see a way to raise my
hand I'm a new client but I'll make its
comments and then it's 2-mile Claire and
daniel Smith so with respect to
conformance I think that's an
interesting idea
the Jordan raise but tiny I'm a little
bit leaning toward listen to me saying
that I'm not sure that that's the right
bar for whether something becomes the
core age I think that you know we live
efforts going on there to manage options
functions but level of granularity
meaning I don't want to create profiles
for every little feature that's possible
and I think that requires more thought I
think it's an interesting conversation
we should have probably but I'm not sure
it's the right time now the I think the
thing that specifically if we go back to
these these issues that they've been
raised of what are those dimensions of
accessibility and I think that a
critical aspect here to probably have
some sort of guidance for people on it's
around the frequency of changed things
that are only ever really set in the
beginning of the cluster in life or or
maybe you know change once or somebody
made a mistake although why they created
cluster it's not clear probably don't
deserve to be in the an API that can be
altered at runtime that that's
substantial this additional risk both
security-wise and operationally when
it's modify at one time like that so I
think that is a basic principle that I
makes a lot of sense to me I believe
next then we have to me all clear

Derick:
I had a few comments on the the
conformance conversation but if we're
moving on from that I don't want a
rathole on it so I can house

Daniel:
yeah I was also gonna say something about the
compartments like I I find it surprising
that people think it's okay to have GA
things that aren't somehow compartment
tested I actually didn't realize that
our doctor for this tested I think that
we should probably fix that

John Belamaric:
we are working on that issue is the in the
conformance program things that are not
mandatory for cluster operators that are
sort of always always on we don't
currently have a mechanism although
we've made progress towards it
it's slow-moving but we're making
progress towards having away such that
essentially we can say if you enable
this functionality then it must behave
in this way

Derick:
yeah I but I think
specifically for like our back
I think people depend on that in their
application like being the ability to
like set up roles and stuff and it
should be like in conformers it
shouldn't be an optional part of the
system

John Belamaric:
yeah I would just want to take
off on that right because there's Lee

Mo Khan:
isn't that part of conformance it's not
even on by default when so like it was
two different distinction

Derick:
yeah okay that's interesting

Clayton Coleman:
yeah and I was just
gonna like to add to Derrick's point on
cubed came together like really wanted a
hammer on the what we made dynamic was
not the right thing or the argument the
lesson there is what we made dynamic was
not the right thing which is when we had
very nearly scoped things we make
dynamic like compute and services and
all of that like we designed to have a
dynamic system where as they can take
through the cubelet we didn't make such
a distinction I think that's like the
the salient lesson
whatever extension point exists has to
have a really clear use case that has
value for a set of scenarios and has to
have justify its value just doing
dynamic config of a component I don't
think is sufficient like we've never
made the scheduler config generic and I
would certainly caution against for
instance if the schedule and this looked
totally hypothetical but like if the
scheduler wanted to change priorities
and make that dynamic there's lots of
people who the scheduler is inadequate
we have a lot of flexibility in the code
but if we were to go do a dynamic
scheduling policy that changed how
politics schedule but hey that really
needs to be a coherent design feature I
feel like that is a minimum bar for any
of the config that we do is it has to be
a reasonable knob that sufficient number
of people want to change it in dynamic
and high frequency rate that it
justifies this existence or it is so
painful to do it otherwise that it
absolutely must have a dynamic configure
and there was an example of this like
wide web hook we wanted the platform to
be extensible not everyone is ever going
to deploy a web Punk
but the alternative was is in Jordan's
decision tree putting code into cube API
server and that was really just too
painful

Tim St Clair:
um I think I'm next cuz I've
been Kim attract green mister all
cleared he can lower your hand I think
that all otherwise so I've been around
and both producer-consumer for dynamic
could the config on the cluster and
lifecycle side and although the
implementation was not actually what
exactly what we wanted and I think there
was boundary lines that were crossed as
Clayton pointed out there is definitely
demand from the wild to be able to
modify certain sets of configurations
there should be like a classification
like there's static configurations
things that you shouldn't change it
can't change then there are there are
things that are potentially runtime
configurations where you can actually
modify them either on the fly and then
there's like a partial runtime
configuration which cause a process to
restart that's said like we've never had
that delineation clearly demarcated
inside of how we do things we never had
dynamic configuration plumbed through
the whole system
it's very ad hoc today the promise of a
grand unified field theory of component
config is what Lucas always we've always
talked about and wished we had from the
cluster of life cycle perspective
because we treat config in the same way
we never got there was never really
funded from a community perspective
we've kind of as as Derek pointed out
it's like it's got to a certain point
then just kind of stopped and not been
revisited that said there is demand
there exists precedent all over the
codebase there's stuff in the component
config in the proxy there's this weird
mecca nation that actually exists inside
the scheduler which causes a hard
restart on the config for weights and
balances so it's just inconsistent I
think the demand is there the need is
there I think the enumeration has not
been clean the defined and the
boundaries have been clearly defined
you

Chatter:
who's next, lost track, John you're muted
what did you go next Joe I think I think
it was low I don't know if Lodge I don't
know why after you

Joe Beda:
the one time versus
many times config I think this is
something that is I mean there are
definitely things like you know
extending the API server in other ways
like webhooks where where these things
are not changing often and I think we
see that there's a chicken and egg thing
where as we make things dynamic people
use them more and they find more usages
for them and I think one of the signs
for me like in this particular example
is that we see people hacking around to
introduce new auth mechanisms because
it's so difficult to install at the API
server level and so one example is like
you look at rancher and they have
essentially a way that they're abusing
service account jobs to provide user
accounts in the system because it's so
difficult to actually apply this stuff
in a consistent way across all the
different distributions in ways that
people have to manage this and so I
think in this particular case that's
that's an example there and then the
other point I want to make is that you
know for a long time now we've been
taking the control plane by being a
fixed idea to being something that is
really sort of more Fuzzle e defined
like is a webhook part of our control
plane are not part of our control plane
and we're doing this more and more and
more and so is it isn't it what's that
oh I didn't (yes well yes well books are
part of our control climate) right but
the thing is is that you start you know
between a web hook and a controller and
CR DS the the the delineation between
what is control plane and not control
plane is really becoming a fuzzy thing
(the users that it's part of the control plane)
what time tag
(if part of your controller you can break your users that
are just part of the control plane)
what do you mean by break users
(right like if you're sending a request an API request
and API server gives you back to 500 and
the result is some component that's not
API server like some default is
somewhere else like whatever caused that
failure as part of the control plane
that's how that's my mental rule)
okay and I would actually say from the users
point of view core functionality is part
of it and like you know let's take a
look at sort of the the ingress v2
gateway stuff that's going on right it's
more likely that we're gonna take stuff
that's built into the control plane now
and actually move that out and to be a
CR D type of thing that sits on the
outside so we're gonna have fundamental
functionality that is layered on from
the outside using crts and so yeah I
mean I think we can look at the control
plane from sort of the strict like are
we returning five hundreds but then we
can also look at the control plane in
terms of core functionality and we're
moving more and more to that stuff to
run on cluster being dynamically
configured and and so I don't think that
there's a clean line here so I'll let it
go

John Belamaric:
sure why don't we go to mo now

Mo Khan:
I'm fully trying to remember the under
dynamic cubelet thing when I was so I
was just kind of googling it while we
talked so I could try like I'd known
about this feature I mean to me a
problem that I'm kind of observing from
what folks have just said is that it was
done sort of wholesale right like
there's a blob and as they're pointed
out it it was it was incomplete because
you can control the OS right so I would
not for example propose like dynamic API
server config in one giant blob either
right that's why they kept that I wrote
was much more targeted at a particular
thing right authentication right and
from a technical implementation that's
very straight forward right it's very
much a decision of do we want to do this
not how do we do this the other bit I
wanted to sort of point out is something
Brendan Byrne said in the thread and
Nicky's on the call but I did find it
interesting though is that you know as
time goes on if the canonical way of
that many folks consume cube is through
hosted providers it becomes harder
these distinctions of like I only do
this less often or I only do this
sometimes because if the answer becomes
I can never do this because I'm never
present at that layer well it doesn't
matter that I only want to do it once
you made my one go to zero and I'm an
Aggie

John Belamaric:
well just make a comment and then
speak maybe it would be next
the in the hosting provider situation
the the hosting provider is taking on a
lot of the management or operational
burden and so for them to have the I
don't think that whether it's available
via rest or whether it's available via
files or Steeleye flags is really
pertinent there because the Ostra
provider to make those all those options
available if they choose to any one of
those options

Derick:
you're effectively asking
everyone to reinvent the wheel over and
over and then they'll be in terms of how
you apply that right it'll be very
specific

John Belamaric:
I think I'm sure it sure but I think that mean if if we're
talking about functionality that's sort
of at the cluster operator level then
the ability for managing that and the
responsibilities of that is going to be
with that cloud provider look them up
the cloud provider to kind of thread
that weird line between what they give
to it because where's your monthly go
Wow but you know the the additional risk
associated with exposure of you know
it's a good point I've taken enough time
out of turn so eyelids

Derick:
if I can make a comment like the whole
500 and like hook 500 great guys over a
whole lot acacia never can do it every
request

Mo Khan:
the way I guarantee that you
will never stop something that was
dynamically configurable unless
everything before so in this this thing
with this thing we saw the smaller
surface of breaking your API server.

Derick:
I don't follow how that's possible 

Mo Khan:
I'll do local static config is always
considered first right so if you do it
that way you guarantee that the only
time you ask the remote config is after
all the local configure says I don't
know what this request is for right so
by definition if you were getting a 500
is because everything local says I don't
know what's going on and then the remote
thing says I also don't know what's
going on and no matter what your request
was gonna get denied

Derick
I see, okay Steve

Steve Harris:
thanks I'm gonna add on to where I think
Moe was going with this John a few
minutes ago you said you mentioned about
hosting providers taking on burden and
in this case as a customer I look at
more like what are my rights as a user
are there certain things that if a maybe
this gets into conformance but if a
hosting provider says they're offering
kubernetes to me I would like there to
be certain capabilities that I know are
available to me as a consumer that
they're not gonna cut me off from and I
still like because I've been cut off
from being able to integrate my own
authentication system all over the place
I know exactly how it works and yet I'm
not allowed to do it in too many times
because I either opted to take on the
burden of operating the cluster entirely
myself or
I'm told that as a customer I don't have
that right because I can do something I
don't know dangerous or something so I
see some of this stuff is not just the
dimension of how dynamic it needs to be
but really who has the right to
determine what is available to the
cluster operator and maybe as I saw a
point made of very early on maybe this
belongs in the cluster API if we could
compel hosted offerings to actually on
or something like that so maybe it is
something that is only important when
the cluster is first created against
this question of should I be guaranteed
that I'm allowed to configure this as a
customer

Derick:
if it's not I'll just come
that's not informants it would be

John Belamaric:
that is exactly the purpose of conformance is
to provide a guaranteed set of
functionality for end-users so they can
know their workloads work consistently
across those environments so I think
that that's a great point it really
comes into play when we decide whether
this cosmetic performance which matches
all the way up to join its point of
shouldn't that be a consideration
early on in whether it becomes a built
in API or not which I think we've
discussed a little bit but conclusion
I'm Jordan next and then Tim

Tim Liggit:
gathering a few thoughts so back to Tim
st. Clair's coming about component
configuration I am in favor of
describing configuration in structured
ways I think that has a lot of benefits
it lets the example of if this was to be
surfaced and controllable via a custom
resource a natural way to describe that
would be to have that custom resource
include the config snippet that would be
given to the API server
I think describing that in a structured
way is a positive thing to do and making
it simple to have a consistent way to
make it available via a REST API if
desired that that seems to me to be a
natural mapping if this is a cluster
operator one and two explosives as a
REST API to Steve's point I don't think
controlling the authentication stack is
fundamental to using a criminai T's API
I think being given a community's API
surface that you can create custom
resources against and create pods and
interrogate kindig Maps and like those
things make sense to me as being
fundamental to the API and that's why
those are the things that we have
informants I can certainly see use cases
for adding in a custom authentication
stack but I don't think that's
fundamental to being able to use the API

Steve Harris:
I think it's a bad word with use I think
of it as operator in other words it is
true that a user who you've blessed to
do things like create config Maps
they'll be perfectly happy with a system
like that but your organization might
not even allow you to roll it out to
users like that if certain other
authentication things can't be put in
place so my hands on


Derick:
so I'll start I have to two points I am
sitting in the chat and mostly agreeing
with what Joe is saying I don't have a
strong feeling whether a provider
specific API for twiddling knobs or a
common policy for twiddling knobs or
comment API rather but I do think it's
important that providers be able to say
which knobs they're ok with you
twiddling or not if we want to do
dynamic configuration of things like
flags that's totally cool but I think
providers need to be able to say like I
can't support it if you twiddle display
and to to the question about rights I
think the default position for
everything that's not otherwise
specified is it's up to the provider to
decide if you're allowed to twiddle it
or not the providers are offering you
different you know benefits for using
them some some are supports in SaaS some
are low costs some are SR ease whatever
the trade-offs you're getting from your
provider if you don't like the knobs
that they're allowing you to twiddle
either vote with your wallet or Lobby
them to change it and the exception case
there should always be if we as a
community decide it's really important
for somebody to be able to configure
something like authentication and we add
an extensible API for it like web hooks
and CR DS then cool that thing was part
of conformance and providers will have
to think that's how you can lobby the
providers to the question at hand I
actually have no strong opinion I don't
see why it's a bad idea
I'm not an auth person if we think it's
this is a common enough thing and
frankly I've heard it many times
then we should support it dynamically
and that becomes something that conforms
should cover in my opinion
I'm done thing

Daniel Smith:
I just want to say something I'm slowly
putting back in to catch all this stuff
we went through four other extensibility
features like books and CDs and we felt
it was pretty important at the time to
get those conformance tested and
basically mandate them everywhere under
the theory that an extensibility feature
isn't really useful unless you can you
can use it anywhere right like the idea
is like the whole promise of kubernetes
is working with portability right but as
your workload starts to include parts
and aspects of the control plane you
need to take those with you to write
your application isn't really portable
if it depends on the C or D and you
can't take that C or D somewhere else
with you so if the argument is that this
is a an extensibility feature for users
and users will rely on being able to
take their identity system around with
them like this then it really ought to
be conformance tested right and mandated
but if it's not that sort of
extensibility feature then maybe it
doesn't need to be dynamic either that's
that's how I think about it

Joe Beda:
so just a some of the stuff I was saying in
the chat I think you know having the
capability versus having the pot you
know allowing that as two separate
things having a standard API for how you
do that makes it easier for end users
and consumers to say I want you to
enable ah X right versus saying I want
you to enable me to do this flag doing
it and you have to plummet through sort
of like some other type of system to be
able to do that so I think it really
creates a clear way for consumers to ask
for that capability now with respect to
conformance you know I've said for a
long time but I haven't put the work in
to try and make it happen so take that
for what it is we should have probably
different buckets of conformance with
logos and levels to go with it and so
then like you know I want like you know
you know cluster control level three
means okay you get to control this
particular I think there's stuff that
can be done there I don't think that
conformance necessarily needs to be an
all-or-nothing type of thing in terms of
like allowing this and actually like
like one of the scenarios that I'm
looking at here is that you look at
something like open shift and it has a
built-in olaf server that's integrated
into it that allows you to do something
like deploy a dashboard that allows
end-users to be able to log into the
dashboard and then further authenticate
to the api server in a unified way
that's a huge benefit to end-users and
right now that's tied to the
capabilities that are delivered from the
underlying provider you know providing
the mechanisms for people to start
exploring what it means to be able to
play with different auth systems in the
way that they can integrate this in
automated ways whether that be a
dashboard or whether it be other tools
that are actually automating across
multiple clusters coming from different
vendors that's a huge value plus to
end-users to be able to actually have a
consistent tool story including
authorization that they're using across
all of their clusters and for me that's
the real end user benefit that we're
driving here


you
Jordan Moe I thought Clayton has his
hand up last

Jordan Liggit:
okay so there there are some aspects of
what is proposed that I like like the
ability to address multiple oh I deceive
writers that's something that has been
asked for for a while in different
contexts I think starting slow and
adding support extending the current
support for a single YDC provider that's
configured when the cube API server
starts extending that to support
multiple would give people who are
configuring a cube API server tools that
would let them support this it wouldn't
require it it wouldn't add a built-in
API it wouldn't raise the questions
about conformance and all of that but it
would it would add tools to allow this
then allowing providers to expose that
via C or D or via cluster api or via
different mechanisms you know checkbox
in there in their web console that lets
people spend up a cluster however they
want to expose it that to me is the next
step that says like are people demanding
this if there's demand then there's a
clearer way than the API server to
provide it
I would rather see us start there
instead of starting at this is a new
built-in API to me this API does not
seem like something that keep API but
server should be serving it seems like
cluster api or cluster configuration so
yeah to Tim's question which Tim Tim
David is not in favor of that I am not
in favor of it might might

John Belamaric:
yeah actually but I can make a comment about about
that in particular I mean I think that
second architecture isn't really an
escalation point for overriding TLS of
states when they've made a decision and
what we can talk about here are the kind
of meta points that they come up around
like architectural II do we want
principles around this and around how we
decide whether some things available as
a runtime API versus if a you know a
flags or a or a file and I think we can
you can have that discussion here but
you know that the TLS of that sitting
really it are ultimately once you make
the decision in this particular case
then I don't know that it's appropriate
necessarily from seeking architecture to
somehow write them or even have
athlete's 42 so then that's for me
that's the context to this conversation
I'll say that is that this is about the
architectural principles as opposed to
this specific case now I'm following on
that I believe we get heavy hands this
is clean extra videos 

Jordan Liggit:
I just before we
move on I didn't want to say like I when
I was reviewing the cap I was trying
very hard to understand like specific
requests and specific gaps in the
current extension mechanisms the API
server supports and right now supporting
only a single oh I deceive a writer
seems to me like a gap that we could fix
without Radek
altering the exposure of the current
configuration that would allow
addressing the biggest requests that
I've seen and we're linked from the cab
so my goal is not to just say no
everything's perfect we're not going to
touch anything it's to identify what can
we change what can we add what 26 to
unblock specific high-value mixed cases

Mo Khan:
no I guess so on the whole like having
multiple ITC providers right like the
the part that's concerning there is
right like we're gonna well do work in
treat which is fine we always have to do
stuff in there edge but then we'll have
to do work out a treat that's also fine
maybe one time kind of work right but
the part that's a really hard sell is
we're gonna then ask every single
provider to go wire this stuff up right
and like wiring stuff to the API server
is like the most painful thing to work
right when I'm kind of rationalize is if
you just left it off by default and then
let a provider pass a flag got you turn
it on if they care like what is the harm
it gives you all and like me that's what
they are but 

Jordan Liggit:
the bar is not that it's
harder to extend them to build in as a
consu mer built in is always easier
that's how we ended up with six cloud
provider or libraries built it 

Mo Khan: 
this is not about the consumer right if the
consumer gets a REST API I think they'll
be happy right
I'm sorry R cube rest api probably it's
a vaguely consistent cube rest api
across provider is probably what a
consumer would be happy with it's the i
think the hard sell is gonna be is
you're going to ask every single
provider to go do work right and and i
don't think that the top request is i
want to have multiple IDs you can have
it's a pop request is i just want to
configure one dynamic league on lucky KS
like that's actually the top request so
I think we're again we're actually try
to blow on time here and we're starting
to drilling to really a discussion that
that is between the on sing-off and
maybe she sings as opposed to a policy
discussion around like what are the
principles behind are extensible
functions 

John Belamaric:
so I hear you that year you know you're
concerned that it you know it creates
additional work and like given the
interest of time some of other people
that want to talk I think that
discussion probably needs to be
revisited and sit out there treatment
grants I don't know exactly where or
continued on BLS you know unless but uh
let's let the next dump I think was
Clayton was not just yeah 

Clayton Coleman:
 I wanted to drill on the meta point the Jordan
brought up which is into Jose as well
like it's the only way that you could
accomplish something that is fairly
reasonable and by fairly reasonable we
actually need a bar for what that is is
to put code into cube API server were
probably not done in terms of adding
mechanisms but I would probably say I
wouldn't I wouldn't feel like the first
place that we would start a mechanism is
allowing the using a lower-level
primitive to accomplish that in the
short run so like like in just in this
example like it should be possible to do
server integrations that let you do a
loss integration cleanly or IDC
integration cleanly but if you can use a
lower level primitive I think that's
where we should start and the bar like
when we think about what we define as a
bar like we should figure out a way to
capture this into the bar is not that it
could be useful or that it is useful or
that some people might want it but the
bar is probably it is so overwhelmingly
obvious to it to a chunk a significant
chunk and I'm using vague words here
because I don't know what that is of the
community that is obviously something we
should take on and over time and like
this project we dropped that Bart like
that bar has gotten higher and higher
like you have to do a lot to move the
needle and we still have a lot of other
things that we're trying to work but if
you can't do it at all I think that's
the easiest one for like as Jordan was
saying in the specific case you can't do
it at all we should unblock it but we
don't have to unblock it by adding new
surface area or extensive surface area
for it

John Belamaric:
so if I could really explain what you're
saying is essentially that if the
function can be achieved in other ways
with existing primitives from proxy or
other things we do then
adding it to the certain area even if it
that's more painful 

Clayton Coleman:
so a really concrete
example we have a mission webhooks they
don't solve every problem there's things
that people do to fork the API server to
accomplish that running custom code
there's a bar where you cross the line
from running custom code in a cube api
server to something like an admission
web hook there's a middle ground which
is the lower level primitive we should
make sure we have those as necessary to
accomplish these but I think the bar
between that in the next higher level is
growing over time of this project it
should be possible it's just we don't
have to make it easy 

Mo Khan:
Clayton as a related point did you want to discuss
what you had brought up I think maybe to
say gods ago maybe even before that that
we never addressed the surface area of
cube that crosses the boundary between
workloads and infrastructure oh yeah
that's like 30 minutes discussion we
probably ran out but it was just a very
brief like that when we were trying to
come up with a framing for this one of
them was we have we started by being
very workloads specific and we left the
door open that we could be a meta meta
provider and you can install these api's
and Brendan for us just to put a bunch
of code in and we all hated him and then
we did it it turned out to be good but
like extending the API servers adding a
really setting webhooks we did that to
specifically
grow the ecosystem for the end app but
there are a lot of people who found
value in the meta of the loopback for
managing the platform itself or you know
injecting things that make the platform
more powerful for all the components we
never really define what the difference
between how much time we spend on
managing the platform except this config
or is basic primitives and how much you
had workloads we have to gap between
though we've never unified them

Joe Beda:
one thing I'm still struggling
with is you know we have a
fairly extensive set of api's around
essentially managing and improving
certificates the csr stuff and
practically there's no reason for that
stuff to be built in and with an
extension point that we're talking about
here you could actually layer that on
top of this and so in my mind the you
know a good test of extension
capabilities is if you can actually find
more universal truths that are lower
level than the stuff that you had to
hack in there I've always been very very
uncomfortable with the the CSR stuff and
so talking about the cubelets actually
you know I see Dan I see Daniels down
there talking about the cubelets using
the CSR stuff there is no reason why
that couldn't have been built on the
outside and actually built into some of
the cluster API cube admin stuff in fact
we actually did some stuff as part of
that for cube admin that was some of the
proto work for the CSRs there was
there's absolutely no reason that that
has to be built in and so I think this
is you know a similar thing where you
know we could take the csr stuff
actually layer it on with extension
mechanisms using the multi provider type
of point of view to be able to do it and
I think and I think that sort of
universal truth and discovery and those
sort of lower-level systems for me is a
good litmus test of the types of things
that we should be driving towards

Jordan Liggit:
just just to Joe's point a couple notes
there when cubelet bootstrapping and
CSRs were added custom resources did not
exist cube Adam did not exist cluster
API did not exist so if those things did
exist
Kiba admin get exhausting one three
really the the bootstrap tokens actually
predated any automatic see us our stuff
that we had a freaky diamond interesting
and
exact based client authentication did
not exist so the ability to give a
qiblah to keep config and it stay like
I'm gonna make an API call go get the
cred and like be able to get it what
deal whatever mechanism you wanted none
of they're all one of those things did
not exist if they had it is likely that
the csr and people had bootstrapping
stuff would look different and and would
have been built on top or as an
extension 

Joe Beda
yeah but we've been continued
to sort of add more features and expand
the footprint of the csr stuff beyond
just service accounts and just couplets

Jordan Liggit:
I wouldn't say we're expanding it I
would say we are actually like
documenting and clarifying what it
currently is and what promises and
guarantees it has so again my
perspective on the dynamic gothis stuff
is that we should unblock gaps that
exist in my mind that is the OIG support
like we should go slow and not add build
an address and then we should see how
people use the multi OID seeking
building or the custom mechanisms and
reevaluate
whether this very widely enough when
there's demand and the controls that can
be placed surrounded are sufficient to
build it into the qadi servitor I'm not
in favor of that but if further evidence
and the rest of the project
besides this is the direction I'd be
willing to hear that but I wouldn't
start there.

John Belamaric:
I mean damn you's a sexy little stand-up
and we're pretty much out of time
yeah I just know what we need to do next

Dims:
he pees willing to write some of this up
but I think we need to work on some
decision tree that Jordan mentioned
right at the beginning

Tim St Clair
just to be clear that decision tree is
really hard as I mentioned earlier given
the history around so it's gonna be a
little bit of a what would we like
versus what have we done in the past and
where we are yes waiter me one reader
you made up yeah 

John Belamaric:
yeah obviously we can
only affect the future not the best so
let's let's look at the decision tree
for what we think if the right principle
is moving forward and that's that's the
best we can do you okay well thank you everybody
obviously the baking agenda I think that
hippy has volunteered to write this up
the notes and try to summarize and send
it out to the mailing list so please
look forward to that and reply and you
know clarify whether it's accurate or
not if probably easiest if you put that
in a Google Doc and then people can
comment on it as opposed to having that
mailing thread if that's acceptable to
everybody thank you very much everybody
interesting discussion and we will talk
to you all soon and you guys by
