#+TITLE: 457 Ineligible Endpoints


* Goal
[[https://github.com/cncf/apisnoop/issues/457][ticket]]
#+BEGIN_QUOTE
Description of the Issue:

Currently, APISnoop list of ineligible endpoints is owned and managed exclusively by ii.coop.
To make the process more transparent and community-owned the list would be moved to the k/k repo under testdata in the form of a .yaml file.
Community interaction:

The topic was discussed and the January 26, 2021Conformance Office Hours Meeting and referred to the SIG Architecture meeting on January 28, 2021.
The SIG Architecture meeting attendees agreed on this proposed change.
Target outcome for this issue:

    Copy Ineligible endpoints data from APISnoop to ineligible_enpoints.yaml under k/k testdata
    All future adding and removing of endpoints to the list will be done via pull requests.
    The ineligible endpoints list in APISnoop is generated by consuming the ineligible_enpoints.yaml for k/k.

#+END_QUOTE
* Setup
At the moment ineligible_endpoint is a view.  We want to make it a table that we insert into from the address, similar to the open api spec.
This view cascades down into our eligible_endpoint which cascades into all our conformance coverage stuff, so we will need to build those up again.
* Drop View
#+BEGIN_SRC sql-mode
drop view conformance.ineligible_endpoint cascade ;
#+END_SRC

#+RESULTS:
#+begin_SRC example
NOTICE:  drop cascades to 6 other objects
DETAIL:  drop cascades to view conformance.eligible_endpoint
drop cascades to materialized view conformance.eligible_endpoint_coverage
drop cascades to view conformance.new_endpoint
drop cascades to view conformance.progress
drop cascades to view conformance.coverage_per_release
drop cascades to view testing.untested_stable_endpoint
DROP VIEW
#+end_SRC

* Create table
It should match the fields in the ineligible yaml: https://github.com/kubernetes/kubernetes/blob/master/test/conformance/testdata/ineligible_endpoints.yaml

#+BEGIN_SRC sql-mode
create table conformance.ineligible_endpoint(
      endpoint text not null,
      reason text,
      link text,
      primary key (endpoint)
);
#+END_SRC

#+RESULTS:
#+begin_SRC example
CREATE TABLE
#+end_SRC
* Function to insert into the table
We can model this off the open_api funciton, though we need to convert from yaml to json first
    #+begin_src sql-mode
      create or replace function load_ineligible_endpoints (
        custom_release text default null
        )
      returns text AS $$
      from string import Template
      import json
      from urllib.request import urlopen, urlretrieve
      import urllib
      import yaml

      K8S_REPO_URL = "https://raw.githubusercontent.com/kubernetes/kubernetes/"
      MAIN_BRANCH = "master"
      INELIGIBLE_ENDPOINTS = "/test/conformance/testdata/ineligible_endpoints.yaml"
      INELIGIBLE_URL = K8S_REPO_URL + MAIN_BRANCH + INELIGIBLE_ENDPOINTS

      ineligible_endpoints = json.dumps(yaml.safe_load(urlopen(INELIGIBLE_URL)))
      sql = Template("""
                   with jsonb_array AS (
                   select jsonb_array_elements('${ineligible_endpoints}'::jsonb) as endpoint_data)
                   insert into conformance.ineligible_endpoint(endpoint, reason, link)
                      select
                      (endpoint_data->>'endpoint') as endpoint,
                      (endpoint_data->>'reason') as reason,
                      (endpoint_data->>'link') as link
                      from jsonb_array;
                   """).substitute(ineligible_endpoints = ineligible_endpoints.replace("'","''"))
      try:
          plpy.execute(sql)
          return 'ineligible endpoints loaded!'
      except Exception as e:
          return 'error occured: ', e
     $$ LANGUAGE plpython3u;
    #+end_src

    #+RESULTS:
    #+begin_SRC example
    apisnoop$# apisnoop$# apisnoop$# apisnoop$# apisnoop$# apisnoop$# apisnoop$# apisnoop$# apisnoop$# apisnoop$# apisnoop$# apisnoop$# apisnoop$# apisnoop$# apisnoop$# apisnoop$# apisnoop$# apisnoop$# apisnoop$# apisnoop$# apisnoop$# apisnoop$# apisnoop$# apisnoop$# apisnoop$# apisnoop$# apisnoop$# apisnoop$# CREATE FUNCTION
    #+end_SRC
#+BEGIN_SRC sql-mode
select * from load_ineligible_endpoints();
#+END_SRC

#+RESULTS:
#+begin_SRC example
  load_ineligible_endpoints
------------------------------
 ineligible endpoints loaded!
(1 row)

#+end_SRC

#+BEGIN_SRC sql-mode
select count(*) from conformance.ineligible_endpoint;
#+END_SRC

#+RESULTS:
#+begin_SRC example
 count
-------
    78
(1 row)

#+end_SRC
* Update our table_views_functions appropriately!
