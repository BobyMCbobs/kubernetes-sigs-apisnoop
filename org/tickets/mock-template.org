# -*- ii: apisnoop; -*-
#+TITLE: Mock Ticket Template
#+AUTHOR: ii team
#+TODO: TODO(t) NEXT(n) IN-PROGRESS(i) BLOCKED(b) | DONE(d)
#+OPTIONS: toc:nil tags:nil todo:nil
#+EXPORT_SELECT_TAGS: export
* TODO [0%] In-Cluster Setup                                    :neverexport:
  :PROPERTIES:
  :LOGGING:  nil
  :END:
** TODO Connect demo to right eye

   #+begin_src tmate :session foo:hello :eval never-export
     echo "What parts of Kubernetes do you depend on $USER?"
   #+end_src
** Tilt Up
   #+begin_src tmate :session foo:hello :eval never-export
     cd ~/apisnoop
     tilt up --host 0.0.0.0
   #+end_src
** TODO Verify Pods Running
   #+begin_src shell
     kubectl get pods
   #+end_src

   #+RESULTS:
   #+begin_example
   NAME                                    READY   STATUS    RESTARTS   AGE
   apisnoop-auditlogger-6c6865b55c-rqgk6   1/1     Running   3          5m5s
   hasura-75bf5b5869-jhwhs                 1/1     Running   2          4m53s
   kubemacs-0                              1/1     Running   0          18m
   pgadmin-fbb7659d7-slrc8                 1/1     Running   0          5m5s
   postgres-6d9dbb6fc8-6cczj               1/1     Running   0          5m5s
   webapp-864985fb7f-r5c4g                 1/1     Running   0          4m14s
   #+end_example

** TODO Check it all worked

   #+begin_src sql-mode :results replace
     \d+
   #+end_src

   #+RESULTS:
   #+begin_SRC example
                                                                              List of relations
    Schema |               Name               |       Type        |  Owner   |  Size   |                                    Description                                    
   --------+----------------------------------+-------------------+----------+---------+-----------------------------------------------------------------------------------
    public | api_operation                    | view              | apisnoop | 0 bytes | 
    public | api_operation_material           | materialized view | apisnoop | 3056 kB | details on each operation_id as taken from the openAPI spec
    public | api_operation_parameter_material | materialized view | apisnoop | 5008 kB | the parameters for each operation_id in open API spec
    public | audit_event                      | view              | apisnoop | 0 bytes | a record for each audit event in an audit log
    public | bucket_job_swagger               | table             | apisnoop | 3128 kB | metadata for audit events  and their respective swagger.json
    public | endpoint_coverage                | view              | apisnoop | 0 bytes | the test hits and conformance test hits per operation_id & other useful details
    public | endpoint_coverage_material       | materialized view | apisnoop | 144 kB  | 
    public | endpoints_hit_by_new_test        | view              | apisnoop | 0 bytes | list endpoints hit during our live auditing alongside their current test coverage
    public | projected_change_in_coverage     | view              | apisnoop | 0 bytes | overview of coverage stats if the e2e suite included your tests
    public | raw_audit_event                  | table             | apisnoop | 380 MB  | a record for each audit event in an audit log
    public | stable_endpoint_stats            | view              | apisnoop | 0 bytes | coverage stats for entire test run, looking only at its stable endpoints
    public | tests                            | view              | apisnoop | 0 bytes | 
    public | untested_stable_core_endpoints   | view              | apisnoop | 0 bytes | list stable core endpoints not hit by any tests, according to their test run
    public | useragents                       | view              | apisnoop | 0 bytes | 
   (14 rows)

   #+end_SRC

** TODO Check current coverage
   #+NAME: stable endpoint stats
   #+begin_src sql-mode
     select * from stable_endpoint_stats where job != 'live';
   #+end_src

* Identify an untested feature Using APISnoop                        :export:

According to this APIsnoop query, there are still some remaining ConfigMap endpoints which are untested.

  #+NAME: untested_stable_core_endpoints
  #+begin_src sql-mode :eval never-export :exports both :session none
    SELECT
      operation_id,
      -- k8s_action,
      path,
      description
      FROM untested_stable_core_endpoints
      where path not like '%volume%'
      -- and operation_id ilike '%%'
     ORDER BY operation_id desc
     LIMIT 25
           ;
  #+end_src

  #+RESULTS: untested_stable_core_endpoints
  #+begin_SRC example
                      operation_id                    |                                path                                 |                          description                           
  ----------------------------------------------------+---------------------------------------------------------------------+----------------------------------------------------------------
   replaceCoreV1NamespaceStatus                       | /api/v1/namespaces/{name}/status                                    | replace status of the specified Namespace
   replaceCoreV1NamespaceFinalize                     | /api/v1/namespaces/{name}/finalize                                  | replace finalize of the specified Namespace
   replaceCoreV1NamespacedServiceStatus               | /api/v1/namespaces/{namespace}/services/{name}/status               | replace status of the specified Service
   replaceCoreV1NamespacedResourceQuotaStatus         | /api/v1/namespaces/{namespace}/resourcequotas/{name}/status         | replace status of the specified ResourceQuota
   replaceCoreV1NamespacedReplicationControllerStatus | /api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status | replace status of the specified ReplicationController
   replaceCoreV1NamespacedPodTemplate                 | /api/v1/namespaces/{namespace}/podtemplates/{name}                  | replace the specified PodTemplate
   replaceCoreV1NamespacedPodStatus                   | /api/v1/namespaces/{namespace}/pods/{name}/status                   | replace status of the specified Pod
   replaceCoreV1NamespacedEvent                       | /api/v1/namespaces/{namespace}/events/{name}                        | replace the specified Event
   replaceCoreV1NamespacedEndpoints                   | /api/v1/namespaces/{namespace}/endpoints/{name}                     | replace the specified Endpoints
   readCoreV1NodeStatus                               | /api/v1/nodes/{name}/status                                         | read status of the specified Node
   readCoreV1NamespaceStatus                          | /api/v1/namespaces/{name}/status                                    | read status of the specified Namespace
   readCoreV1NamespacedServiceStatus                  | /api/v1/namespaces/{namespace}/services/{name}/status               | read status of the specified Service
   readCoreV1NamespacedResourceQuotaStatus            | /api/v1/namespaces/{namespace}/resourcequotas/{name}/status         | read status of the specified ResourceQuota
   readCoreV1NamespacedReplicationControllerStatus    | /api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status | read status of the specified ReplicationController
   readCoreV1NamespacedPodStatus                      | /api/v1/namespaces/{namespace}/pods/{name}/status                   | read status of the specified Pod
   readCoreV1NamespacedEvent                          | /api/v1/namespaces/{namespace}/events/{name}                        | read the specified Event
   readCoreV1ComponentStatus                          | /api/v1/componentstatuses/{name}                                    | read the specified ComponentStatus
   patchCoreV1NodeStatus                              | /api/v1/nodes/{name}/status                                         | partially update status of the specified Node
   patchCoreV1NamespaceStatus                         | /api/v1/namespaces/{name}/status                                    | partially update status of the specified Namespace
   patchCoreV1NamespacedServiceStatus                 | /api/v1/namespaces/{namespace}/services/{name}/status               | partially update status of the specified Service
   patchCoreV1NamespacedServiceAccount                | /api/v1/namespaces/{namespace}/serviceaccounts/{name}               | partially update the specified ServiceAccount
   patchCoreV1NamespacedService                       | /api/v1/namespaces/{namespace}/services/{name}                      | partially update the specified Service
   patchCoreV1NamespacedResourceQuotaStatus           | /api/v1/namespaces/{namespace}/resourcequotas/{name}/status         | partially update status of the specified ResourceQuota
   patchCoreV1NamespacedResourceQuota                 | /api/v1/namespaces/{namespace}/resourcequotas/{name}                | partially update the specified ResourceQuota
   patchCoreV1NamespacedReplicationControllerStatus   | /api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status | partially update status of the specified ReplicationController
  (25 rows)

  #+end_SRC

* Use API Reference to Lightly Document the Feature                  :export:
- [[https://kubernetes.io/docs/reference/kubernetes-api/][Kubernetes API Reference Docs]]
- [client-go - MyResourceReplaceMe](https://github.com/kubernetes/client-go/blob/master/kubernetes/typed/core/v1/resourcename.go)

* The mock test                                                      :export:
** Test outline
1. Create a ConfigMap with a static label

2. Patch the ConfigMap with a new Label and updated data

3. Get the ConfigMap to ensure it's patched

4. List all ConfigMaps in all Namespaces
   find the ConfigMap(1)
   ensure that the ConfigMap is found and is patched

5. Delete Namespaced ConfigMap(1) via a Collection with a LabelSelector

** Example in Go
   #+begin_src go  :imports '("fmt" "flag" "os" "k8s.io/apimachinery/pkg/apis/meta/v1" "k8s.io/client-go/kubernetes" "k8s.io/client-go/tools/clientcmd")
     // uses the current context in kubeconfig
     kubeconfig := flag.String("kubeconfig",
       fmt.Sprintf("%v/%v/%v", os.Getenv("HOME"), ".kube", "config"),
       "(optional) absolute path to the kubeconfig file")
     flag.Parse()
     config, err := clientcmd.BuildConfigFromFlags("", *kubeconfig)
     if err != nil {
       fmt.Println(err)
     }
     // make our work easier to find in the audit_event queries
     config.UserAgent = "live-test-pod-count"
     // creates the clientset
     clientset, _ := kubernetes.NewForConfig(config)
     // access the API to list pods
     pods, _ := clientset.CoreV1().Pods("").List(v1.ListOptions{})
     fmt.Printf("There are %d pods in the cluster\n", len(pods.Items))
     #+end_src

     #+RESULTS:
     #+begin_src go
     There are 20 pods in the cluster
     #+end_src

   #+begin_src go
     package main

     import (
       "fmt"
       "flag"
       "os"
       // v1 "k8s.io/api/core/v1"
       // metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
       "k8s.io/client-go/kubernetes"
       // "k8s.io/apimachinery/pkg/types"
       "k8s.io/client-go/tools/clientcmd"
     )

     func main() {
       // uses the current context in kubeconfig
       kubeconfig := flag.String("kubeconfig", fmt.Sprintf("%v/%v/%v", os.Getenv("HOME"), ".kube", "config"), "(optional) absolute path to the kubeconfig file")
       flag.Parse()
       config, err := clientcmd.BuildConfigFromFlags("", *kubeconfig)
       if err != nil {
         fmt.Println(err)
       }
       // make our work easier to find in the audit_event queries
       config.UserAgent = "live-test-writing"
       // creates the clientset
       ClientSet, _ := kubernetes.NewForConfig(config)

       // write test here
       fmt.Println("[status] complete")

     }
   #+end_src

   #+RESULTS:
   #+begin_src go
   #+end_src

* Verify Increase it Coverage with APISnoop                          :export:
Discover useragents:
  #+begin_src sql-mode :eval never-export :exports both :session none
    select distinct useragent from audit_event where bucket='apisnoop' and useragent not like 'kube%' and useragent not like 'coredns%' and useragent not like 'kindnetd%' and useragent like 'live%';
  #+end_src

#+begin_src sql-mode :exports both :session none
select * from endpoints_hit_by_new_test where useragent like 'live%'; 
#+end_src

  #+begin_src sql-mode :eval never-export :exports both :session none
    select * from projected_change_in_coverage;
  #+end_src

  #+RESULTS:
  #+begin_SRC example
     category    | total_endpoints | old_coverage | new_coverage | change_in_number 
  ---------------+-----------------+--------------+--------------+------------------
   test_coverage |             438 |          183 |          183 |                0
  (1 row)

  #+end_SRC

* Final notes :export:
If a test with these calls gets merged, **Conformance coverage will go up by 2 points**

-----  
/sig testing
 
/sig architecture  

/area conformance  

* Open Tasks
  Set any open tasks here, using org-todo
** DONE Live Your Best Life
* Footnotes                                                     :neverexport:
  :PROPERTIES:
  :CUSTOM_ID: footnotes
  :END:
