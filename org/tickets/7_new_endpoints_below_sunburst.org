#+TITLE: 07: New Endpoints showing beneath sunburst
#+AUTHOR: Zach Mandeville
#+TODO: TODO NEXT IN-PROGRESS | DONE

* The Ticket
  Each release will introduce a set of new endpoints. When we see an increase in endpoints, it would be good to know where it increased.

The cleanest place to put it currently is beneath the sunburst. This list should show:

    the name of the endpoint
    whether it is tested
    whether it is conformance tested

Each endpoint should be a link that, when clicked, brings you to that zoom depth on the sunburst (e.g. /1.19.0/stable/core/readFooV1Event)
* The Strategy
  All our information is comiong from a set of json files.  I think the simplest implementation of this, and the easiest to maintain, would be to load two json files upon clicking a release: the release, and the version that came before.  Setup a store for the previous release, and then a derived store that compares current and previous release.  This derived store would just be a filtered set of endpoints as a basic except: ones that are in current that are not in previous.  We can then display these beneath the sunburst.
  
  I prefer doing this work in the snoopApp, rather than building a new json file to consume.  Partially this is because it would muddy up the filespace in our resources and another thing we must remember to update and commit, but mostly bedcause it feels redundant as the information is already in the jsons we have now, with iminaml logic needed to pull it out.

* Process
** DONE Ensure app's list of release is sorted by semver
   CLOSED: [2020-07-20 Mon 16:22]
 We currently have a store called '[[file:~/tmp/ii/snoopApp/src/store/index.js::export const latestRelease = readable(][latestRelease]]' that sorts all our releases and then grabs the first one.  It was a bit ungainly to look at, and caused some naming confusion.  A release in the store should refer to the entire object, that includes all its test information and endpoitns and such.  A release has a _version_ though, that would be its semver.  

And so I made a new store called 'versions' which is our RELEASES constant sorted.  I then have latestVersion, which'll be the first in versions...and previousVersion, which will be whatever is the index of the activeRelease.version in our versions list plus 1.

** DONE Create store: previousRelease
   CLOSED: [2020-07-20 Mon 16:31]
If there is no previous version (e.g. we are at 1.15) then i set previousRelease to an empty object.  This way I can add boolean conditionals to display info only if previousRelease is not empty.  I want to revisit this on another day, with different eyes, to see if I can make this cleaner as setting it to an empty object feels a lil obscure.

if there _is_ a previous version, then I just set previousRelease to be $releases[previousVersion]
   
** DONE Ensure that when a release is loaded, the previous release is loaded as well
   CLOSED: [2020-07-20 Mon 16:31]
   I can do this by adjusting the 'afterUpdate' logic we run in each of our sunburst routes that checks to see if activeRelease is empty, and if so fetches from github.  Now I just do that for activeRelease and previousRelease.

This is straightforward, though I found myself typing nearly identical functions 3 times.  Perhaps i can lift it out into a helper function to keep things dry.
** IN-PROGRESS Build a derived store for new endpoints
   This is whichever endpoints are in activeRelease but not previousRelease...though what would be slick is to base it on whatever is the current set of _filtered_ endpoints...this way, if we are on a section (like stable)...we could see just the new endpoints in stable.
** create list component for new endpoints on sunburst
** celebrate
* Conclusion
  
