# -*- ii: apisnoop; -*-
#+TITLE: Mock Ticket Template
#+AUTHOR: ii team
#+TODO: TODO(t) NEXT(n) IN-PROGRESS(i) BLOCKED(b) | DONE(d)
#+OPTIONS: toc:nil tags:nil todo:nil
#+EXPORT_SELECT_TAGS: export
* TODO [0%] In-Cluster Setup                                    :neverexport:
  :PROPERTIES:
  :LOGGING:  nil
  :END:
** TODO Connect demo to right eye

   #+begin_src tmate :session foo:hello :eval never-export
     echo "What parts of Kubernetes do you depend on $USER?"
   #+end_src
** Tilt Up
   #+begin_src tmate :session foo:hello :eval never-export
     cd ~/apisnoop
     tilt up --host 0.0.0.0
   #+end_src
** TODO Verify Pods Running
   #+begin_src shell
     kubectl get pods
   #+end_src

   #+RESULTS:
   #+begin_example
   NAME                                    READY   STATUS    RESTARTS   AGE
   apisnoop-auditlogger-6c6865b55c-rqgk6   1/1     Running   3          5m5s
   hasura-75bf5b5869-jhwhs                 1/1     Running   2          4m53s
   kubemacs-0                              1/1     Running   0          18m
   pgadmin-fbb7659d7-slrc8                 1/1     Running   0          5m5s
   postgres-6d9dbb6fc8-6cczj               1/1     Running   0          5m5s
   webapp-864985fb7f-r5c4g                 1/1     Running   0          4m14s
   #+end_example

** TODO Check it all worked

   #+begin_src sql-mode :results replace
     \d+
   #+end_src

   #+RESULTS:
   #+begin_SRC example
                                                                              List of relations
    Schema |               Name               |       Type        |  Owner   |  Size   |                                    Description                                    
   --------+----------------------------------+-------------------+----------+---------+-----------------------------------------------------------------------------------
    public | api_operation                    | view              | apisnoop | 0 bytes | 
    public | api_operation_material           | materialized view | apisnoop | 3056 kB | details on each operation_id as taken from the openAPI spec
    public | api_operation_parameter_material | materialized view | apisnoop | 5008 kB | the parameters for each operation_id in open API spec
    public | audit_event                      | view              | apisnoop | 0 bytes | a record for each audit event in an audit log
    public | bucket_job_swagger               | table             | apisnoop | 3128 kB | metadata for audit events  and their respective swagger.json
    public | endpoint_coverage                | view              | apisnoop | 0 bytes | the test hits and conformance test hits per operation_id & other useful details
    public | endpoint_coverage_material       | materialized view | apisnoop | 144 kB  | 
    public | endpoints_hit_by_new_test        | view              | apisnoop | 0 bytes | list endpoints hit during our live auditing alongside their current test coverage
    public | projected_change_in_coverage     | view              | apisnoop | 0 bytes | overview of coverage stats if the e2e suite included your tests
    public | raw_audit_event                  | table             | apisnoop | 357 MB  | a record for each audit event in an audit log
    public | stable_endpoint_stats            | view              | apisnoop | 0 bytes | coverage stats for entire test run, looking only at its stable endpoints
    public | tests                            | view              | apisnoop | 0 bytes | 
    public | untested_stable_core_endpoints   | view              | apisnoop | 0 bytes | list stable core endpoints not hit by any tests, according to their test run
    public | useragents                       | view              | apisnoop | 0 bytes | 
   (14 rows)

   #+end_SRC

** TODO Check current coverage
   #+NAME: stable endpoint stats
   #+begin_src sql-mode
     select * from stable_endpoint_stats where job != 'live';
   #+end_src

* Identify an untested feature Using APISnoop                        :export:

According to this APIsnoop query, there are still some remaining ConfigMap endpoints which are untested.

  #+NAME: untested_stable_core_endpoints
  #+begin_src sql-mode :eval never-export :exports both :session none
    SELECT
      operation_id,
      -- k8s_action,
      path,
      description
      FROM untested_stable_core_endpoints
      where path not like '%volume%'
      and operation_id ilike '%ReplicationController%'
     ORDER BY operation_id desc
     -- LIMIT 25
           ;
  #+end_src

  #+RESULTS: untested_stable_core_endpoints
  #+begin_SRC example
                       operation_id                      |                                path                                 |                          description                           
  -------------------------------------------------------+---------------------------------------------------------------------+----------------------------------------------------------------
   replaceCoreV1NamespacedReplicationControllerStatus    | /api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status | replace status of the specified ReplicationController
   readCoreV1NamespacedReplicationControllerStatus       | /api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status | read status of the specified ReplicationController
   patchCoreV1NamespacedReplicationControllerStatus      | /api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status | partially update status of the specified ReplicationController
   patchCoreV1NamespacedReplicationControllerScale       | /api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale  | partially update scale of the specified ReplicationController
   patchCoreV1NamespacedReplicationController            | /api/v1/namespaces/{namespace}/replicationcontrollers/{name}        | partially update the specified ReplicationController
   listCoreV1ReplicationControllerForAllNamespaces       | /api/v1/replicationcontrollers                                      | list or watch objects of kind ReplicationController
   deleteCoreV1CollectionNamespacedReplicationController | /api/v1/namespaces/{namespace}/replicationcontrollers               | delete collection of ReplicationController
  (7 rows)

  #+end_SRC

* Use API Reference to Lightly Document the Feature                  :export:
- [[https://kubernetes.io/docs/reference/kubernetes-api/][Kubernetes API Reference Docs]]
- [client-go - ReplicationController](https://github.com/kubernetes/client-go/blob/master/kubernetes/typed/core/v1/replicationcontroller.go)

* The mock test                                                      :export:
** Test outline
1. Create a ReplicationController with a static label

2. Patch the ReplicationController with a new Label and updated data

3. Patch the ReplicationController's status

4. Patch/Scale the ReplicationController's Replica count to 2 Replicas

5. Get the ReplicationController

6. Replace the ReplicationController's Status

7. List all ReplicationControllers in all Namespaces
   find the ReplicationControllers(1)
   ensure that the ReplicationController is found and is patched

8. Delete Namespaced ReplicationControllers(1) via a Collection with a LabelSelector

** Example in Go
   #+begin_src go
     package main

     import (
       "encoding/json"
       "fmt"
       "flag"
       "os"

       v1 "k8s.io/api/core/v1"
       metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
       "k8s.io/client-go/kubernetes"
       "k8s.io/apimachinery/pkg/runtime/schema"
       "k8s.io/apimachinery/pkg/types"
       autoscalingv1 "k8s.io/api/autoscaling/v1"
       "k8s.io/client-go/dynamic"
       "k8s.io/client-go/tools/clientcmd"
       //"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
     )

     func main() {
       // uses the current context in kubeconfig
       kubeconfig := flag.String("kubeconfig", fmt.Sprintf("%v/%v/%v", os.Getenv("HOME"), ".kube", "config"), "(optional) absolute path to the kubeconfig file")
       flag.Parse()
       config, err := clientcmd.BuildConfigFromFlags("", *kubeconfig)
       if err != nil {
         fmt.Println(err)
       }
       // make our work easier to find in the audit_event queries
       config.UserAgent = "live-test-writing"
       // creates the clientset
       ClientSet, _ := kubernetes.NewForConfig(config)
       DynamicClientSet, err := dynamic.NewForConfig(config)
       if err != nil {
         panic(err)
       }
       rcResource := schema.GroupVersionResource{Group: "", Version: "v1", Resource: "replicationcontroller"}

       testRcName := "rc-test"
       testRcNamespace := "default"
       testRcInitalReplicaCount := int32(1)

       rcTest := v1.ReplicationController{
           ObjectMeta: metav1.ObjectMeta{
               Name: testRcName,
               Labels: map[string]string{"test-rc-static": "true"},
           },
           Spec: v1.ReplicationControllerSpec{
               Replicas: &testRcInitalReplicaCount,
               Selector: map[string]string{"test-rc-static": "true"},
               Template: &v1.PodTemplateSpec{
                   ObjectMeta: metav1.ObjectMeta{
                       Name: testRcName,
                       Labels: map[string]string{"test-rc-static": "true"},
                   },
                   Spec: v1.PodSpec{
                       Containers: []v1.Container{{
                           Name: testRcName,
                           Image: "nginx",
                       }},
                   },
               },
           },
       }

       // Create a ReplicationController
       _, err = ClientSet.CoreV1().ReplicationControllers(testRcNamespace).Create(&rcTest)
       if err != nil {
           fmt.Println(err)
           return
       }
       fmt.Println("[status] created ReplicationController")

       rcLabelPatchPayload, err := json.Marshal(v1.ReplicationController{
           ObjectMeta: metav1.ObjectMeta{
               Labels: map[string]string{"test-rc": "patched"},
           },
       })
       if err != nil {
         fmt.Println(err)
         return
       }
       // Patch the ReplicationController
       _, err = ClientSet.CoreV1().ReplicationControllers(testRcNamespace).Patch(testRcName, types.StrategicMergePatchType, []byte(rcLabelPatchPayload))
       if err != nil {
         fmt.Println(err)
         return
       }
       fmt.Println("[status] patched ReplicationController")

       rcStatusPatchPayload, err := json.Marshal(map[string]interface{}{
          "apiVersion": "v1",
          "kind": "ReplicationController",
         "metadata": map[string]interface{}{
             "name": testRcName,
          },
          "status": map[string]interface{}{
             "ReadyReplicas": 0,
          },
       })
       if err != nil {
           fmt.Println(err)
           return
       }

       // Patch the ReplicationController's status
       _, err = DynamicClientSet.Resource(rcResource).Namespace(testRcName).Patch(testRcName, types.StrategicMergePatchType, []byte(rcStatusPatchPayload), metav1.PatchOptions{}, "status")
       if err != nil {
           fmt.Println(err)
           return
       }
       fmt.Println("[status] patched status of ReplicationController")

       rcScale := autoscalingv1.Scale{
           Spec: autoscalingv1.ScaleSpec{
               Replicas: 2,
           },
       }

       // Patch the ReplicationController's scale
       _, err = ClientSet.CoreV1().ReplicationControllers(testRcNamespace).UpdateScale(testRcName, &rcScale)
       if err != nil {
           fmt.Println(err)
           return
       }
       fmt.Println("[status] patched scale of ReplicationController")

       // Get the ReplicationController
       rc, err := ClientSet.CoreV1().ReplicationControllers(testRcNamespace).Get(testRcName, metav1.GetOptions{})
       if err != nil {
           fmt.Println(err)
           return
       }
       if rc.ObjectMeta.Labels["test-rc"] != "patched" {
           fmt.Println(err)
           return
       }
       fmt.Println("[status] fetched ReplicationController")

       rcStatusUpdatePayload := rc
       rcStatusUpdatePayload.Status.ReadyReplicas = 1

       // Replace the ReplicationController's status	
       _, err = ClientSet.CoreV1().ReplicationControllers(testRcNamespace).UpdateStatus(rcStatusUpdatePayload)
       if err != nil {
           fmt.Println(err)
           return
       }
       fmt.Println("[status] updated ReplicationController status")

       rcs, err := ClientSet.CoreV1().ReplicationControllers("").List(metav1.ListOptions{LabelSelector: "test-rc-static=true"})
       if err != nil {
           fmt.Println(err)
           return
       }
       if len(rcs.Items) == 0 {
           fmt.Println("[error] no ReplicationController were found")
       }
       foundRc := false
       for _, rcItem := range rcs.Items {
           if rcItem.ObjectMeta.Name == testRcName &&
              rcItem.ObjectMeta.Namespace == testRcNamespace &&
              rcItem.ObjectMeta.Labels["test-rc-static"] == "true" &&
              rcItem.ObjectMeta.Labels["test-rc"] == "patched" {
              foundRc = true
           }
       }
       if foundRc == false {
           fmt.Println("[error] unable to find ReplicationController")
       }
       fmt.Println("[status] retrieved all ReplicationControllers selecting with LabelSelector")

       // Delete ReplicationController
       err = ClientSet.CoreV1().ReplicationControllers(testRcNamespace).DeleteCollection(&metav1.DeleteOptions{}, metav1.ListOptions{LabelSelector: "test-rc-static=true"})
       if err != nil {
         fmt.Println(err)
         return
       }
       fmt.Println("[status] deleted ReplicationController")

       fmt.Println("[status] complete")

     }
   #+end_src

   #+RESULTS:
   #+begin_src go
   [status] created ReplicationController
   [status] patched ReplicationController
   the server could not find the requested resource
   #+end_src

* Verify Increase it Coverage with APISnoop                          :export:
Discover useragents:
  #+begin_src sql-mode :eval never-export :exports both :session none
    select distinct useragent from audit_event where bucket='apisnoop' and useragent not like 'kube%' and useragent not like 'coredns%' and useragent not like 'kindnetd%' and useragent like 'live%';
  #+end_src

#+begin_src sql-mode :exports both :session none
select * from endpoints_hit_by_new_test where useragent like 'live%'; 
#+end_src

  #+begin_src sql-mode :eval never-export :exports both :session none
    select * from projected_change_in_coverage;
  #+end_src

  #+RESULTS:
  #+begin_SRC example
     category    | total_endpoints | old_coverage | new_coverage | change_in_number 
  ---------------+-----------------+--------------+--------------+------------------
   test_coverage |             438 |          183 |          183 |                0
  (1 row)

  #+end_SRC

* Final notes :export:
If a test with these calls gets merged, **Conformance coverage will go up by 2 points**

-----  
/sig testing
 
/sig architecture  

/area conformance  

* Open Tasks
  Set any open tasks here, using org-todo
** DONE Live Your Best Life
* Footnotes                                                     :neverexport:
  :PROPERTIES:
  :CUSTOM_ID: footnotes
  :END:
