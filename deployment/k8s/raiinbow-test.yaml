# TODO Add nginx config map to our deployment yaml
#    so now we have our webapp and updated ports, next is to ensure our nginx setup is added to this deployment 
#    We will save this to our deployments as raiinbow-test.yaml for testing.
   
#    #+NAME: yaml with webclient

# raiinbow.yaml

apiVersion: v1
kind: List
metadata: {}
items:
- apiVersion: v1
  kind: Service
  metadata:
    name: apisnoop-hasura
  spec:
    type: ClusterIP
    clusterIP: None
    selector:
      io.apisnoop.graphql: apisnoop-hasura
    ports:
    - name: "8080"
      port: 8080
      targetPort: 8080
- apiVersion: v1
  kind: Service
  metadata:
    name: apisnoop-postgres
  spec:
    selector:
      io.apisnoop.db: apisnoop-postgres
    ports:
    - name: "5432"
      port: 5432
      targetPort: 5432
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: apisnoop-hasura
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.apisnoop.graphql: apisnoop-hasura
    template:
      metadata:
        labels:
          io.apisnoop.graphql: apisnoop-hasura
      spec:
        restartPolicy: Always
        containers:
        - name: apisnoop-hasura
          image: "raiinbow/hasura:2019-12-08-21-00"
          ports:
          - containerPort: 8080
          env:
          - name: HASURA_GRAPHQL_DATABASE_URL
            value: "postgres://apisnoop:s3cretsauc3@apisnoop-postgres:5432/apisnoop"
          - name: HASURA_GRAPHQL_ENABLE_CONSOLE
            value: "true"
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: apisnoop-postgres
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.apisnoop.db: apisnoop-postgres
    template:
      metadata:
        labels:
          io.apisnoop.db: apisnoop-postgres
      spec:
        restartPolicy: Always
        containers:
        - name: apisnoop-postgres
          image: "raiinbow/postgres:2019-12-03-14-19"
          ports:
          - containerPort: 5432
          livenessProbe:
            exec:
              command:
              - "pg_isready"
              - "-U"
              - "apisnoop"
            failureThreshold: 5
            periodSeconds: 10
            timeoutSeconds: 5
          env:
          - name: POSTGRES_DB
            value: apisnoop
          - name: POSTGRES_USER
            value: apisnoop
          - name: POSTGRES_PASSWORD
            value: s3cretsauc3
          - name: PGDATABASE
            value: apisnoop
          - name: PGUSER
            value: apisnoop
          # - name: APISNOOP_BASELINE_BUCKET
          #   value: ci-kubernetes-e2e-gce-cos-k8sbeta-default
          # - name: APISNOOP_BASELINE_JOB
          #   value: 1141312231231223
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: apisnoop-auditlogger
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: apisnoop-auditlogger
    template:
      metadata:
        labels:
          app: apisnoop-auditlogger
      spec:
        containers:
          - name: apisnoop-auditlogger
            image: "raiinbow/auditlogger:2019-12-08-31"
            #command:
            #  - "sleep"
            #args: 
            #  - "+Inf"
            ports:
              - containerPort: 9900
            env:
              - name: PG_CONNECTION_STRING
                value: postgres://apisnoop:s3cretsauc3@apisnoop-postgres:5432/apisnoop
- apiVersion: v1
  kind: Service
  metadata:
    name: apisnoop-auditlogger
  spec:
    ports:
      - port: 9900
        targetPort: 9900
    selector:
      app: apisnoop-auditlogger
    clusterIP: 10.96.96.96
    type: ClusterIP
- apiVersion: auditregistration.k8s.io/v1alpha1
  kind: AuditSink
  metadata:
    name: apisnoop-auditlogger
  spec:
    policy:
      level: Metadata
      stages:
      - ResponseComplete
    webhook:
      throttle:
        qps: 10
        burst: 15
      clientConfig:
        #url: "http://apisnoop-auditlogger.kube-system.svc.cluster.local:9900/events"
        # svc cluster ip of apisnoop-auditlogger
        url: "http://10.96.96.96:9900/events"
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: apisnoop-webapp
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: apisnoop-webapp
    template:
      metadata:
        labels:
          app: apisnoop-webapp
      spec:
        containers:
          - name: apisnoop-webapp
            image: "raiinbow/webapp:latest"
            #command:
            #  - "sleep"
            #args: 
            #  - "+Inf"
            ports:
              - containerPort: 3000
- apiVersion: v1
  kind: Service
  metadata:
    name: apisnoop-webapp
  spec:
    ports:
      - port: 3000
        targetPort: 3000
    selector:
      app: apisnoop-webapp
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: apisnoop-nginx-proxy
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: apisnoop-nginx-proxy
    template:
      metadata:
        labels:
          app: apisnoop-nginx-proxy
      spec:
        containers:
        - name: apisnoop-nginx-proxy
          image: docker.io/nginx
          imagePullPolicy: Always
          ports:
            - containerPort: 30000
          env:
            - name: TZ
              value: "Pacific/Auckland"
          volumeMounts:
            - name: apisnoop-nginx-proxy-data
              mountPath: /etc/nginx/conf.d
          readinessProbe:
            tcpSocket:
              port: 30000
            initialDelaySeconds: 2
            periodSeconds: 10
          livenessProbe:
            tcpSocket:
              port: 30000
            initialDelaySeconds: 1
            periodSeconds: 20
        volumes:
          - name: apisnoop-nginx-proxy-data
            configMap:
              name: apisnoop-nginx-proxy-data
              items:
                - key: default.conf
                  path: default.conf
- apiVersion: v1
  kind: Service
  metadata:
    name: apisnoop-nginx-proxy
  spec:
    type: NodePort
    ports:
    - port: 30000
      nodePort: 30000
    selector:
      app: apisnoop-nginx-proxy
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: apisnoop-nginx-proxy-data
  data:
    default.conf: |
      server {
        listen 30000;
        #location ^~ /explorer {
        #  proxy_pass http://apisnoop-hasura:8080;
        #}
        location ^~ / {
          proxy_pass http://apisnoop-webapp:3000;
        }
      }
