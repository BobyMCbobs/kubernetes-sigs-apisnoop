apiVersion: v1
kind: ConfigMap
metadata:
  name: tcp-services
  namespace: ingress-nginx
data:
  5432: "kubemacs/postgres:5432"
  10350: "kubemacs/kubemacs-tilt:10350"
---
#https://kubernetes.github.io/ingress-nginx/examples/rewrite/
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: hasura-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    # nginx.ingress.kubernetes.io/auth-type: basic
    # nginx.ingress.kubernetes.io/auth-secret: basic-auth
    # nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required - Hasura Console'
spec:
  rules:
  - http:
      paths:
      - path: /hasura(/|$)(.*)
        backend:
          serviceName: hasura
          servicePort: 8080
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: tilt-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$2
spec:
  rules:
  - http:
      paths:
      - path: /tilt(/|$)(.*)
        backend:
          serviceName: kubemacs-tilt
          servicePort: 10350
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: graphql-ingress
  # annotations:
  #   nginx.ingress.kubernetes.io/auth-type: basic
  #   nginx.ingress.kubernetes.io/auth-secret: basic-auth
  #   nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required - Hasura /v1 API'
  # annotations:
  #   nginx.ingress.kubernetes.io/app-root: /v1
spec:
  rules:
  - http:
      paths:
      - path: /v1
        backend:
          serviceName: hasura
          servicePort: 8080
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: webapp-ingress
  # annotations:
  #   nginx.ingress.kubernetes.io/app-root: /
  # annotations:
  #   nginx.ingress.kubernetes.io/rewrite-target: /$2
spec:
  rules:
  - http:
      paths:
      - path: /
        backend:
          serviceName: webapp
          servicePort: 3000
---
# https://www.pgadmin.org/docs/pgadmin4/latest/container_deployment.html#http-via-nginx
# kubectl delete secret basic-auth
# kubectl create secret generic basic-auth --from-literal=auth=$(htpasswd -n ii)
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: pgadmin-ingress
  annotations:
    # nginx.ingress.kubernetes.io/app-root: /pgadmin
    # nginx.ingress.kubernetes.io/rewrite-target: /$2
    # nginx.ingress.kubernetes.io/configuration-snippet: |
    #   proxy_set_header X-Script-Name "/pgadmin";
    #   proxy_set_header X-Scheme $scheme;
    #   proxy_set_header Host $host;
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: basic-auth
    nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required - PgAdmin'
    # nginx.ingress.kubernetes.io/server-alias: "pgadmin.hh.ii.coop, pgadmin.hh.ii.nz"
  # annotations:
  #   nginx.ingress.kubernetes.io/app-root: /
  # annotations:
  #   nginx.ingress.kubernetes.io/rewrite-target: /$2
spec:
  rules:
  - host: pgadmin.hh.ii.coop
    http:
      paths:
      # - path: /pgadmin(/|$)(.*)
      # - path: /pgadmin
      - path: /
        backend:
          serviceName: pgadmin
          servicePort: 80
# ---
# apiVersion: extensions/v1beta1
# kind: Ingress
# metadata:
#   name: pgadmin-browser-ingress
#   annotations:
#     # nginx.ingress.kubernetes.io/app-root: /pgadmin
#     nginx.ingress.kubernetes.io/rewrite-target: /pgadmin/browser/$2
#     nginx.ingress.kubernetes.io/configuration-snippet: |
#       proxy_set_header X-Script-Name "/pgadmin";
#       proxy_set_header X-Scheme $scheme;
#       proxy_set_header Host $host;
#     nginx.ingress.kubernetes.io/auth-type: basic
#     nginx.ingress.kubernetes.io/auth-secret: basic-auth
#     nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required - PgAdmin'
#   # annotations:
#   #   nginx.ingress.kubernetes.io/app-root: /
#   # annotations:
#   #   nginx.ingress.kubernetes.io/rewrite-target: /$2
# spec:
#   rules:
#   - http:
#       paths:
#       # - path: /pgadmin
#       - path: /pgadmin/browser(/|$)(.*)
#         backend:
#           serviceName: pgadmin
#           servicePort: 80
