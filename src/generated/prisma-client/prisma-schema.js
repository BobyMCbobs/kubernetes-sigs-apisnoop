module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.0). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateAuditLog {
  count: Int!
}

type AggregateEndpoint {
  count: Int!
}

type AggregateEvent {
  count: Int!
}

type AggregateObjectReference {
  count: Int!
}

type AggregateResponseStatus {
  count: Int!
}

type AggregateTest {
  count: Int!
}

type AggregateUserInfo {
  count: Int!
}

type AuditLog {
  id: ID!
  createdAt: DateTime!
  job: String!
  bucket: String!
  version: String!
  jobVersion: String!
  masterOsImage: String!
  infraCommit: String!
  nodeOsImage: String!
  pod: String!
  passed: Boolean!
  result: String!
  timestamp: Int!
  endpoints(where: EndpointWhereInput, orderBy: EndpointOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Endpoint!]
}

type AuditLogConnection {
  pageInfo: PageInfo!
  edges: [AuditLogEdge]!
  aggregate: AggregateAuditLog!
}

input AuditLogCreateInput {
  id: ID
  job: String!
  bucket: String!
  version: String!
  jobVersion: String!
  masterOsImage: String!
  infraCommit: String!
  nodeOsImage: String!
  pod: String!
  passed: Boolean!
  result: String!
  timestamp: Int!
  endpoints: EndpointCreateManyWithoutAuditLogInput
}

input AuditLogCreateOneInput {
  create: AuditLogCreateInput
  connect: AuditLogWhereUniqueInput
}

input AuditLogCreateOneWithoutEndpointsInput {
  create: AuditLogCreateWithoutEndpointsInput
  connect: AuditLogWhereUniqueInput
}

input AuditLogCreateWithoutEndpointsInput {
  id: ID
  job: String!
  bucket: String!
  version: String!
  jobVersion: String!
  masterOsImage: String!
  infraCommit: String!
  nodeOsImage: String!
  pod: String!
  passed: Boolean!
  result: String!
  timestamp: Int!
}

type AuditLogEdge {
  node: AuditLog!
  cursor: String!
}

enum AuditLogOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  job_ASC
  job_DESC
  bucket_ASC
  bucket_DESC
  version_ASC
  version_DESC
  jobVersion_ASC
  jobVersion_DESC
  masterOsImage_ASC
  masterOsImage_DESC
  infraCommit_ASC
  infraCommit_DESC
  nodeOsImage_ASC
  nodeOsImage_DESC
  pod_ASC
  pod_DESC
  passed_ASC
  passed_DESC
  result_ASC
  result_DESC
  timestamp_ASC
  timestamp_DESC
}

type AuditLogPreviousValues {
  id: ID!
  createdAt: DateTime!
  job: String!
  bucket: String!
  version: String!
  jobVersion: String!
  masterOsImage: String!
  infraCommit: String!
  nodeOsImage: String!
  pod: String!
  passed: Boolean!
  result: String!
  timestamp: Int!
}

type AuditLogSubscriptionPayload {
  mutation: MutationType!
  node: AuditLog
  updatedFields: [String!]
  previousValues: AuditLogPreviousValues
}

input AuditLogSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AuditLogWhereInput
  AND: [AuditLogSubscriptionWhereInput!]
  OR: [AuditLogSubscriptionWhereInput!]
  NOT: [AuditLogSubscriptionWhereInput!]
}

input AuditLogUpdateDataInput {
  job: String
  bucket: String
  version: String
  jobVersion: String
  masterOsImage: String
  infraCommit: String
  nodeOsImage: String
  pod: String
  passed: Boolean
  result: String
  timestamp: Int
  endpoints: EndpointUpdateManyWithoutAuditLogInput
}

input AuditLogUpdateInput {
  job: String
  bucket: String
  version: String
  jobVersion: String
  masterOsImage: String
  infraCommit: String
  nodeOsImage: String
  pod: String
  passed: Boolean
  result: String
  timestamp: Int
  endpoints: EndpointUpdateManyWithoutAuditLogInput
}

input AuditLogUpdateManyMutationInput {
  job: String
  bucket: String
  version: String
  jobVersion: String
  masterOsImage: String
  infraCommit: String
  nodeOsImage: String
  pod: String
  passed: Boolean
  result: String
  timestamp: Int
}

input AuditLogUpdateOneRequiredInput {
  create: AuditLogCreateInput
  update: AuditLogUpdateDataInput
  upsert: AuditLogUpsertNestedInput
  connect: AuditLogWhereUniqueInput
}

input AuditLogUpdateOneRequiredWithoutEndpointsInput {
  create: AuditLogCreateWithoutEndpointsInput
  update: AuditLogUpdateWithoutEndpointsDataInput
  upsert: AuditLogUpsertWithoutEndpointsInput
  connect: AuditLogWhereUniqueInput
}

input AuditLogUpdateWithoutEndpointsDataInput {
  job: String
  bucket: String
  version: String
  jobVersion: String
  masterOsImage: String
  infraCommit: String
  nodeOsImage: String
  pod: String
  passed: Boolean
  result: String
  timestamp: Int
}

input AuditLogUpsertNestedInput {
  update: AuditLogUpdateDataInput!
  create: AuditLogCreateInput!
}

input AuditLogUpsertWithoutEndpointsInput {
  update: AuditLogUpdateWithoutEndpointsDataInput!
  create: AuditLogCreateWithoutEndpointsInput!
}

input AuditLogWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  job: String
  job_not: String
  job_in: [String!]
  job_not_in: [String!]
  job_lt: String
  job_lte: String
  job_gt: String
  job_gte: String
  job_contains: String
  job_not_contains: String
  job_starts_with: String
  job_not_starts_with: String
  job_ends_with: String
  job_not_ends_with: String
  bucket: String
  bucket_not: String
  bucket_in: [String!]
  bucket_not_in: [String!]
  bucket_lt: String
  bucket_lte: String
  bucket_gt: String
  bucket_gte: String
  bucket_contains: String
  bucket_not_contains: String
  bucket_starts_with: String
  bucket_not_starts_with: String
  bucket_ends_with: String
  bucket_not_ends_with: String
  version: String
  version_not: String
  version_in: [String!]
  version_not_in: [String!]
  version_lt: String
  version_lte: String
  version_gt: String
  version_gte: String
  version_contains: String
  version_not_contains: String
  version_starts_with: String
  version_not_starts_with: String
  version_ends_with: String
  version_not_ends_with: String
  jobVersion: String
  jobVersion_not: String
  jobVersion_in: [String!]
  jobVersion_not_in: [String!]
  jobVersion_lt: String
  jobVersion_lte: String
  jobVersion_gt: String
  jobVersion_gte: String
  jobVersion_contains: String
  jobVersion_not_contains: String
  jobVersion_starts_with: String
  jobVersion_not_starts_with: String
  jobVersion_ends_with: String
  jobVersion_not_ends_with: String
  masterOsImage: String
  masterOsImage_not: String
  masterOsImage_in: [String!]
  masterOsImage_not_in: [String!]
  masterOsImage_lt: String
  masterOsImage_lte: String
  masterOsImage_gt: String
  masterOsImage_gte: String
  masterOsImage_contains: String
  masterOsImage_not_contains: String
  masterOsImage_starts_with: String
  masterOsImage_not_starts_with: String
  masterOsImage_ends_with: String
  masterOsImage_not_ends_with: String
  infraCommit: String
  infraCommit_not: String
  infraCommit_in: [String!]
  infraCommit_not_in: [String!]
  infraCommit_lt: String
  infraCommit_lte: String
  infraCommit_gt: String
  infraCommit_gte: String
  infraCommit_contains: String
  infraCommit_not_contains: String
  infraCommit_starts_with: String
  infraCommit_not_starts_with: String
  infraCommit_ends_with: String
  infraCommit_not_ends_with: String
  nodeOsImage: String
  nodeOsImage_not: String
  nodeOsImage_in: [String!]
  nodeOsImage_not_in: [String!]
  nodeOsImage_lt: String
  nodeOsImage_lte: String
  nodeOsImage_gt: String
  nodeOsImage_gte: String
  nodeOsImage_contains: String
  nodeOsImage_not_contains: String
  nodeOsImage_starts_with: String
  nodeOsImage_not_starts_with: String
  nodeOsImage_ends_with: String
  nodeOsImage_not_ends_with: String
  pod: String
  pod_not: String
  pod_in: [String!]
  pod_not_in: [String!]
  pod_lt: String
  pod_lte: String
  pod_gt: String
  pod_gte: String
  pod_contains: String
  pod_not_contains: String
  pod_starts_with: String
  pod_not_starts_with: String
  pod_ends_with: String
  pod_not_ends_with: String
  passed: Boolean
  passed_not: Boolean
  result: String
  result_not: String
  result_in: [String!]
  result_not_in: [String!]
  result_lt: String
  result_lte: String
  result_gt: String
  result_gte: String
  result_contains: String
  result_not_contains: String
  result_starts_with: String
  result_not_starts_with: String
  result_ends_with: String
  result_not_ends_with: String
  timestamp: Int
  timestamp_not: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  timestamp_lt: Int
  timestamp_lte: Int
  timestamp_gt: Int
  timestamp_gte: Int
  endpoints_every: EndpointWhereInput
  endpoints_some: EndpointWhereInput
  endpoints_none: EndpointWhereInput
  AND: [AuditLogWhereInput!]
  OR: [AuditLogWhereInput!]
  NOT: [AuditLogWhereInput!]
}

input AuditLogWhereUniqueInput {
  id: ID
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Endpoint {
  id: ID!
  createdAt: DateTime!
  auditLog: AuditLog!
  operationID: String!
  level: String!
  category: String!
  kind: String
  group: String
  description: String
  version: String
  path: String
  hits: Int!
  testHits: Int!
  conformanceHits: Int!
  isDeprecated: Boolean!
}

type EndpointConnection {
  pageInfo: PageInfo!
  edges: [EndpointEdge]!
  aggregate: AggregateEndpoint!
}

input EndpointCreateInput {
  id: ID
  auditLog: AuditLogCreateOneWithoutEndpointsInput!
  operationID: String!
  level: String!
  category: String!
  kind: String
  group: String
  description: String
  version: String
  path: String
  hits: Int!
  testHits: Int!
  conformanceHits: Int!
  isDeprecated: Boolean!
}

input EndpointCreateManyInput {
  create: [EndpointCreateInput!]
  connect: [EndpointWhereUniqueInput!]
}

input EndpointCreateManyWithoutAuditLogInput {
  create: [EndpointCreateWithoutAuditLogInput!]
  connect: [EndpointWhereUniqueInput!]
}

input EndpointCreateWithoutAuditLogInput {
  id: ID
  operationID: String!
  level: String!
  category: String!
  kind: String
  group: String
  description: String
  version: String
  path: String
  hits: Int!
  testHits: Int!
  conformanceHits: Int!
  isDeprecated: Boolean!
}

type EndpointEdge {
  node: Endpoint!
  cursor: String!
}

enum EndpointOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  operationID_ASC
  operationID_DESC
  level_ASC
  level_DESC
  category_ASC
  category_DESC
  kind_ASC
  kind_DESC
  group_ASC
  group_DESC
  description_ASC
  description_DESC
  version_ASC
  version_DESC
  path_ASC
  path_DESC
  hits_ASC
  hits_DESC
  testHits_ASC
  testHits_DESC
  conformanceHits_ASC
  conformanceHits_DESC
  isDeprecated_ASC
  isDeprecated_DESC
}

type EndpointPreviousValues {
  id: ID!
  createdAt: DateTime!
  operationID: String!
  level: String!
  category: String!
  kind: String
  group: String
  description: String
  version: String
  path: String
  hits: Int!
  testHits: Int!
  conformanceHits: Int!
  isDeprecated: Boolean!
}

input EndpointScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  operationID: String
  operationID_not: String
  operationID_in: [String!]
  operationID_not_in: [String!]
  operationID_lt: String
  operationID_lte: String
  operationID_gt: String
  operationID_gte: String
  operationID_contains: String
  operationID_not_contains: String
  operationID_starts_with: String
  operationID_not_starts_with: String
  operationID_ends_with: String
  operationID_not_ends_with: String
  level: String
  level_not: String
  level_in: [String!]
  level_not_in: [String!]
  level_lt: String
  level_lte: String
  level_gt: String
  level_gte: String
  level_contains: String
  level_not_contains: String
  level_starts_with: String
  level_not_starts_with: String
  level_ends_with: String
  level_not_ends_with: String
  category: String
  category_not: String
  category_in: [String!]
  category_not_in: [String!]
  category_lt: String
  category_lte: String
  category_gt: String
  category_gte: String
  category_contains: String
  category_not_contains: String
  category_starts_with: String
  category_not_starts_with: String
  category_ends_with: String
  category_not_ends_with: String
  kind: String
  kind_not: String
  kind_in: [String!]
  kind_not_in: [String!]
  kind_lt: String
  kind_lte: String
  kind_gt: String
  kind_gte: String
  kind_contains: String
  kind_not_contains: String
  kind_starts_with: String
  kind_not_starts_with: String
  kind_ends_with: String
  kind_not_ends_with: String
  group: String
  group_not: String
  group_in: [String!]
  group_not_in: [String!]
  group_lt: String
  group_lte: String
  group_gt: String
  group_gte: String
  group_contains: String
  group_not_contains: String
  group_starts_with: String
  group_not_starts_with: String
  group_ends_with: String
  group_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  version: String
  version_not: String
  version_in: [String!]
  version_not_in: [String!]
  version_lt: String
  version_lte: String
  version_gt: String
  version_gte: String
  version_contains: String
  version_not_contains: String
  version_starts_with: String
  version_not_starts_with: String
  version_ends_with: String
  version_not_ends_with: String
  path: String
  path_not: String
  path_in: [String!]
  path_not_in: [String!]
  path_lt: String
  path_lte: String
  path_gt: String
  path_gte: String
  path_contains: String
  path_not_contains: String
  path_starts_with: String
  path_not_starts_with: String
  path_ends_with: String
  path_not_ends_with: String
  hits: Int
  hits_not: Int
  hits_in: [Int!]
  hits_not_in: [Int!]
  hits_lt: Int
  hits_lte: Int
  hits_gt: Int
  hits_gte: Int
  testHits: Int
  testHits_not: Int
  testHits_in: [Int!]
  testHits_not_in: [Int!]
  testHits_lt: Int
  testHits_lte: Int
  testHits_gt: Int
  testHits_gte: Int
  conformanceHits: Int
  conformanceHits_not: Int
  conformanceHits_in: [Int!]
  conformanceHits_not_in: [Int!]
  conformanceHits_lt: Int
  conformanceHits_lte: Int
  conformanceHits_gt: Int
  conformanceHits_gte: Int
  isDeprecated: Boolean
  isDeprecated_not: Boolean
  AND: [EndpointScalarWhereInput!]
  OR: [EndpointScalarWhereInput!]
  NOT: [EndpointScalarWhereInput!]
}

type EndpointSubscriptionPayload {
  mutation: MutationType!
  node: Endpoint
  updatedFields: [String!]
  previousValues: EndpointPreviousValues
}

input EndpointSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EndpointWhereInput
  AND: [EndpointSubscriptionWhereInput!]
  OR: [EndpointSubscriptionWhereInput!]
  NOT: [EndpointSubscriptionWhereInput!]
}

input EndpointUpdateDataInput {
  auditLog: AuditLogUpdateOneRequiredWithoutEndpointsInput
  operationID: String
  level: String
  category: String
  kind: String
  group: String
  description: String
  version: String
  path: String
  hits: Int
  testHits: Int
  conformanceHits: Int
  isDeprecated: Boolean
}

input EndpointUpdateInput {
  auditLog: AuditLogUpdateOneRequiredWithoutEndpointsInput
  operationID: String
  level: String
  category: String
  kind: String
  group: String
  description: String
  version: String
  path: String
  hits: Int
  testHits: Int
  conformanceHits: Int
  isDeprecated: Boolean
}

input EndpointUpdateManyDataInput {
  operationID: String
  level: String
  category: String
  kind: String
  group: String
  description: String
  version: String
  path: String
  hits: Int
  testHits: Int
  conformanceHits: Int
  isDeprecated: Boolean
}

input EndpointUpdateManyInput {
  create: [EndpointCreateInput!]
  update: [EndpointUpdateWithWhereUniqueNestedInput!]
  upsert: [EndpointUpsertWithWhereUniqueNestedInput!]
  delete: [EndpointWhereUniqueInput!]
  connect: [EndpointWhereUniqueInput!]
  set: [EndpointWhereUniqueInput!]
  disconnect: [EndpointWhereUniqueInput!]
  deleteMany: [EndpointScalarWhereInput!]
  updateMany: [EndpointUpdateManyWithWhereNestedInput!]
}

input EndpointUpdateManyMutationInput {
  operationID: String
  level: String
  category: String
  kind: String
  group: String
  description: String
  version: String
  path: String
  hits: Int
  testHits: Int
  conformanceHits: Int
  isDeprecated: Boolean
}

input EndpointUpdateManyWithoutAuditLogInput {
  create: [EndpointCreateWithoutAuditLogInput!]
  delete: [EndpointWhereUniqueInput!]
  connect: [EndpointWhereUniqueInput!]
  set: [EndpointWhereUniqueInput!]
  disconnect: [EndpointWhereUniqueInput!]
  update: [EndpointUpdateWithWhereUniqueWithoutAuditLogInput!]
  upsert: [EndpointUpsertWithWhereUniqueWithoutAuditLogInput!]
  deleteMany: [EndpointScalarWhereInput!]
  updateMany: [EndpointUpdateManyWithWhereNestedInput!]
}

input EndpointUpdateManyWithWhereNestedInput {
  where: EndpointScalarWhereInput!
  data: EndpointUpdateManyDataInput!
}

input EndpointUpdateWithoutAuditLogDataInput {
  operationID: String
  level: String
  category: String
  kind: String
  group: String
  description: String
  version: String
  path: String
  hits: Int
  testHits: Int
  conformanceHits: Int
  isDeprecated: Boolean
}

input EndpointUpdateWithWhereUniqueNestedInput {
  where: EndpointWhereUniqueInput!
  data: EndpointUpdateDataInput!
}

input EndpointUpdateWithWhereUniqueWithoutAuditLogInput {
  where: EndpointWhereUniqueInput!
  data: EndpointUpdateWithoutAuditLogDataInput!
}

input EndpointUpsertWithWhereUniqueNestedInput {
  where: EndpointWhereUniqueInput!
  update: EndpointUpdateDataInput!
  create: EndpointCreateInput!
}

input EndpointUpsertWithWhereUniqueWithoutAuditLogInput {
  where: EndpointWhereUniqueInput!
  update: EndpointUpdateWithoutAuditLogDataInput!
  create: EndpointCreateWithoutAuditLogInput!
}

input EndpointWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  auditLog: AuditLogWhereInput
  operationID: String
  operationID_not: String
  operationID_in: [String!]
  operationID_not_in: [String!]
  operationID_lt: String
  operationID_lte: String
  operationID_gt: String
  operationID_gte: String
  operationID_contains: String
  operationID_not_contains: String
  operationID_starts_with: String
  operationID_not_starts_with: String
  operationID_ends_with: String
  operationID_not_ends_with: String
  level: String
  level_not: String
  level_in: [String!]
  level_not_in: [String!]
  level_lt: String
  level_lte: String
  level_gt: String
  level_gte: String
  level_contains: String
  level_not_contains: String
  level_starts_with: String
  level_not_starts_with: String
  level_ends_with: String
  level_not_ends_with: String
  category: String
  category_not: String
  category_in: [String!]
  category_not_in: [String!]
  category_lt: String
  category_lte: String
  category_gt: String
  category_gte: String
  category_contains: String
  category_not_contains: String
  category_starts_with: String
  category_not_starts_with: String
  category_ends_with: String
  category_not_ends_with: String
  kind: String
  kind_not: String
  kind_in: [String!]
  kind_not_in: [String!]
  kind_lt: String
  kind_lte: String
  kind_gt: String
  kind_gte: String
  kind_contains: String
  kind_not_contains: String
  kind_starts_with: String
  kind_not_starts_with: String
  kind_ends_with: String
  kind_not_ends_with: String
  group: String
  group_not: String
  group_in: [String!]
  group_not_in: [String!]
  group_lt: String
  group_lte: String
  group_gt: String
  group_gte: String
  group_contains: String
  group_not_contains: String
  group_starts_with: String
  group_not_starts_with: String
  group_ends_with: String
  group_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  version: String
  version_not: String
  version_in: [String!]
  version_not_in: [String!]
  version_lt: String
  version_lte: String
  version_gt: String
  version_gte: String
  version_contains: String
  version_not_contains: String
  version_starts_with: String
  version_not_starts_with: String
  version_ends_with: String
  version_not_ends_with: String
  path: String
  path_not: String
  path_in: [String!]
  path_not_in: [String!]
  path_lt: String
  path_lte: String
  path_gt: String
  path_gte: String
  path_contains: String
  path_not_contains: String
  path_starts_with: String
  path_not_starts_with: String
  path_ends_with: String
  path_not_ends_with: String
  hits: Int
  hits_not: Int
  hits_in: [Int!]
  hits_not_in: [Int!]
  hits_lt: Int
  hits_lte: Int
  hits_gt: Int
  hits_gte: Int
  testHits: Int
  testHits_not: Int
  testHits_in: [Int!]
  testHits_not_in: [Int!]
  testHits_lt: Int
  testHits_lte: Int
  testHits_gt: Int
  testHits_gte: Int
  conformanceHits: Int
  conformanceHits_not: Int
  conformanceHits_in: [Int!]
  conformanceHits_not_in: [Int!]
  conformanceHits_lt: Int
  conformanceHits_lte: Int
  conformanceHits_gt: Int
  conformanceHits_gte: Int
  isDeprecated: Boolean
  isDeprecated_not: Boolean
  AND: [EndpointWhereInput!]
  OR: [EndpointWhereInput!]
  NOT: [EndpointWhereInput!]
}

input EndpointWhereUniqueInput {
  id: ID
}

type Event {
  id: ID!
  createdAt: DateTime!
  kind: String
  level: String!
  auditID: ID
  stage: String!
  requestURI: String!
  verb: String!
  user: UserInfo!
  sourceIPs: [String!]!
  userAgent: String
  responseStatus: ResponseStatus
  requestObject: ObjectReference
  requestReceivedTimestamp: String
  stageTimestamp: String
  annotations: Json
}

type EventConnection {
  pageInfo: PageInfo!
  edges: [EventEdge]!
  aggregate: AggregateEvent!
}

input EventCreateInput {
  id: ID
  kind: String
  level: String!
  auditID: ID
  stage: String!
  requestURI: String!
  verb: String!
  user: UserInfoCreateOneWithoutEventInput!
  sourceIPs: EventCreatesourceIPsInput
  userAgent: String
  responseStatus: ResponseStatusCreateOneWithoutEventInput
  requestObject: ObjectReferenceCreateOneWithoutEventInput
  requestReceivedTimestamp: String
  stageTimestamp: String
  annotations: Json
}

input EventCreateOneWithoutRequestObjectInput {
  create: EventCreateWithoutRequestObjectInput
  connect: EventWhereUniqueInput
}

input EventCreateOneWithoutResponseStatusInput {
  create: EventCreateWithoutResponseStatusInput
  connect: EventWhereUniqueInput
}

input EventCreateOneWithoutUserInput {
  create: EventCreateWithoutUserInput
  connect: EventWhereUniqueInput
}

input EventCreatesourceIPsInput {
  set: [String!]
}

input EventCreateWithoutRequestObjectInput {
  id: ID
  kind: String
  level: String!
  auditID: ID
  stage: String!
  requestURI: String!
  verb: String!
  user: UserInfoCreateOneWithoutEventInput!
  sourceIPs: EventCreatesourceIPsInput
  userAgent: String
  responseStatus: ResponseStatusCreateOneWithoutEventInput
  requestReceivedTimestamp: String
  stageTimestamp: String
  annotations: Json
}

input EventCreateWithoutResponseStatusInput {
  id: ID
  kind: String
  level: String!
  auditID: ID
  stage: String!
  requestURI: String!
  verb: String!
  user: UserInfoCreateOneWithoutEventInput!
  sourceIPs: EventCreatesourceIPsInput
  userAgent: String
  requestObject: ObjectReferenceCreateOneWithoutEventInput
  requestReceivedTimestamp: String
  stageTimestamp: String
  annotations: Json
}

input EventCreateWithoutUserInput {
  id: ID
  kind: String
  level: String!
  auditID: ID
  stage: String!
  requestURI: String!
  verb: String!
  sourceIPs: EventCreatesourceIPsInput
  userAgent: String
  responseStatus: ResponseStatusCreateOneWithoutEventInput
  requestObject: ObjectReferenceCreateOneWithoutEventInput
  requestReceivedTimestamp: String
  stageTimestamp: String
  annotations: Json
}

type EventEdge {
  node: Event!
  cursor: String!
}

enum EventOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  kind_ASC
  kind_DESC
  level_ASC
  level_DESC
  auditID_ASC
  auditID_DESC
  stage_ASC
  stage_DESC
  requestURI_ASC
  requestURI_DESC
  verb_ASC
  verb_DESC
  userAgent_ASC
  userAgent_DESC
  requestReceivedTimestamp_ASC
  requestReceivedTimestamp_DESC
  stageTimestamp_ASC
  stageTimestamp_DESC
  annotations_ASC
  annotations_DESC
}

type EventPreviousValues {
  id: ID!
  createdAt: DateTime!
  kind: String
  level: String!
  auditID: ID
  stage: String!
  requestURI: String!
  verb: String!
  sourceIPs: [String!]!
  userAgent: String
  requestReceivedTimestamp: String
  stageTimestamp: String
  annotations: Json
}

type EventSubscriptionPayload {
  mutation: MutationType!
  node: Event
  updatedFields: [String!]
  previousValues: EventPreviousValues
}

input EventSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EventWhereInput
  AND: [EventSubscriptionWhereInput!]
  OR: [EventSubscriptionWhereInput!]
  NOT: [EventSubscriptionWhereInput!]
}

input EventUpdateInput {
  kind: String
  level: String
  auditID: ID
  stage: String
  requestURI: String
  verb: String
  user: UserInfoUpdateOneRequiredWithoutEventInput
  sourceIPs: EventUpdatesourceIPsInput
  userAgent: String
  responseStatus: ResponseStatusUpdateOneWithoutEventInput
  requestObject: ObjectReferenceUpdateOneWithoutEventInput
  requestReceivedTimestamp: String
  stageTimestamp: String
  annotations: Json
}

input EventUpdateManyMutationInput {
  kind: String
  level: String
  auditID: ID
  stage: String
  requestURI: String
  verb: String
  sourceIPs: EventUpdatesourceIPsInput
  userAgent: String
  requestReceivedTimestamp: String
  stageTimestamp: String
  annotations: Json
}

input EventUpdateOneRequiredWithoutRequestObjectInput {
  create: EventCreateWithoutRequestObjectInput
  update: EventUpdateWithoutRequestObjectDataInput
  upsert: EventUpsertWithoutRequestObjectInput
  connect: EventWhereUniqueInput
}

input EventUpdateOneRequiredWithoutResponseStatusInput {
  create: EventCreateWithoutResponseStatusInput
  update: EventUpdateWithoutResponseStatusDataInput
  upsert: EventUpsertWithoutResponseStatusInput
  connect: EventWhereUniqueInput
}

input EventUpdateOneRequiredWithoutUserInput {
  create: EventCreateWithoutUserInput
  update: EventUpdateWithoutUserDataInput
  upsert: EventUpsertWithoutUserInput
  connect: EventWhereUniqueInput
}

input EventUpdatesourceIPsInput {
  set: [String!]
}

input EventUpdateWithoutRequestObjectDataInput {
  kind: String
  level: String
  auditID: ID
  stage: String
  requestURI: String
  verb: String
  user: UserInfoUpdateOneRequiredWithoutEventInput
  sourceIPs: EventUpdatesourceIPsInput
  userAgent: String
  responseStatus: ResponseStatusUpdateOneWithoutEventInput
  requestReceivedTimestamp: String
  stageTimestamp: String
  annotations: Json
}

input EventUpdateWithoutResponseStatusDataInput {
  kind: String
  level: String
  auditID: ID
  stage: String
  requestURI: String
  verb: String
  user: UserInfoUpdateOneRequiredWithoutEventInput
  sourceIPs: EventUpdatesourceIPsInput
  userAgent: String
  requestObject: ObjectReferenceUpdateOneWithoutEventInput
  requestReceivedTimestamp: String
  stageTimestamp: String
  annotations: Json
}

input EventUpdateWithoutUserDataInput {
  kind: String
  level: String
  auditID: ID
  stage: String
  requestURI: String
  verb: String
  sourceIPs: EventUpdatesourceIPsInput
  userAgent: String
  responseStatus: ResponseStatusUpdateOneWithoutEventInput
  requestObject: ObjectReferenceUpdateOneWithoutEventInput
  requestReceivedTimestamp: String
  stageTimestamp: String
  annotations: Json
}

input EventUpsertWithoutRequestObjectInput {
  update: EventUpdateWithoutRequestObjectDataInput!
  create: EventCreateWithoutRequestObjectInput!
}

input EventUpsertWithoutResponseStatusInput {
  update: EventUpdateWithoutResponseStatusDataInput!
  create: EventCreateWithoutResponseStatusInput!
}

input EventUpsertWithoutUserInput {
  update: EventUpdateWithoutUserDataInput!
  create: EventCreateWithoutUserInput!
}

input EventWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  kind: String
  kind_not: String
  kind_in: [String!]
  kind_not_in: [String!]
  kind_lt: String
  kind_lte: String
  kind_gt: String
  kind_gte: String
  kind_contains: String
  kind_not_contains: String
  kind_starts_with: String
  kind_not_starts_with: String
  kind_ends_with: String
  kind_not_ends_with: String
  level: String
  level_not: String
  level_in: [String!]
  level_not_in: [String!]
  level_lt: String
  level_lte: String
  level_gt: String
  level_gte: String
  level_contains: String
  level_not_contains: String
  level_starts_with: String
  level_not_starts_with: String
  level_ends_with: String
  level_not_ends_with: String
  auditID: ID
  auditID_not: ID
  auditID_in: [ID!]
  auditID_not_in: [ID!]
  auditID_lt: ID
  auditID_lte: ID
  auditID_gt: ID
  auditID_gte: ID
  auditID_contains: ID
  auditID_not_contains: ID
  auditID_starts_with: ID
  auditID_not_starts_with: ID
  auditID_ends_with: ID
  auditID_not_ends_with: ID
  stage: String
  stage_not: String
  stage_in: [String!]
  stage_not_in: [String!]
  stage_lt: String
  stage_lte: String
  stage_gt: String
  stage_gte: String
  stage_contains: String
  stage_not_contains: String
  stage_starts_with: String
  stage_not_starts_with: String
  stage_ends_with: String
  stage_not_ends_with: String
  requestURI: String
  requestURI_not: String
  requestURI_in: [String!]
  requestURI_not_in: [String!]
  requestURI_lt: String
  requestURI_lte: String
  requestURI_gt: String
  requestURI_gte: String
  requestURI_contains: String
  requestURI_not_contains: String
  requestURI_starts_with: String
  requestURI_not_starts_with: String
  requestURI_ends_with: String
  requestURI_not_ends_with: String
  verb: String
  verb_not: String
  verb_in: [String!]
  verb_not_in: [String!]
  verb_lt: String
  verb_lte: String
  verb_gt: String
  verb_gte: String
  verb_contains: String
  verb_not_contains: String
  verb_starts_with: String
  verb_not_starts_with: String
  verb_ends_with: String
  verb_not_ends_with: String
  user: UserInfoWhereInput
  userAgent: String
  userAgent_not: String
  userAgent_in: [String!]
  userAgent_not_in: [String!]
  userAgent_lt: String
  userAgent_lte: String
  userAgent_gt: String
  userAgent_gte: String
  userAgent_contains: String
  userAgent_not_contains: String
  userAgent_starts_with: String
  userAgent_not_starts_with: String
  userAgent_ends_with: String
  userAgent_not_ends_with: String
  responseStatus: ResponseStatusWhereInput
  requestObject: ObjectReferenceWhereInput
  requestReceivedTimestamp: String
  requestReceivedTimestamp_not: String
  requestReceivedTimestamp_in: [String!]
  requestReceivedTimestamp_not_in: [String!]
  requestReceivedTimestamp_lt: String
  requestReceivedTimestamp_lte: String
  requestReceivedTimestamp_gt: String
  requestReceivedTimestamp_gte: String
  requestReceivedTimestamp_contains: String
  requestReceivedTimestamp_not_contains: String
  requestReceivedTimestamp_starts_with: String
  requestReceivedTimestamp_not_starts_with: String
  requestReceivedTimestamp_ends_with: String
  requestReceivedTimestamp_not_ends_with: String
  stageTimestamp: String
  stageTimestamp_not: String
  stageTimestamp_in: [String!]
  stageTimestamp_not_in: [String!]
  stageTimestamp_lt: String
  stageTimestamp_lte: String
  stageTimestamp_gt: String
  stageTimestamp_gte: String
  stageTimestamp_contains: String
  stageTimestamp_not_contains: String
  stageTimestamp_starts_with: String
  stageTimestamp_not_starts_with: String
  stageTimestamp_ends_with: String
  stageTimestamp_not_ends_with: String
  AND: [EventWhereInput!]
  OR: [EventWhereInput!]
  NOT: [EventWhereInput!]
}

input EventWhereUniqueInput {
  id: ID
  auditID: ID
}

scalar Json

scalar Long

type Mutation {
  createAuditLog(data: AuditLogCreateInput!): AuditLog!
  updateAuditLog(data: AuditLogUpdateInput!, where: AuditLogWhereUniqueInput!): AuditLog
  updateManyAuditLogs(data: AuditLogUpdateManyMutationInput!, where: AuditLogWhereInput): BatchPayload!
  upsertAuditLog(where: AuditLogWhereUniqueInput!, create: AuditLogCreateInput!, update: AuditLogUpdateInput!): AuditLog!
  deleteAuditLog(where: AuditLogWhereUniqueInput!): AuditLog
  deleteManyAuditLogs(where: AuditLogWhereInput): BatchPayload!
  createEndpoint(data: EndpointCreateInput!): Endpoint!
  updateEndpoint(data: EndpointUpdateInput!, where: EndpointWhereUniqueInput!): Endpoint
  updateManyEndpoints(data: EndpointUpdateManyMutationInput!, where: EndpointWhereInput): BatchPayload!
  upsertEndpoint(where: EndpointWhereUniqueInput!, create: EndpointCreateInput!, update: EndpointUpdateInput!): Endpoint!
  deleteEndpoint(where: EndpointWhereUniqueInput!): Endpoint
  deleteManyEndpoints(where: EndpointWhereInput): BatchPayload!
  createEvent(data: EventCreateInput!): Event!
  updateEvent(data: EventUpdateInput!, where: EventWhereUniqueInput!): Event
  updateManyEvents(data: EventUpdateManyMutationInput!, where: EventWhereInput): BatchPayload!
  upsertEvent(where: EventWhereUniqueInput!, create: EventCreateInput!, update: EventUpdateInput!): Event!
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteManyEvents(where: EventWhereInput): BatchPayload!
  createObjectReference(data: ObjectReferenceCreateInput!): ObjectReference!
  updateObjectReference(data: ObjectReferenceUpdateInput!, where: ObjectReferenceWhereUniqueInput!): ObjectReference
  updateManyObjectReferences(data: ObjectReferenceUpdateManyMutationInput!, where: ObjectReferenceWhereInput): BatchPayload!
  upsertObjectReference(where: ObjectReferenceWhereUniqueInput!, create: ObjectReferenceCreateInput!, update: ObjectReferenceUpdateInput!): ObjectReference!
  deleteObjectReference(where: ObjectReferenceWhereUniqueInput!): ObjectReference
  deleteManyObjectReferences(where: ObjectReferenceWhereInput): BatchPayload!
  createResponseStatus(data: ResponseStatusCreateInput!): ResponseStatus!
  updateResponseStatus(data: ResponseStatusUpdateInput!, where: ResponseStatusWhereUniqueInput!): ResponseStatus
  updateManyResponseStatuses(data: ResponseStatusUpdateManyMutationInput!, where: ResponseStatusWhereInput): BatchPayload!
  upsertResponseStatus(where: ResponseStatusWhereUniqueInput!, create: ResponseStatusCreateInput!, update: ResponseStatusUpdateInput!): ResponseStatus!
  deleteResponseStatus(where: ResponseStatusWhereUniqueInput!): ResponseStatus
  deleteManyResponseStatuses(where: ResponseStatusWhereInput): BatchPayload!
  createTest(data: TestCreateInput!): Test!
  updateTest(data: TestUpdateInput!, where: TestWhereUniqueInput!): Test
  upsertTest(where: TestWhereUniqueInput!, create: TestCreateInput!, update: TestUpdateInput!): Test!
  deleteTest(where: TestWhereUniqueInput!): Test
  deleteManyTests(where: TestWhereInput): BatchPayload!
  createUserInfo(data: UserInfoCreateInput!): UserInfo!
  updateUserInfo(data: UserInfoUpdateInput!, where: UserInfoWhereUniqueInput!): UserInfo
  updateManyUserInfoes(data: UserInfoUpdateManyMutationInput!, where: UserInfoWhereInput): BatchPayload!
  upsertUserInfo(where: UserInfoWhereUniqueInput!, create: UserInfoCreateInput!, update: UserInfoUpdateInput!): UserInfo!
  deleteUserInfo(where: UserInfoWhereUniqueInput!): UserInfo
  deleteManyUserInfoes(where: UserInfoWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type ObjectReference {
  id: ID!
  createdAt: DateTime!
  resource: String
  namespace: String
  name: String
  uid: ID
  apiGroup: String
  apiVersion: String
  resourceVersion: String
  subresource: String
  event: Event!
}

type ObjectReferenceConnection {
  pageInfo: PageInfo!
  edges: [ObjectReferenceEdge]!
  aggregate: AggregateObjectReference!
}

input ObjectReferenceCreateInput {
  id: ID
  resource: String
  namespace: String
  name: String
  uid: ID
  apiGroup: String
  apiVersion: String
  resourceVersion: String
  subresource: String
  event: EventCreateOneWithoutRequestObjectInput!
}

input ObjectReferenceCreateOneWithoutEventInput {
  create: ObjectReferenceCreateWithoutEventInput
  connect: ObjectReferenceWhereUniqueInput
}

input ObjectReferenceCreateWithoutEventInput {
  id: ID
  resource: String
  namespace: String
  name: String
  uid: ID
  apiGroup: String
  apiVersion: String
  resourceVersion: String
  subresource: String
}

type ObjectReferenceEdge {
  node: ObjectReference!
  cursor: String!
}

enum ObjectReferenceOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  resource_ASC
  resource_DESC
  namespace_ASC
  namespace_DESC
  name_ASC
  name_DESC
  uid_ASC
  uid_DESC
  apiGroup_ASC
  apiGroup_DESC
  apiVersion_ASC
  apiVersion_DESC
  resourceVersion_ASC
  resourceVersion_DESC
  subresource_ASC
  subresource_DESC
}

type ObjectReferencePreviousValues {
  id: ID!
  createdAt: DateTime!
  resource: String
  namespace: String
  name: String
  uid: ID
  apiGroup: String
  apiVersion: String
  resourceVersion: String
  subresource: String
}

type ObjectReferenceSubscriptionPayload {
  mutation: MutationType!
  node: ObjectReference
  updatedFields: [String!]
  previousValues: ObjectReferencePreviousValues
}

input ObjectReferenceSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ObjectReferenceWhereInput
  AND: [ObjectReferenceSubscriptionWhereInput!]
  OR: [ObjectReferenceSubscriptionWhereInput!]
  NOT: [ObjectReferenceSubscriptionWhereInput!]
}

input ObjectReferenceUpdateInput {
  resource: String
  namespace: String
  name: String
  uid: ID
  apiGroup: String
  apiVersion: String
  resourceVersion: String
  subresource: String
  event: EventUpdateOneRequiredWithoutRequestObjectInput
}

input ObjectReferenceUpdateManyMutationInput {
  resource: String
  namespace: String
  name: String
  uid: ID
  apiGroup: String
  apiVersion: String
  resourceVersion: String
  subresource: String
}

input ObjectReferenceUpdateOneWithoutEventInput {
  create: ObjectReferenceCreateWithoutEventInput
  update: ObjectReferenceUpdateWithoutEventDataInput
  upsert: ObjectReferenceUpsertWithoutEventInput
  delete: Boolean
  disconnect: Boolean
  connect: ObjectReferenceWhereUniqueInput
}

input ObjectReferenceUpdateWithoutEventDataInput {
  resource: String
  namespace: String
  name: String
  uid: ID
  apiGroup: String
  apiVersion: String
  resourceVersion: String
  subresource: String
}

input ObjectReferenceUpsertWithoutEventInput {
  update: ObjectReferenceUpdateWithoutEventDataInput!
  create: ObjectReferenceCreateWithoutEventInput!
}

input ObjectReferenceWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  resource: String
  resource_not: String
  resource_in: [String!]
  resource_not_in: [String!]
  resource_lt: String
  resource_lte: String
  resource_gt: String
  resource_gte: String
  resource_contains: String
  resource_not_contains: String
  resource_starts_with: String
  resource_not_starts_with: String
  resource_ends_with: String
  resource_not_ends_with: String
  namespace: String
  namespace_not: String
  namespace_in: [String!]
  namespace_not_in: [String!]
  namespace_lt: String
  namespace_lte: String
  namespace_gt: String
  namespace_gte: String
  namespace_contains: String
  namespace_not_contains: String
  namespace_starts_with: String
  namespace_not_starts_with: String
  namespace_ends_with: String
  namespace_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  uid: ID
  uid_not: ID
  uid_in: [ID!]
  uid_not_in: [ID!]
  uid_lt: ID
  uid_lte: ID
  uid_gt: ID
  uid_gte: ID
  uid_contains: ID
  uid_not_contains: ID
  uid_starts_with: ID
  uid_not_starts_with: ID
  uid_ends_with: ID
  uid_not_ends_with: ID
  apiGroup: String
  apiGroup_not: String
  apiGroup_in: [String!]
  apiGroup_not_in: [String!]
  apiGroup_lt: String
  apiGroup_lte: String
  apiGroup_gt: String
  apiGroup_gte: String
  apiGroup_contains: String
  apiGroup_not_contains: String
  apiGroup_starts_with: String
  apiGroup_not_starts_with: String
  apiGroup_ends_with: String
  apiGroup_not_ends_with: String
  apiVersion: String
  apiVersion_not: String
  apiVersion_in: [String!]
  apiVersion_not_in: [String!]
  apiVersion_lt: String
  apiVersion_lte: String
  apiVersion_gt: String
  apiVersion_gte: String
  apiVersion_contains: String
  apiVersion_not_contains: String
  apiVersion_starts_with: String
  apiVersion_not_starts_with: String
  apiVersion_ends_with: String
  apiVersion_not_ends_with: String
  resourceVersion: String
  resourceVersion_not: String
  resourceVersion_in: [String!]
  resourceVersion_not_in: [String!]
  resourceVersion_lt: String
  resourceVersion_lte: String
  resourceVersion_gt: String
  resourceVersion_gte: String
  resourceVersion_contains: String
  resourceVersion_not_contains: String
  resourceVersion_starts_with: String
  resourceVersion_not_starts_with: String
  resourceVersion_ends_with: String
  resourceVersion_not_ends_with: String
  subresource: String
  subresource_not: String
  subresource_in: [String!]
  subresource_not_in: [String!]
  subresource_lt: String
  subresource_lte: String
  subresource_gt: String
  subresource_gte: String
  subresource_contains: String
  subresource_not_contains: String
  subresource_starts_with: String
  subresource_not_starts_with: String
  subresource_ends_with: String
  subresource_not_ends_with: String
  event: EventWhereInput
  AND: [ObjectReferenceWhereInput!]
  OR: [ObjectReferenceWhereInput!]
  NOT: [ObjectReferenceWhereInput!]
}

input ObjectReferenceWhereUniqueInput {
  id: ID
  uid: ID
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  auditLog(where: AuditLogWhereUniqueInput!): AuditLog
  auditLogs(where: AuditLogWhereInput, orderBy: AuditLogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AuditLog]!
  auditLogsConnection(where: AuditLogWhereInput, orderBy: AuditLogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AuditLogConnection!
  endpoint(where: EndpointWhereUniqueInput!): Endpoint
  endpoints(where: EndpointWhereInput, orderBy: EndpointOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Endpoint]!
  endpointsConnection(where: EndpointWhereInput, orderBy: EndpointOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EndpointConnection!
  event(where: EventWhereUniqueInput!): Event
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event]!
  eventsConnection(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EventConnection!
  objectReference(where: ObjectReferenceWhereUniqueInput!): ObjectReference
  objectReferences(where: ObjectReferenceWhereInput, orderBy: ObjectReferenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ObjectReference]!
  objectReferencesConnection(where: ObjectReferenceWhereInput, orderBy: ObjectReferenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ObjectReferenceConnection!
  responseStatus(where: ResponseStatusWhereUniqueInput!): ResponseStatus
  responseStatuses(where: ResponseStatusWhereInput, orderBy: ResponseStatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ResponseStatus]!
  responseStatusesConnection(where: ResponseStatusWhereInput, orderBy: ResponseStatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ResponseStatusConnection!
  test(where: TestWhereUniqueInput!): Test
  tests(where: TestWhereInput, orderBy: TestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Test]!
  testsConnection(where: TestWhereInput, orderBy: TestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TestConnection!
  userInfo(where: UserInfoWhereUniqueInput!): UserInfo
  userInfoes(where: UserInfoWhereInput, orderBy: UserInfoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserInfo]!
  userInfoesConnection(where: UserInfoWhereInput, orderBy: UserInfoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserInfoConnection!
  node(id: ID!): Node
}

type ResponseStatus {
  id: ID!
  createdAt: DateTime!
  metadata: Json
  status: String
  reason: String
  code: Int
  event: Event!
}

type ResponseStatusConnection {
  pageInfo: PageInfo!
  edges: [ResponseStatusEdge]!
  aggregate: AggregateResponseStatus!
}

input ResponseStatusCreateInput {
  id: ID
  metadata: Json
  status: String
  reason: String
  code: Int
  event: EventCreateOneWithoutResponseStatusInput!
}

input ResponseStatusCreateOneWithoutEventInput {
  create: ResponseStatusCreateWithoutEventInput
  connect: ResponseStatusWhereUniqueInput
}

input ResponseStatusCreateWithoutEventInput {
  id: ID
  metadata: Json
  status: String
  reason: String
  code: Int
}

type ResponseStatusEdge {
  node: ResponseStatus!
  cursor: String!
}

enum ResponseStatusOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  metadata_ASC
  metadata_DESC
  status_ASC
  status_DESC
  reason_ASC
  reason_DESC
  code_ASC
  code_DESC
}

type ResponseStatusPreviousValues {
  id: ID!
  createdAt: DateTime!
  metadata: Json
  status: String
  reason: String
  code: Int
}

type ResponseStatusSubscriptionPayload {
  mutation: MutationType!
  node: ResponseStatus
  updatedFields: [String!]
  previousValues: ResponseStatusPreviousValues
}

input ResponseStatusSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ResponseStatusWhereInput
  AND: [ResponseStatusSubscriptionWhereInput!]
  OR: [ResponseStatusSubscriptionWhereInput!]
  NOT: [ResponseStatusSubscriptionWhereInput!]
}

input ResponseStatusUpdateInput {
  metadata: Json
  status: String
  reason: String
  code: Int
  event: EventUpdateOneRequiredWithoutResponseStatusInput
}

input ResponseStatusUpdateManyMutationInput {
  metadata: Json
  status: String
  reason: String
  code: Int
}

input ResponseStatusUpdateOneWithoutEventInput {
  create: ResponseStatusCreateWithoutEventInput
  update: ResponseStatusUpdateWithoutEventDataInput
  upsert: ResponseStatusUpsertWithoutEventInput
  delete: Boolean
  disconnect: Boolean
  connect: ResponseStatusWhereUniqueInput
}

input ResponseStatusUpdateWithoutEventDataInput {
  metadata: Json
  status: String
  reason: String
  code: Int
}

input ResponseStatusUpsertWithoutEventInput {
  update: ResponseStatusUpdateWithoutEventDataInput!
  create: ResponseStatusCreateWithoutEventInput!
}

input ResponseStatusWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  status: String
  status_not: String
  status_in: [String!]
  status_not_in: [String!]
  status_lt: String
  status_lte: String
  status_gt: String
  status_gte: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  reason: String
  reason_not: String
  reason_in: [String!]
  reason_not_in: [String!]
  reason_lt: String
  reason_lte: String
  reason_gt: String
  reason_gte: String
  reason_contains: String
  reason_not_contains: String
  reason_starts_with: String
  reason_not_starts_with: String
  reason_ends_with: String
  reason_not_ends_with: String
  code: Int
  code_not: Int
  code_in: [Int!]
  code_not_in: [Int!]
  code_lt: Int
  code_lte: Int
  code_gt: Int
  code_gte: Int
  event: EventWhereInput
  AND: [ResponseStatusWhereInput!]
  OR: [ResponseStatusWhereInput!]
  NOT: [ResponseStatusWhereInput!]
}

input ResponseStatusWhereUniqueInput {
  id: ID
}

type Subscription {
  auditLog(where: AuditLogSubscriptionWhereInput): AuditLogSubscriptionPayload
  endpoint(where: EndpointSubscriptionWhereInput): EndpointSubscriptionPayload
  event(where: EventSubscriptionWhereInput): EventSubscriptionPayload
  objectReference(where: ObjectReferenceSubscriptionWhereInput): ObjectReferenceSubscriptionPayload
  responseStatus(where: ResponseStatusSubscriptionWhereInput): ResponseStatusSubscriptionPayload
  test(where: TestSubscriptionWhereInput): TestSubscriptionPayload
  userInfo(where: UserInfoSubscriptionWhereInput): UserInfoSubscriptionPayload
}

type Test {
  id: ID!
  createdAt: DateTime!
  auditLog: AuditLog!
  endpoints(where: EndpointWhereInput, orderBy: EndpointOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Endpoint!]
}

type TestConnection {
  pageInfo: PageInfo!
  edges: [TestEdge]!
  aggregate: AggregateTest!
}

input TestCreateInput {
  id: ID
  auditLog: AuditLogCreateOneInput!
  endpoints: EndpointCreateManyInput
}

type TestEdge {
  node: Test!
  cursor: String!
}

enum TestOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
}

type TestPreviousValues {
  id: ID!
  createdAt: DateTime!
}

type TestSubscriptionPayload {
  mutation: MutationType!
  node: Test
  updatedFields: [String!]
  previousValues: TestPreviousValues
}

input TestSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TestWhereInput
  AND: [TestSubscriptionWhereInput!]
  OR: [TestSubscriptionWhereInput!]
  NOT: [TestSubscriptionWhereInput!]
}

input TestUpdateInput {
  auditLog: AuditLogUpdateOneRequiredInput
  endpoints: EndpointUpdateManyInput
}

input TestWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  auditLog: AuditLogWhereInput
  endpoints_every: EndpointWhereInput
  endpoints_some: EndpointWhereInput
  endpoints_none: EndpointWhereInput
  AND: [TestWhereInput!]
  OR: [TestWhereInput!]
  NOT: [TestWhereInput!]
}

input TestWhereUniqueInput {
  id: ID
}

type UserInfo {
  id: ID!
  createdAt: DateTime!
  username: String!
  groups: [String!]!
  event: Event!
}

type UserInfoConnection {
  pageInfo: PageInfo!
  edges: [UserInfoEdge]!
  aggregate: AggregateUserInfo!
}

input UserInfoCreategroupsInput {
  set: [String!]
}

input UserInfoCreateInput {
  id: ID
  username: String!
  groups: UserInfoCreategroupsInput
  event: EventCreateOneWithoutUserInput!
}

input UserInfoCreateOneWithoutEventInput {
  create: UserInfoCreateWithoutEventInput
  connect: UserInfoWhereUniqueInput
}

input UserInfoCreateWithoutEventInput {
  id: ID
  username: String!
  groups: UserInfoCreategroupsInput
}

type UserInfoEdge {
  node: UserInfo!
  cursor: String!
}

enum UserInfoOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  username_ASC
  username_DESC
}

type UserInfoPreviousValues {
  id: ID!
  createdAt: DateTime!
  username: String!
  groups: [String!]!
}

type UserInfoSubscriptionPayload {
  mutation: MutationType!
  node: UserInfo
  updatedFields: [String!]
  previousValues: UserInfoPreviousValues
}

input UserInfoSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserInfoWhereInput
  AND: [UserInfoSubscriptionWhereInput!]
  OR: [UserInfoSubscriptionWhereInput!]
  NOT: [UserInfoSubscriptionWhereInput!]
}

input UserInfoUpdategroupsInput {
  set: [String!]
}

input UserInfoUpdateInput {
  username: String
  groups: UserInfoUpdategroupsInput
  event: EventUpdateOneRequiredWithoutUserInput
}

input UserInfoUpdateManyMutationInput {
  username: String
  groups: UserInfoUpdategroupsInput
}

input UserInfoUpdateOneRequiredWithoutEventInput {
  create: UserInfoCreateWithoutEventInput
  update: UserInfoUpdateWithoutEventDataInput
  upsert: UserInfoUpsertWithoutEventInput
  connect: UserInfoWhereUniqueInput
}

input UserInfoUpdateWithoutEventDataInput {
  username: String
  groups: UserInfoUpdategroupsInput
}

input UserInfoUpsertWithoutEventInput {
  update: UserInfoUpdateWithoutEventDataInput!
  create: UserInfoCreateWithoutEventInput!
}

input UserInfoWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  event: EventWhereInput
  AND: [UserInfoWhereInput!]
  OR: [UserInfoWhereInput!]
  NOT: [UserInfoWhereInput!]
}

input UserInfoWhereUniqueInput {
  id: ID
}
`
      }
    