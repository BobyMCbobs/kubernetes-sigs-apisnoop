module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.0). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateAuditLog {
  count: Int!
}

type AuditLog {
  id: ID!
  createdAt: DateTime!
  job: String!
  bucket: String!
  version: String!
  jobVersion: String!
  masterOsImage: String!
  infraCommit: String!
  nodeOsImage: String!
  pod: String!
  passed: Boolean!
  result: String!
  timestamp: Int!
}

type AuditLogConnection {
  pageInfo: PageInfo!
  edges: [AuditLogEdge]!
  aggregate: AggregateAuditLog!
}

input AuditLogCreateInput {
  id: ID
  job: String!
  bucket: String!
  version: String!
  jobVersion: String!
  masterOsImage: String!
  infraCommit: String!
  nodeOsImage: String!
  pod: String!
  passed: Boolean!
  result: String!
  timestamp: Int!
}

type AuditLogEdge {
  node: AuditLog!
  cursor: String!
}

enum AuditLogOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  job_ASC
  job_DESC
  bucket_ASC
  bucket_DESC
  version_ASC
  version_DESC
  jobVersion_ASC
  jobVersion_DESC
  masterOsImage_ASC
  masterOsImage_DESC
  infraCommit_ASC
  infraCommit_DESC
  nodeOsImage_ASC
  nodeOsImage_DESC
  pod_ASC
  pod_DESC
  passed_ASC
  passed_DESC
  result_ASC
  result_DESC
  timestamp_ASC
  timestamp_DESC
}

type AuditLogPreviousValues {
  id: ID!
  createdAt: DateTime!
  job: String!
  bucket: String!
  version: String!
  jobVersion: String!
  masterOsImage: String!
  infraCommit: String!
  nodeOsImage: String!
  pod: String!
  passed: Boolean!
  result: String!
  timestamp: Int!
}

type AuditLogSubscriptionPayload {
  mutation: MutationType!
  node: AuditLog
  updatedFields: [String!]
  previousValues: AuditLogPreviousValues
}

input AuditLogSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AuditLogWhereInput
  AND: [AuditLogSubscriptionWhereInput!]
  OR: [AuditLogSubscriptionWhereInput!]
  NOT: [AuditLogSubscriptionWhereInput!]
}

input AuditLogUpdateInput {
  job: String
  bucket: String
  version: String
  jobVersion: String
  masterOsImage: String
  infraCommit: String
  nodeOsImage: String
  pod: String
  passed: Boolean
  result: String
  timestamp: Int
}

input AuditLogUpdateManyMutationInput {
  job: String
  bucket: String
  version: String
  jobVersion: String
  masterOsImage: String
  infraCommit: String
  nodeOsImage: String
  pod: String
  passed: Boolean
  result: String
  timestamp: Int
}

input AuditLogWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  job: String
  job_not: String
  job_in: [String!]
  job_not_in: [String!]
  job_lt: String
  job_lte: String
  job_gt: String
  job_gte: String
  job_contains: String
  job_not_contains: String
  job_starts_with: String
  job_not_starts_with: String
  job_ends_with: String
  job_not_ends_with: String
  bucket: String
  bucket_not: String
  bucket_in: [String!]
  bucket_not_in: [String!]
  bucket_lt: String
  bucket_lte: String
  bucket_gt: String
  bucket_gte: String
  bucket_contains: String
  bucket_not_contains: String
  bucket_starts_with: String
  bucket_not_starts_with: String
  bucket_ends_with: String
  bucket_not_ends_with: String
  version: String
  version_not: String
  version_in: [String!]
  version_not_in: [String!]
  version_lt: String
  version_lte: String
  version_gt: String
  version_gte: String
  version_contains: String
  version_not_contains: String
  version_starts_with: String
  version_not_starts_with: String
  version_ends_with: String
  version_not_ends_with: String
  jobVersion: String
  jobVersion_not: String
  jobVersion_in: [String!]
  jobVersion_not_in: [String!]
  jobVersion_lt: String
  jobVersion_lte: String
  jobVersion_gt: String
  jobVersion_gte: String
  jobVersion_contains: String
  jobVersion_not_contains: String
  jobVersion_starts_with: String
  jobVersion_not_starts_with: String
  jobVersion_ends_with: String
  jobVersion_not_ends_with: String
  masterOsImage: String
  masterOsImage_not: String
  masterOsImage_in: [String!]
  masterOsImage_not_in: [String!]
  masterOsImage_lt: String
  masterOsImage_lte: String
  masterOsImage_gt: String
  masterOsImage_gte: String
  masterOsImage_contains: String
  masterOsImage_not_contains: String
  masterOsImage_starts_with: String
  masterOsImage_not_starts_with: String
  masterOsImage_ends_with: String
  masterOsImage_not_ends_with: String
  infraCommit: String
  infraCommit_not: String
  infraCommit_in: [String!]
  infraCommit_not_in: [String!]
  infraCommit_lt: String
  infraCommit_lte: String
  infraCommit_gt: String
  infraCommit_gte: String
  infraCommit_contains: String
  infraCommit_not_contains: String
  infraCommit_starts_with: String
  infraCommit_not_starts_with: String
  infraCommit_ends_with: String
  infraCommit_not_ends_with: String
  nodeOsImage: String
  nodeOsImage_not: String
  nodeOsImage_in: [String!]
  nodeOsImage_not_in: [String!]
  nodeOsImage_lt: String
  nodeOsImage_lte: String
  nodeOsImage_gt: String
  nodeOsImage_gte: String
  nodeOsImage_contains: String
  nodeOsImage_not_contains: String
  nodeOsImage_starts_with: String
  nodeOsImage_not_starts_with: String
  nodeOsImage_ends_with: String
  nodeOsImage_not_ends_with: String
  pod: String
  pod_not: String
  pod_in: [String!]
  pod_not_in: [String!]
  pod_lt: String
  pod_lte: String
  pod_gt: String
  pod_gte: String
  pod_contains: String
  pod_not_contains: String
  pod_starts_with: String
  pod_not_starts_with: String
  pod_ends_with: String
  pod_not_ends_with: String
  passed: Boolean
  passed_not: Boolean
  result: String
  result_not: String
  result_in: [String!]
  result_not_in: [String!]
  result_lt: String
  result_lte: String
  result_gt: String
  result_gte: String
  result_contains: String
  result_not_contains: String
  result_starts_with: String
  result_not_starts_with: String
  result_ends_with: String
  result_not_ends_with: String
  timestamp: Int
  timestamp_not: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  timestamp_lt: Int
  timestamp_lte: Int
  timestamp_gt: Int
  timestamp_gte: Int
  AND: [AuditLogWhereInput!]
  OR: [AuditLogWhereInput!]
  NOT: [AuditLogWhereInput!]
}

input AuditLogWhereUniqueInput {
  id: ID
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createAuditLog(data: AuditLogCreateInput!): AuditLog!
  updateAuditLog(data: AuditLogUpdateInput!, where: AuditLogWhereUniqueInput!): AuditLog
  updateManyAuditLogs(data: AuditLogUpdateManyMutationInput!, where: AuditLogWhereInput): BatchPayload!
  upsertAuditLog(where: AuditLogWhereUniqueInput!, create: AuditLogCreateInput!, update: AuditLogUpdateInput!): AuditLog!
  deleteAuditLog(where: AuditLogWhereUniqueInput!): AuditLog
  deleteManyAuditLogs(where: AuditLogWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  auditLog(where: AuditLogWhereUniqueInput!): AuditLog
  auditLogs(where: AuditLogWhereInput, orderBy: AuditLogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AuditLog]!
  auditLogsConnection(where: AuditLogWhereInput, orderBy: AuditLogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AuditLogConnection!
  node(id: ID!): Node
}

type Subscription {
  auditLog(where: AuditLogSubscriptionWhereInput): AuditLogSubscriptionPayload
}
`
      }
    