// Code generated by Prisma (prisma@1.34.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  event: (where?: EventWhereInput) => Promise<boolean>;
  objectReference: (where?: ObjectReferenceWhereInput) => Promise<boolean>;
  responseStatus: (where?: ResponseStatusWhereInput) => Promise<boolean>;
  userInfo: (where?: UserInfoWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  event: (where: EventWhereUniqueInput) => EventNullablePromise;
  events: (args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Event>;
  eventsConnection: (args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => EventConnectionPromise;
  objectReference: (
    where: ObjectReferenceWhereUniqueInput
  ) => ObjectReferenceNullablePromise;
  objectReferences: (args?: {
    where?: ObjectReferenceWhereInput;
    orderBy?: ObjectReferenceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ObjectReference>;
  objectReferencesConnection: (args?: {
    where?: ObjectReferenceWhereInput;
    orderBy?: ObjectReferenceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ObjectReferenceConnectionPromise;
  responseStatus: (
    where: ResponseStatusWhereUniqueInput
  ) => ResponseStatusNullablePromise;
  responseStatuses: (args?: {
    where?: ResponseStatusWhereInput;
    orderBy?: ResponseStatusOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ResponseStatus>;
  responseStatusesConnection: (args?: {
    where?: ResponseStatusWhereInput;
    orderBy?: ResponseStatusOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ResponseStatusConnectionPromise;
  userInfo: (where: UserInfoWhereUniqueInput) => UserInfoNullablePromise;
  userInfoes: (args?: {
    where?: UserInfoWhereInput;
    orderBy?: UserInfoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<UserInfo>;
  userInfoesConnection: (args?: {
    where?: UserInfoWhereInput;
    orderBy?: UserInfoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserInfoConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createEvent: (data: EventCreateInput) => EventPromise;
  updateEvent: (args: {
    data: EventUpdateInput;
    where: EventWhereUniqueInput;
  }) => EventPromise;
  updateManyEvents: (args: {
    data: EventUpdateManyMutationInput;
    where?: EventWhereInput;
  }) => BatchPayloadPromise;
  upsertEvent: (args: {
    where: EventWhereUniqueInput;
    create: EventCreateInput;
    update: EventUpdateInput;
  }) => EventPromise;
  deleteEvent: (where: EventWhereUniqueInput) => EventPromise;
  deleteManyEvents: (where?: EventWhereInput) => BatchPayloadPromise;
  createObjectReference: (
    data: ObjectReferenceCreateInput
  ) => ObjectReferencePromise;
  updateObjectReference: (args: {
    data: ObjectReferenceUpdateInput;
    where: ObjectReferenceWhereUniqueInput;
  }) => ObjectReferencePromise;
  updateManyObjectReferences: (args: {
    data: ObjectReferenceUpdateManyMutationInput;
    where?: ObjectReferenceWhereInput;
  }) => BatchPayloadPromise;
  upsertObjectReference: (args: {
    where: ObjectReferenceWhereUniqueInput;
    create: ObjectReferenceCreateInput;
    update: ObjectReferenceUpdateInput;
  }) => ObjectReferencePromise;
  deleteObjectReference: (
    where: ObjectReferenceWhereUniqueInput
  ) => ObjectReferencePromise;
  deleteManyObjectReferences: (
    where?: ObjectReferenceWhereInput
  ) => BatchPayloadPromise;
  createResponseStatus: (
    data: ResponseStatusCreateInput
  ) => ResponseStatusPromise;
  updateResponseStatus: (args: {
    data: ResponseStatusUpdateInput;
    where: ResponseStatusWhereUniqueInput;
  }) => ResponseStatusPromise;
  updateManyResponseStatuses: (args: {
    data: ResponseStatusUpdateManyMutationInput;
    where?: ResponseStatusWhereInput;
  }) => BatchPayloadPromise;
  upsertResponseStatus: (args: {
    where: ResponseStatusWhereUniqueInput;
    create: ResponseStatusCreateInput;
    update: ResponseStatusUpdateInput;
  }) => ResponseStatusPromise;
  deleteResponseStatus: (
    where: ResponseStatusWhereUniqueInput
  ) => ResponseStatusPromise;
  deleteManyResponseStatuses: (
    where?: ResponseStatusWhereInput
  ) => BatchPayloadPromise;
  createUserInfo: (data: UserInfoCreateInput) => UserInfoPromise;
  updateUserInfo: (args: {
    data: UserInfoUpdateInput;
    where: UserInfoWhereUniqueInput;
  }) => UserInfoPromise;
  updateManyUserInfoes: (args: {
    data: UserInfoUpdateManyMutationInput;
    where?: UserInfoWhereInput;
  }) => BatchPayloadPromise;
  upsertUserInfo: (args: {
    where: UserInfoWhereUniqueInput;
    create: UserInfoCreateInput;
    update: UserInfoUpdateInput;
  }) => UserInfoPromise;
  deleteUserInfo: (where: UserInfoWhereUniqueInput) => UserInfoPromise;
  deleteManyUserInfoes: (where?: UserInfoWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  event: (
    where?: EventSubscriptionWhereInput
  ) => EventSubscriptionPayloadSubscription;
  objectReference: (
    where?: ObjectReferenceSubscriptionWhereInput
  ) => ObjectReferenceSubscriptionPayloadSubscription;
  responseStatus: (
    where?: ResponseStatusSubscriptionWhereInput
  ) => ResponseStatusSubscriptionPayloadSubscription;
  userInfo: (
    where?: UserInfoSubscriptionWhereInput
  ) => UserInfoSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type EventOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "apiVersion_ASC"
  | "apiVersion_DESC"
  | "kind_ASC"
  | "kind_DESC"
  | "level_ASC"
  | "level_DESC"
  | "auditID_ASC"
  | "auditID_DESC"
  | "stage_ASC"
  | "stage_DESC"
  | "requestURI_ASC"
  | "requestURI_DESC"
  | "verb_ASC"
  | "verb_DESC"
  | "userAgent_ASC"
  | "userAgent_DESC"
  | "requestReceivedTimestamp_ASC"
  | "requestReceivedTimestamp_DESC"
  | "stageTimestamp_ASC"
  | "stageTimestamp_DESC"
  | "annotations_ASC"
  | "annotations_DESC";

export type ObjectReferenceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "resource_ASC"
  | "resource_DESC"
  | "namespace_ASC"
  | "namespace_DESC"
  | "name_ASC"
  | "name_DESC"
  | "uid_ASC"
  | "uid_DESC"
  | "apiGroup_ASC"
  | "apiGroup_DESC"
  | "apiVersion_ASC"
  | "apiVersion_DESC"
  | "resourceVersion_ASC"
  | "resourceVersion_DESC"
  | "subresource_ASC"
  | "subresource_DESC";

export type ResponseStatusOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "metadata_ASC"
  | "metadata_DESC"
  | "status_ASC"
  | "status_DESC"
  | "reason_ASC"
  | "reason_DESC"
  | "code_ASC"
  | "code_DESC";

export type UserInfoOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "username_ASC"
  | "username_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface UserInfoUpdategroupsInput {
  set?: Maybe<String[] | String>;
}

export type EventWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  auditID?: Maybe<ID_Input>;
}>;

export interface EventCreateInput {
  id?: Maybe<ID_Input>;
  apiVersion?: Maybe<String>;
  kind?: Maybe<String>;
  level: String;
  auditID?: Maybe<ID_Input>;
  stage: String;
  requestURI: String;
  verb: String;
  user: UserInfoCreateOneWithoutEventInput;
  sourceIPs?: Maybe<EventCreatesourceIPsInput>;
  userAgent?: Maybe<String>;
  responseStatus?: Maybe<ResponseStatusCreateOneWithoutEventInput>;
  requestObject?: Maybe<ObjectReferenceCreateOneWithoutEventInput>;
  requestReceivedTimestamp?: Maybe<String>;
  stageTimestamp?: Maybe<String>;
  annotations?: Maybe<Json>;
}

export interface EventUpdateOneRequiredWithoutRequestObjectInput {
  create?: Maybe<EventCreateWithoutRequestObjectInput>;
  update?: Maybe<EventUpdateWithoutRequestObjectDataInput>;
  upsert?: Maybe<EventUpsertWithoutRequestObjectInput>;
  connect?: Maybe<EventWhereUniqueInput>;
}

export interface UserInfoCreateOneWithoutEventInput {
  create?: Maybe<UserInfoCreateWithoutEventInput>;
  connect?: Maybe<UserInfoWhereUniqueInput>;
}

export interface ResponseStatusUpdateWithoutEventDataInput {
  metadata?: Maybe<Json>;
  status?: Maybe<String>;
  reason?: Maybe<String>;
  code?: Maybe<Int>;
}

export interface UserInfoCreateWithoutEventInput {
  id?: Maybe<ID_Input>;
  username: String;
  groups?: Maybe<UserInfoCreategroupsInput>;
}

export interface EventWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  apiVersion?: Maybe<String>;
  apiVersion_not?: Maybe<String>;
  apiVersion_in?: Maybe<String[] | String>;
  apiVersion_not_in?: Maybe<String[] | String>;
  apiVersion_lt?: Maybe<String>;
  apiVersion_lte?: Maybe<String>;
  apiVersion_gt?: Maybe<String>;
  apiVersion_gte?: Maybe<String>;
  apiVersion_contains?: Maybe<String>;
  apiVersion_not_contains?: Maybe<String>;
  apiVersion_starts_with?: Maybe<String>;
  apiVersion_not_starts_with?: Maybe<String>;
  apiVersion_ends_with?: Maybe<String>;
  apiVersion_not_ends_with?: Maybe<String>;
  kind?: Maybe<String>;
  kind_not?: Maybe<String>;
  kind_in?: Maybe<String[] | String>;
  kind_not_in?: Maybe<String[] | String>;
  kind_lt?: Maybe<String>;
  kind_lte?: Maybe<String>;
  kind_gt?: Maybe<String>;
  kind_gte?: Maybe<String>;
  kind_contains?: Maybe<String>;
  kind_not_contains?: Maybe<String>;
  kind_starts_with?: Maybe<String>;
  kind_not_starts_with?: Maybe<String>;
  kind_ends_with?: Maybe<String>;
  kind_not_ends_with?: Maybe<String>;
  level?: Maybe<String>;
  level_not?: Maybe<String>;
  level_in?: Maybe<String[] | String>;
  level_not_in?: Maybe<String[] | String>;
  level_lt?: Maybe<String>;
  level_lte?: Maybe<String>;
  level_gt?: Maybe<String>;
  level_gte?: Maybe<String>;
  level_contains?: Maybe<String>;
  level_not_contains?: Maybe<String>;
  level_starts_with?: Maybe<String>;
  level_not_starts_with?: Maybe<String>;
  level_ends_with?: Maybe<String>;
  level_not_ends_with?: Maybe<String>;
  auditID?: Maybe<ID_Input>;
  auditID_not?: Maybe<ID_Input>;
  auditID_in?: Maybe<ID_Input[] | ID_Input>;
  auditID_not_in?: Maybe<ID_Input[] | ID_Input>;
  auditID_lt?: Maybe<ID_Input>;
  auditID_lte?: Maybe<ID_Input>;
  auditID_gt?: Maybe<ID_Input>;
  auditID_gte?: Maybe<ID_Input>;
  auditID_contains?: Maybe<ID_Input>;
  auditID_not_contains?: Maybe<ID_Input>;
  auditID_starts_with?: Maybe<ID_Input>;
  auditID_not_starts_with?: Maybe<ID_Input>;
  auditID_ends_with?: Maybe<ID_Input>;
  auditID_not_ends_with?: Maybe<ID_Input>;
  stage?: Maybe<String>;
  stage_not?: Maybe<String>;
  stage_in?: Maybe<String[] | String>;
  stage_not_in?: Maybe<String[] | String>;
  stage_lt?: Maybe<String>;
  stage_lte?: Maybe<String>;
  stage_gt?: Maybe<String>;
  stage_gte?: Maybe<String>;
  stage_contains?: Maybe<String>;
  stage_not_contains?: Maybe<String>;
  stage_starts_with?: Maybe<String>;
  stage_not_starts_with?: Maybe<String>;
  stage_ends_with?: Maybe<String>;
  stage_not_ends_with?: Maybe<String>;
  requestURI?: Maybe<String>;
  requestURI_not?: Maybe<String>;
  requestURI_in?: Maybe<String[] | String>;
  requestURI_not_in?: Maybe<String[] | String>;
  requestURI_lt?: Maybe<String>;
  requestURI_lte?: Maybe<String>;
  requestURI_gt?: Maybe<String>;
  requestURI_gte?: Maybe<String>;
  requestURI_contains?: Maybe<String>;
  requestURI_not_contains?: Maybe<String>;
  requestURI_starts_with?: Maybe<String>;
  requestURI_not_starts_with?: Maybe<String>;
  requestURI_ends_with?: Maybe<String>;
  requestURI_not_ends_with?: Maybe<String>;
  verb?: Maybe<String>;
  verb_not?: Maybe<String>;
  verb_in?: Maybe<String[] | String>;
  verb_not_in?: Maybe<String[] | String>;
  verb_lt?: Maybe<String>;
  verb_lte?: Maybe<String>;
  verb_gt?: Maybe<String>;
  verb_gte?: Maybe<String>;
  verb_contains?: Maybe<String>;
  verb_not_contains?: Maybe<String>;
  verb_starts_with?: Maybe<String>;
  verb_not_starts_with?: Maybe<String>;
  verb_ends_with?: Maybe<String>;
  verb_not_ends_with?: Maybe<String>;
  user?: Maybe<UserInfoWhereInput>;
  userAgent?: Maybe<String>;
  userAgent_not?: Maybe<String>;
  userAgent_in?: Maybe<String[] | String>;
  userAgent_not_in?: Maybe<String[] | String>;
  userAgent_lt?: Maybe<String>;
  userAgent_lte?: Maybe<String>;
  userAgent_gt?: Maybe<String>;
  userAgent_gte?: Maybe<String>;
  userAgent_contains?: Maybe<String>;
  userAgent_not_contains?: Maybe<String>;
  userAgent_starts_with?: Maybe<String>;
  userAgent_not_starts_with?: Maybe<String>;
  userAgent_ends_with?: Maybe<String>;
  userAgent_not_ends_with?: Maybe<String>;
  responseStatus?: Maybe<ResponseStatusWhereInput>;
  requestObject?: Maybe<ObjectReferenceWhereInput>;
  requestReceivedTimestamp?: Maybe<String>;
  requestReceivedTimestamp_not?: Maybe<String>;
  requestReceivedTimestamp_in?: Maybe<String[] | String>;
  requestReceivedTimestamp_not_in?: Maybe<String[] | String>;
  requestReceivedTimestamp_lt?: Maybe<String>;
  requestReceivedTimestamp_lte?: Maybe<String>;
  requestReceivedTimestamp_gt?: Maybe<String>;
  requestReceivedTimestamp_gte?: Maybe<String>;
  requestReceivedTimestamp_contains?: Maybe<String>;
  requestReceivedTimestamp_not_contains?: Maybe<String>;
  requestReceivedTimestamp_starts_with?: Maybe<String>;
  requestReceivedTimestamp_not_starts_with?: Maybe<String>;
  requestReceivedTimestamp_ends_with?: Maybe<String>;
  requestReceivedTimestamp_not_ends_with?: Maybe<String>;
  stageTimestamp?: Maybe<String>;
  stageTimestamp_not?: Maybe<String>;
  stageTimestamp_in?: Maybe<String[] | String>;
  stageTimestamp_not_in?: Maybe<String[] | String>;
  stageTimestamp_lt?: Maybe<String>;
  stageTimestamp_lte?: Maybe<String>;
  stageTimestamp_gt?: Maybe<String>;
  stageTimestamp_gte?: Maybe<String>;
  stageTimestamp_contains?: Maybe<String>;
  stageTimestamp_not_contains?: Maybe<String>;
  stageTimestamp_starts_with?: Maybe<String>;
  stageTimestamp_not_starts_with?: Maybe<String>;
  stageTimestamp_ends_with?: Maybe<String>;
  stageTimestamp_not_ends_with?: Maybe<String>;
  AND?: Maybe<EventWhereInput[] | EventWhereInput>;
  OR?: Maybe<EventWhereInput[] | EventWhereInput>;
  NOT?: Maybe<EventWhereInput[] | EventWhereInput>;
}

export interface UserInfoCreategroupsInput {
  set?: Maybe<String[] | String>;
}

export interface ResponseStatusWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  status?: Maybe<String>;
  status_not?: Maybe<String>;
  status_in?: Maybe<String[] | String>;
  status_not_in?: Maybe<String[] | String>;
  status_lt?: Maybe<String>;
  status_lte?: Maybe<String>;
  status_gt?: Maybe<String>;
  status_gte?: Maybe<String>;
  status_contains?: Maybe<String>;
  status_not_contains?: Maybe<String>;
  status_starts_with?: Maybe<String>;
  status_not_starts_with?: Maybe<String>;
  status_ends_with?: Maybe<String>;
  status_not_ends_with?: Maybe<String>;
  reason?: Maybe<String>;
  reason_not?: Maybe<String>;
  reason_in?: Maybe<String[] | String>;
  reason_not_in?: Maybe<String[] | String>;
  reason_lt?: Maybe<String>;
  reason_lte?: Maybe<String>;
  reason_gt?: Maybe<String>;
  reason_gte?: Maybe<String>;
  reason_contains?: Maybe<String>;
  reason_not_contains?: Maybe<String>;
  reason_starts_with?: Maybe<String>;
  reason_not_starts_with?: Maybe<String>;
  reason_ends_with?: Maybe<String>;
  reason_not_ends_with?: Maybe<String>;
  code?: Maybe<Int>;
  code_not?: Maybe<Int>;
  code_in?: Maybe<Int[] | Int>;
  code_not_in?: Maybe<Int[] | Int>;
  code_lt?: Maybe<Int>;
  code_lte?: Maybe<Int>;
  code_gt?: Maybe<Int>;
  code_gte?: Maybe<Int>;
  event?: Maybe<EventWhereInput>;
  AND?: Maybe<ResponseStatusWhereInput[] | ResponseStatusWhereInput>;
  OR?: Maybe<ResponseStatusWhereInput[] | ResponseStatusWhereInput>;
  NOT?: Maybe<ResponseStatusWhereInput[] | ResponseStatusWhereInput>;
}

export interface EventCreatesourceIPsInput {
  set?: Maybe<String[] | String>;
}

export interface ResponseStatusSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ResponseStatusWhereInput>;
  AND?: Maybe<
    | ResponseStatusSubscriptionWhereInput[]
    | ResponseStatusSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ResponseStatusSubscriptionWhereInput[]
    | ResponseStatusSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ResponseStatusSubscriptionWhereInput[]
    | ResponseStatusSubscriptionWhereInput
  >;
}

export interface ResponseStatusCreateOneWithoutEventInput {
  create?: Maybe<ResponseStatusCreateWithoutEventInput>;
  connect?: Maybe<ResponseStatusWhereUniqueInput>;
}

export interface EventSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<EventWhereInput>;
  AND?: Maybe<EventSubscriptionWhereInput[] | EventSubscriptionWhereInput>;
  OR?: Maybe<EventSubscriptionWhereInput[] | EventSubscriptionWhereInput>;
  NOT?: Maybe<EventSubscriptionWhereInput[] | EventSubscriptionWhereInput>;
}

export interface ResponseStatusCreateWithoutEventInput {
  id?: Maybe<ID_Input>;
  metadata?: Maybe<Json>;
  status?: Maybe<String>;
  reason?: Maybe<String>;
  code?: Maybe<Int>;
}

export interface EventUpsertWithoutUserInput {
  update: EventUpdateWithoutUserDataInput;
  create: EventCreateWithoutUserInput;
}

export interface ObjectReferenceCreateOneWithoutEventInput {
  create?: Maybe<ObjectReferenceCreateWithoutEventInput>;
  connect?: Maybe<ObjectReferenceWhereUniqueInput>;
}

export type ObjectReferenceWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  uid?: Maybe<ID_Input>;
}>;

export interface ObjectReferenceCreateWithoutEventInput {
  id?: Maybe<ID_Input>;
  resource?: Maybe<String>;
  namespace?: Maybe<String>;
  name?: Maybe<String>;
  uid?: Maybe<ID_Input>;
  apiGroup?: Maybe<String>;
  apiVersion?: Maybe<String>;
  resourceVersion?: Maybe<String>;
  subresource?: Maybe<String>;
}

export interface UserInfoUpdateInput {
  username?: Maybe<String>;
  groups?: Maybe<UserInfoUpdategroupsInput>;
  event?: Maybe<EventUpdateOneRequiredWithoutUserInput>;
}

export interface EventUpdateInput {
  apiVersion?: Maybe<String>;
  kind?: Maybe<String>;
  level?: Maybe<String>;
  auditID?: Maybe<ID_Input>;
  stage?: Maybe<String>;
  requestURI?: Maybe<String>;
  verb?: Maybe<String>;
  user?: Maybe<UserInfoUpdateOneRequiredWithoutEventInput>;
  sourceIPs?: Maybe<EventUpdatesourceIPsInput>;
  userAgent?: Maybe<String>;
  responseStatus?: Maybe<ResponseStatusUpdateOneWithoutEventInput>;
  requestObject?: Maybe<ObjectReferenceUpdateOneWithoutEventInput>;
  requestReceivedTimestamp?: Maybe<String>;
  stageTimestamp?: Maybe<String>;
  annotations?: Maybe<Json>;
}

export interface EventCreateOneWithoutUserInput {
  create?: Maybe<EventCreateWithoutUserInput>;
  connect?: Maybe<EventWhereUniqueInput>;
}

export interface UserInfoUpdateOneRequiredWithoutEventInput {
  create?: Maybe<UserInfoCreateWithoutEventInput>;
  update?: Maybe<UserInfoUpdateWithoutEventDataInput>;
  upsert?: Maybe<UserInfoUpsertWithoutEventInput>;
  connect?: Maybe<UserInfoWhereUniqueInput>;
}

export interface UserInfoCreateInput {
  id?: Maybe<ID_Input>;
  username: String;
  groups?: Maybe<UserInfoCreategroupsInput>;
  event: EventCreateOneWithoutUserInput;
}

export interface UserInfoUpdateWithoutEventDataInput {
  username?: Maybe<String>;
  groups?: Maybe<UserInfoUpdategroupsInput>;
}

export interface EventUpsertWithoutResponseStatusInput {
  update: EventUpdateWithoutResponseStatusDataInput;
  create: EventCreateWithoutResponseStatusInput;
}

export interface ResponseStatusCreateInput {
  id?: Maybe<ID_Input>;
  metadata?: Maybe<Json>;
  status?: Maybe<String>;
  reason?: Maybe<String>;
  code?: Maybe<Int>;
  event: EventCreateOneWithoutResponseStatusInput;
}

export type UserInfoWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserInfoUpsertWithoutEventInput {
  update: UserInfoUpdateWithoutEventDataInput;
  create: UserInfoCreateWithoutEventInput;
}

export interface ResponseStatusUpdateInput {
  metadata?: Maybe<Json>;
  status?: Maybe<String>;
  reason?: Maybe<String>;
  code?: Maybe<Int>;
  event?: Maybe<EventUpdateOneRequiredWithoutResponseStatusInput>;
}

export interface EventUpdatesourceIPsInput {
  set?: Maybe<String[] | String>;
}

export interface EventCreateOneWithoutResponseStatusInput {
  create?: Maybe<EventCreateWithoutResponseStatusInput>;
  connect?: Maybe<EventWhereUniqueInput>;
}

export interface ResponseStatusUpdateOneWithoutEventInput {
  create?: Maybe<ResponseStatusCreateWithoutEventInput>;
  update?: Maybe<ResponseStatusUpdateWithoutEventDataInput>;
  upsert?: Maybe<ResponseStatusUpsertWithoutEventInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ResponseStatusWhereUniqueInput>;
}

export interface UserInfoSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserInfoWhereInput>;
  AND?: Maybe<
    UserInfoSubscriptionWhereInput[] | UserInfoSubscriptionWhereInput
  >;
  OR?: Maybe<UserInfoSubscriptionWhereInput[] | UserInfoSubscriptionWhereInput>;
  NOT?: Maybe<
    UserInfoSubscriptionWhereInput[] | UserInfoSubscriptionWhereInput
  >;
}

export interface ObjectReferenceUpdateManyMutationInput {
  resource?: Maybe<String>;
  namespace?: Maybe<String>;
  name?: Maybe<String>;
  uid?: Maybe<ID_Input>;
  apiGroup?: Maybe<String>;
  apiVersion?: Maybe<String>;
  resourceVersion?: Maybe<String>;
  subresource?: Maybe<String>;
}

export interface ObjectReferenceWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  resource?: Maybe<String>;
  resource_not?: Maybe<String>;
  resource_in?: Maybe<String[] | String>;
  resource_not_in?: Maybe<String[] | String>;
  resource_lt?: Maybe<String>;
  resource_lte?: Maybe<String>;
  resource_gt?: Maybe<String>;
  resource_gte?: Maybe<String>;
  resource_contains?: Maybe<String>;
  resource_not_contains?: Maybe<String>;
  resource_starts_with?: Maybe<String>;
  resource_not_starts_with?: Maybe<String>;
  resource_ends_with?: Maybe<String>;
  resource_not_ends_with?: Maybe<String>;
  namespace?: Maybe<String>;
  namespace_not?: Maybe<String>;
  namespace_in?: Maybe<String[] | String>;
  namespace_not_in?: Maybe<String[] | String>;
  namespace_lt?: Maybe<String>;
  namespace_lte?: Maybe<String>;
  namespace_gt?: Maybe<String>;
  namespace_gte?: Maybe<String>;
  namespace_contains?: Maybe<String>;
  namespace_not_contains?: Maybe<String>;
  namespace_starts_with?: Maybe<String>;
  namespace_not_starts_with?: Maybe<String>;
  namespace_ends_with?: Maybe<String>;
  namespace_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  uid?: Maybe<ID_Input>;
  uid_not?: Maybe<ID_Input>;
  uid_in?: Maybe<ID_Input[] | ID_Input>;
  uid_not_in?: Maybe<ID_Input[] | ID_Input>;
  uid_lt?: Maybe<ID_Input>;
  uid_lte?: Maybe<ID_Input>;
  uid_gt?: Maybe<ID_Input>;
  uid_gte?: Maybe<ID_Input>;
  uid_contains?: Maybe<ID_Input>;
  uid_not_contains?: Maybe<ID_Input>;
  uid_starts_with?: Maybe<ID_Input>;
  uid_not_starts_with?: Maybe<ID_Input>;
  uid_ends_with?: Maybe<ID_Input>;
  uid_not_ends_with?: Maybe<ID_Input>;
  apiGroup?: Maybe<String>;
  apiGroup_not?: Maybe<String>;
  apiGroup_in?: Maybe<String[] | String>;
  apiGroup_not_in?: Maybe<String[] | String>;
  apiGroup_lt?: Maybe<String>;
  apiGroup_lte?: Maybe<String>;
  apiGroup_gt?: Maybe<String>;
  apiGroup_gte?: Maybe<String>;
  apiGroup_contains?: Maybe<String>;
  apiGroup_not_contains?: Maybe<String>;
  apiGroup_starts_with?: Maybe<String>;
  apiGroup_not_starts_with?: Maybe<String>;
  apiGroup_ends_with?: Maybe<String>;
  apiGroup_not_ends_with?: Maybe<String>;
  apiVersion?: Maybe<String>;
  apiVersion_not?: Maybe<String>;
  apiVersion_in?: Maybe<String[] | String>;
  apiVersion_not_in?: Maybe<String[] | String>;
  apiVersion_lt?: Maybe<String>;
  apiVersion_lte?: Maybe<String>;
  apiVersion_gt?: Maybe<String>;
  apiVersion_gte?: Maybe<String>;
  apiVersion_contains?: Maybe<String>;
  apiVersion_not_contains?: Maybe<String>;
  apiVersion_starts_with?: Maybe<String>;
  apiVersion_not_starts_with?: Maybe<String>;
  apiVersion_ends_with?: Maybe<String>;
  apiVersion_not_ends_with?: Maybe<String>;
  resourceVersion?: Maybe<String>;
  resourceVersion_not?: Maybe<String>;
  resourceVersion_in?: Maybe<String[] | String>;
  resourceVersion_not_in?: Maybe<String[] | String>;
  resourceVersion_lt?: Maybe<String>;
  resourceVersion_lte?: Maybe<String>;
  resourceVersion_gt?: Maybe<String>;
  resourceVersion_gte?: Maybe<String>;
  resourceVersion_contains?: Maybe<String>;
  resourceVersion_not_contains?: Maybe<String>;
  resourceVersion_starts_with?: Maybe<String>;
  resourceVersion_not_starts_with?: Maybe<String>;
  resourceVersion_ends_with?: Maybe<String>;
  resourceVersion_not_ends_with?: Maybe<String>;
  subresource?: Maybe<String>;
  subresource_not?: Maybe<String>;
  subresource_in?: Maybe<String[] | String>;
  subresource_not_in?: Maybe<String[] | String>;
  subresource_lt?: Maybe<String>;
  subresource_lte?: Maybe<String>;
  subresource_gt?: Maybe<String>;
  subresource_gte?: Maybe<String>;
  subresource_contains?: Maybe<String>;
  subresource_not_contains?: Maybe<String>;
  subresource_starts_with?: Maybe<String>;
  subresource_not_starts_with?: Maybe<String>;
  subresource_ends_with?: Maybe<String>;
  subresource_not_ends_with?: Maybe<String>;
  event?: Maybe<EventWhereInput>;
  AND?: Maybe<ObjectReferenceWhereInput[] | ObjectReferenceWhereInput>;
  OR?: Maybe<ObjectReferenceWhereInput[] | ObjectReferenceWhereInput>;
  NOT?: Maybe<ObjectReferenceWhereInput[] | ObjectReferenceWhereInput>;
}

export interface ResponseStatusUpsertWithoutEventInput {
  update: ResponseStatusUpdateWithoutEventDataInput;
  create: ResponseStatusCreateWithoutEventInput;
}

export interface UserInfoUpdateManyMutationInput {
  username?: Maybe<String>;
  groups?: Maybe<UserInfoUpdategroupsInput>;
}

export interface ObjectReferenceUpdateOneWithoutEventInput {
  create?: Maybe<ObjectReferenceCreateWithoutEventInput>;
  update?: Maybe<ObjectReferenceUpdateWithoutEventDataInput>;
  upsert?: Maybe<ObjectReferenceUpsertWithoutEventInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ObjectReferenceWhereUniqueInput>;
}

export interface EventUpdateOneRequiredWithoutUserInput {
  create?: Maybe<EventCreateWithoutUserInput>;
  update?: Maybe<EventUpdateWithoutUserDataInput>;
  upsert?: Maybe<EventUpsertWithoutUserInput>;
  connect?: Maybe<EventWhereUniqueInput>;
}

export interface ObjectReferenceUpdateWithoutEventDataInput {
  resource?: Maybe<String>;
  namespace?: Maybe<String>;
  name?: Maybe<String>;
  uid?: Maybe<ID_Input>;
  apiGroup?: Maybe<String>;
  apiVersion?: Maybe<String>;
  resourceVersion?: Maybe<String>;
  subresource?: Maybe<String>;
}

export type ResponseStatusWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ObjectReferenceUpsertWithoutEventInput {
  update: ObjectReferenceUpdateWithoutEventDataInput;
  create: ObjectReferenceCreateWithoutEventInput;
}

export interface EventUpdateWithoutResponseStatusDataInput {
  apiVersion?: Maybe<String>;
  kind?: Maybe<String>;
  level?: Maybe<String>;
  auditID?: Maybe<ID_Input>;
  stage?: Maybe<String>;
  requestURI?: Maybe<String>;
  verb?: Maybe<String>;
  user?: Maybe<UserInfoUpdateOneRequiredWithoutEventInput>;
  sourceIPs?: Maybe<EventUpdatesourceIPsInput>;
  userAgent?: Maybe<String>;
  requestObject?: Maybe<ObjectReferenceUpdateOneWithoutEventInput>;
  requestReceivedTimestamp?: Maybe<String>;
  stageTimestamp?: Maybe<String>;
  annotations?: Maybe<Json>;
}

export interface EventUpdateManyMutationInput {
  apiVersion?: Maybe<String>;
  kind?: Maybe<String>;
  level?: Maybe<String>;
  auditID?: Maybe<ID_Input>;
  stage?: Maybe<String>;
  requestURI?: Maybe<String>;
  verb?: Maybe<String>;
  sourceIPs?: Maybe<EventUpdatesourceIPsInput>;
  userAgent?: Maybe<String>;
  requestReceivedTimestamp?: Maybe<String>;
  stageTimestamp?: Maybe<String>;
  annotations?: Maybe<Json>;
}

export interface EventCreateWithoutResponseStatusInput {
  id?: Maybe<ID_Input>;
  apiVersion?: Maybe<String>;
  kind?: Maybe<String>;
  level: String;
  auditID?: Maybe<ID_Input>;
  stage: String;
  requestURI: String;
  verb: String;
  user: UserInfoCreateOneWithoutEventInput;
  sourceIPs?: Maybe<EventCreatesourceIPsInput>;
  userAgent?: Maybe<String>;
  requestObject?: Maybe<ObjectReferenceCreateOneWithoutEventInput>;
  requestReceivedTimestamp?: Maybe<String>;
  stageTimestamp?: Maybe<String>;
  annotations?: Maybe<Json>;
}

export interface EventUpsertWithoutRequestObjectInput {
  update: EventUpdateWithoutRequestObjectDataInput;
  create: EventCreateWithoutRequestObjectInput;
}

export interface UserInfoWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  event?: Maybe<EventWhereInput>;
  AND?: Maybe<UserInfoWhereInput[] | UserInfoWhereInput>;
  OR?: Maybe<UserInfoWhereInput[] | UserInfoWhereInput>;
  NOT?: Maybe<UserInfoWhereInput[] | UserInfoWhereInput>;
}

export interface EventUpdateWithoutRequestObjectDataInput {
  apiVersion?: Maybe<String>;
  kind?: Maybe<String>;
  level?: Maybe<String>;
  auditID?: Maybe<ID_Input>;
  stage?: Maybe<String>;
  requestURI?: Maybe<String>;
  verb?: Maybe<String>;
  user?: Maybe<UserInfoUpdateOneRequiredWithoutEventInput>;
  sourceIPs?: Maybe<EventUpdatesourceIPsInput>;
  userAgent?: Maybe<String>;
  responseStatus?: Maybe<ResponseStatusUpdateOneWithoutEventInput>;
  requestReceivedTimestamp?: Maybe<String>;
  stageTimestamp?: Maybe<String>;
  annotations?: Maybe<Json>;
}

export interface EventUpdateWithoutUserDataInput {
  apiVersion?: Maybe<String>;
  kind?: Maybe<String>;
  level?: Maybe<String>;
  auditID?: Maybe<ID_Input>;
  stage?: Maybe<String>;
  requestURI?: Maybe<String>;
  verb?: Maybe<String>;
  sourceIPs?: Maybe<EventUpdatesourceIPsInput>;
  userAgent?: Maybe<String>;
  responseStatus?: Maybe<ResponseStatusUpdateOneWithoutEventInput>;
  requestObject?: Maybe<ObjectReferenceUpdateOneWithoutEventInput>;
  requestReceivedTimestamp?: Maybe<String>;
  stageTimestamp?: Maybe<String>;
  annotations?: Maybe<Json>;
}

export interface ResponseStatusUpdateManyMutationInput {
  metadata?: Maybe<Json>;
  status?: Maybe<String>;
  reason?: Maybe<String>;
  code?: Maybe<Int>;
}

export interface ObjectReferenceUpdateInput {
  resource?: Maybe<String>;
  namespace?: Maybe<String>;
  name?: Maybe<String>;
  uid?: Maybe<ID_Input>;
  apiGroup?: Maybe<String>;
  apiVersion?: Maybe<String>;
  resourceVersion?: Maybe<String>;
  subresource?: Maybe<String>;
  event?: Maybe<EventUpdateOneRequiredWithoutRequestObjectInput>;
}

export interface EventCreateWithoutRequestObjectInput {
  id?: Maybe<ID_Input>;
  apiVersion?: Maybe<String>;
  kind?: Maybe<String>;
  level: String;
  auditID?: Maybe<ID_Input>;
  stage: String;
  requestURI: String;
  verb: String;
  user: UserInfoCreateOneWithoutEventInput;
  sourceIPs?: Maybe<EventCreatesourceIPsInput>;
  userAgent?: Maybe<String>;
  responseStatus?: Maybe<ResponseStatusCreateOneWithoutEventInput>;
  requestReceivedTimestamp?: Maybe<String>;
  stageTimestamp?: Maybe<String>;
  annotations?: Maybe<Json>;
}

export interface EventCreateOneWithoutRequestObjectInput {
  create?: Maybe<EventCreateWithoutRequestObjectInput>;
  connect?: Maybe<EventWhereUniqueInput>;
}

export interface ObjectReferenceCreateInput {
  id?: Maybe<ID_Input>;
  resource?: Maybe<String>;
  namespace?: Maybe<String>;
  name?: Maybe<String>;
  uid?: Maybe<ID_Input>;
  apiGroup?: Maybe<String>;
  apiVersion?: Maybe<String>;
  resourceVersion?: Maybe<String>;
  subresource?: Maybe<String>;
  event: EventCreateOneWithoutRequestObjectInput;
}

export interface EventUpdateOneRequiredWithoutResponseStatusInput {
  create?: Maybe<EventCreateWithoutResponseStatusInput>;
  update?: Maybe<EventUpdateWithoutResponseStatusDataInput>;
  upsert?: Maybe<EventUpsertWithoutResponseStatusInput>;
  connect?: Maybe<EventWhereUniqueInput>;
}

export interface EventCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  apiVersion?: Maybe<String>;
  kind?: Maybe<String>;
  level: String;
  auditID?: Maybe<ID_Input>;
  stage: String;
  requestURI: String;
  verb: String;
  sourceIPs?: Maybe<EventCreatesourceIPsInput>;
  userAgent?: Maybe<String>;
  responseStatus?: Maybe<ResponseStatusCreateOneWithoutEventInput>;
  requestObject?: Maybe<ObjectReferenceCreateOneWithoutEventInput>;
  requestReceivedTimestamp?: Maybe<String>;
  stageTimestamp?: Maybe<String>;
  annotations?: Maybe<Json>;
}

export interface ObjectReferenceSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ObjectReferenceWhereInput>;
  AND?: Maybe<
    | ObjectReferenceSubscriptionWhereInput[]
    | ObjectReferenceSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ObjectReferenceSubscriptionWhereInput[]
    | ObjectReferenceSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ObjectReferenceSubscriptionWhereInput[]
    | ObjectReferenceSubscriptionWhereInput
  >;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserInfoPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  username: String;
  groups: String[];
}

export interface UserInfoPreviousValuesPromise
  extends Promise<UserInfoPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  username: () => Promise<String>;
  groups: () => Promise<String[]>;
}

export interface UserInfoPreviousValuesSubscription
  extends Promise<AsyncIterator<UserInfoPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  username: () => Promise<AsyncIterator<String>>;
  groups: () => Promise<AsyncIterator<String[]>>;
}

export interface ObjectReferenceEdge {
  node: ObjectReference;
  cursor: String;
}

export interface ObjectReferenceEdgePromise
  extends Promise<ObjectReferenceEdge>,
    Fragmentable {
  node: <T = ObjectReferencePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ObjectReferenceEdgeSubscription
  extends Promise<AsyncIterator<ObjectReferenceEdge>>,
    Fragmentable {
  node: <T = ObjectReferenceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ObjectReferencePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  resource?: String;
  namespace?: String;
  name?: String;
  uid?: ID_Output;
  apiGroup?: String;
  apiVersion?: String;
  resourceVersion?: String;
  subresource?: String;
}

export interface ObjectReferencePreviousValuesPromise
  extends Promise<ObjectReferencePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  resource: () => Promise<String>;
  namespace: () => Promise<String>;
  name: () => Promise<String>;
  uid: () => Promise<ID_Output>;
  apiGroup: () => Promise<String>;
  apiVersion: () => Promise<String>;
  resourceVersion: () => Promise<String>;
  subresource: () => Promise<String>;
}

export interface ObjectReferencePreviousValuesSubscription
  extends Promise<AsyncIterator<ObjectReferencePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  resource: () => Promise<AsyncIterator<String>>;
  namespace: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  uid: () => Promise<AsyncIterator<ID_Output>>;
  apiGroup: () => Promise<AsyncIterator<String>>;
  apiVersion: () => Promise<AsyncIterator<String>>;
  resourceVersion: () => Promise<AsyncIterator<String>>;
  subresource: () => Promise<AsyncIterator<String>>;
}

export interface ObjectReferenceConnection {
  pageInfo: PageInfo;
  edges: ObjectReferenceEdge[];
}

export interface ObjectReferenceConnectionPromise
  extends Promise<ObjectReferenceConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ObjectReferenceEdge>>() => T;
  aggregate: <T = AggregateObjectReferencePromise>() => T;
}

export interface ObjectReferenceConnectionSubscription
  extends Promise<AsyncIterator<ObjectReferenceConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ObjectReferenceEdgeSubscription>>>() => T;
  aggregate: <T = AggregateObjectReferenceSubscription>() => T;
}

export interface AggregateEvent {
  count: Int;
}

export interface AggregateEventPromise
  extends Promise<AggregateEvent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEventSubscription
  extends Promise<AsyncIterator<AggregateEvent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserInfo {
  id: ID_Output;
  createdAt: DateTimeOutput;
  username: String;
  groups: String[];
}

export interface UserInfoPromise extends Promise<UserInfo>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  username: () => Promise<String>;
  groups: () => Promise<String[]>;
  event: <T = EventPromise>() => T;
}

export interface UserInfoSubscription
  extends Promise<AsyncIterator<UserInfo>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  username: () => Promise<AsyncIterator<String>>;
  groups: () => Promise<AsyncIterator<String[]>>;
  event: <T = EventSubscription>() => T;
}

export interface UserInfoNullablePromise
  extends Promise<UserInfo | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  username: () => Promise<String>;
  groups: () => Promise<String[]>;
  event: <T = EventPromise>() => T;
}

export interface ObjectReference {
  id: ID_Output;
  createdAt: DateTimeOutput;
  resource?: String;
  namespace?: String;
  name?: String;
  uid?: ID_Output;
  apiGroup?: String;
  apiVersion?: String;
  resourceVersion?: String;
  subresource?: String;
}

export interface ObjectReferencePromise
  extends Promise<ObjectReference>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  resource: () => Promise<String>;
  namespace: () => Promise<String>;
  name: () => Promise<String>;
  uid: () => Promise<ID_Output>;
  apiGroup: () => Promise<String>;
  apiVersion: () => Promise<String>;
  resourceVersion: () => Promise<String>;
  subresource: () => Promise<String>;
  event: <T = EventPromise>() => T;
}

export interface ObjectReferenceSubscription
  extends Promise<AsyncIterator<ObjectReference>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  resource: () => Promise<AsyncIterator<String>>;
  namespace: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  uid: () => Promise<AsyncIterator<ID_Output>>;
  apiGroup: () => Promise<AsyncIterator<String>>;
  apiVersion: () => Promise<AsyncIterator<String>>;
  resourceVersion: () => Promise<AsyncIterator<String>>;
  subresource: () => Promise<AsyncIterator<String>>;
  event: <T = EventSubscription>() => T;
}

export interface ObjectReferenceNullablePromise
  extends Promise<ObjectReference | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  resource: () => Promise<String>;
  namespace: () => Promise<String>;
  name: () => Promise<String>;
  uid: () => Promise<ID_Output>;
  apiGroup: () => Promise<String>;
  apiVersion: () => Promise<String>;
  resourceVersion: () => Promise<String>;
  subresource: () => Promise<String>;
  event: <T = EventPromise>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface UserInfoEdge {
  node: UserInfo;
  cursor: String;
}

export interface UserInfoEdgePromise
  extends Promise<UserInfoEdge>,
    Fragmentable {
  node: <T = UserInfoPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserInfoEdgeSubscription
  extends Promise<AsyncIterator<UserInfoEdge>>,
    Fragmentable {
  node: <T = UserInfoSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface EventEdge {
  node: Event;
  cursor: String;
}

export interface EventEdgePromise extends Promise<EventEdge>, Fragmentable {
  node: <T = EventPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EventEdgeSubscription
  extends Promise<AsyncIterator<EventEdge>>,
    Fragmentable {
  node: <T = EventSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ResponseStatusPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  metadata?: Json;
  status?: String;
  reason?: String;
  code?: Int;
}

export interface ResponseStatusPreviousValuesPromise
  extends Promise<ResponseStatusPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  metadata: () => Promise<Json>;
  status: () => Promise<String>;
  reason: () => Promise<String>;
  code: () => Promise<Int>;
}

export interface ResponseStatusPreviousValuesSubscription
  extends Promise<AsyncIterator<ResponseStatusPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  metadata: () => Promise<AsyncIterator<Json>>;
  status: () => Promise<AsyncIterator<String>>;
  reason: () => Promise<AsyncIterator<String>>;
  code: () => Promise<AsyncIterator<Int>>;
}

export interface ResponseStatus {
  id: ID_Output;
  createdAt: DateTimeOutput;
  metadata?: Json;
  status?: String;
  reason?: String;
  code?: Int;
}

export interface ResponseStatusPromise
  extends Promise<ResponseStatus>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  metadata: () => Promise<Json>;
  status: () => Promise<String>;
  reason: () => Promise<String>;
  code: () => Promise<Int>;
  event: <T = EventPromise>() => T;
}

export interface ResponseStatusSubscription
  extends Promise<AsyncIterator<ResponseStatus>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  metadata: () => Promise<AsyncIterator<Json>>;
  status: () => Promise<AsyncIterator<String>>;
  reason: () => Promise<AsyncIterator<String>>;
  code: () => Promise<AsyncIterator<Int>>;
  event: <T = EventSubscription>() => T;
}

export interface ResponseStatusNullablePromise
  extends Promise<ResponseStatus | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  metadata: () => Promise<Json>;
  status: () => Promise<String>;
  reason: () => Promise<String>;
  code: () => Promise<Int>;
  event: <T = EventPromise>() => T;
}

export interface ResponseStatusEdge {
  node: ResponseStatus;
  cursor: String;
}

export interface ResponseStatusEdgePromise
  extends Promise<ResponseStatusEdge>,
    Fragmentable {
  node: <T = ResponseStatusPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ResponseStatusEdgeSubscription
  extends Promise<AsyncIterator<ResponseStatusEdge>>,
    Fragmentable {
  node: <T = ResponseStatusSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ResponseStatusSubscriptionPayload {
  mutation: MutationType;
  node: ResponseStatus;
  updatedFields: String[];
  previousValues: ResponseStatusPreviousValues;
}

export interface ResponseStatusSubscriptionPayloadPromise
  extends Promise<ResponseStatusSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ResponseStatusPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ResponseStatusPreviousValuesPromise>() => T;
}

export interface ResponseStatusSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ResponseStatusSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ResponseStatusSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ResponseStatusPreviousValuesSubscription>() => T;
}

export interface Event {
  id: ID_Output;
  createdAt: DateTimeOutput;
  apiVersion?: String;
  kind?: String;
  level: String;
  auditID?: ID_Output;
  stage: String;
  requestURI: String;
  verb: String;
  sourceIPs: String[];
  userAgent?: String;
  requestReceivedTimestamp?: String;
  stageTimestamp?: String;
  annotations?: Json;
}

export interface EventPromise extends Promise<Event>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  apiVersion: () => Promise<String>;
  kind: () => Promise<String>;
  level: () => Promise<String>;
  auditID: () => Promise<ID_Output>;
  stage: () => Promise<String>;
  requestURI: () => Promise<String>;
  verb: () => Promise<String>;
  user: <T = UserInfoPromise>() => T;
  sourceIPs: () => Promise<String[]>;
  userAgent: () => Promise<String>;
  responseStatus: <T = ResponseStatusPromise>() => T;
  requestObject: <T = ObjectReferencePromise>() => T;
  requestReceivedTimestamp: () => Promise<String>;
  stageTimestamp: () => Promise<String>;
  annotations: () => Promise<Json>;
}

export interface EventSubscription
  extends Promise<AsyncIterator<Event>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  apiVersion: () => Promise<AsyncIterator<String>>;
  kind: () => Promise<AsyncIterator<String>>;
  level: () => Promise<AsyncIterator<String>>;
  auditID: () => Promise<AsyncIterator<ID_Output>>;
  stage: () => Promise<AsyncIterator<String>>;
  requestURI: () => Promise<AsyncIterator<String>>;
  verb: () => Promise<AsyncIterator<String>>;
  user: <T = UserInfoSubscription>() => T;
  sourceIPs: () => Promise<AsyncIterator<String[]>>;
  userAgent: () => Promise<AsyncIterator<String>>;
  responseStatus: <T = ResponseStatusSubscription>() => T;
  requestObject: <T = ObjectReferenceSubscription>() => T;
  requestReceivedTimestamp: () => Promise<AsyncIterator<String>>;
  stageTimestamp: () => Promise<AsyncIterator<String>>;
  annotations: () => Promise<AsyncIterator<Json>>;
}

export interface EventNullablePromise
  extends Promise<Event | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  apiVersion: () => Promise<String>;
  kind: () => Promise<String>;
  level: () => Promise<String>;
  auditID: () => Promise<ID_Output>;
  stage: () => Promise<String>;
  requestURI: () => Promise<String>;
  verb: () => Promise<String>;
  user: <T = UserInfoPromise>() => T;
  sourceIPs: () => Promise<String[]>;
  userAgent: () => Promise<String>;
  responseStatus: <T = ResponseStatusPromise>() => T;
  requestObject: <T = ObjectReferencePromise>() => T;
  requestReceivedTimestamp: () => Promise<String>;
  stageTimestamp: () => Promise<String>;
  annotations: () => Promise<Json>;
}

export interface UserInfoSubscriptionPayload {
  mutation: MutationType;
  node: UserInfo;
  updatedFields: String[];
  previousValues: UserInfoPreviousValues;
}

export interface UserInfoSubscriptionPayloadPromise
  extends Promise<UserInfoSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserInfoPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserInfoPreviousValuesPromise>() => T;
}

export interface UserInfoSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserInfoSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserInfoSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserInfoPreviousValuesSubscription>() => T;
}

export interface UserInfoConnection {
  pageInfo: PageInfo;
  edges: UserInfoEdge[];
}

export interface UserInfoConnectionPromise
  extends Promise<UserInfoConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserInfoEdge>>() => T;
  aggregate: <T = AggregateUserInfoPromise>() => T;
}

export interface UserInfoConnectionSubscription
  extends Promise<AsyncIterator<UserInfoConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserInfoEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserInfoSubscription>() => T;
}

export interface ObjectReferenceSubscriptionPayload {
  mutation: MutationType;
  node: ObjectReference;
  updatedFields: String[];
  previousValues: ObjectReferencePreviousValues;
}

export interface ObjectReferenceSubscriptionPayloadPromise
  extends Promise<ObjectReferenceSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ObjectReferencePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ObjectReferencePreviousValuesPromise>() => T;
}

export interface ObjectReferenceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ObjectReferenceSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ObjectReferenceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ObjectReferencePreviousValuesSubscription>() => T;
}

export interface EventConnection {
  pageInfo: PageInfo;
  edges: EventEdge[];
}

export interface EventConnectionPromise
  extends Promise<EventConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EventEdge>>() => T;
  aggregate: <T = AggregateEventPromise>() => T;
}

export interface EventConnectionSubscription
  extends Promise<AsyncIterator<EventConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EventEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEventSubscription>() => T;
}

export interface EventPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  apiVersion?: String;
  kind?: String;
  level: String;
  auditID?: ID_Output;
  stage: String;
  requestURI: String;
  verb: String;
  sourceIPs: String[];
  userAgent?: String;
  requestReceivedTimestamp?: String;
  stageTimestamp?: String;
  annotations?: Json;
}

export interface EventPreviousValuesPromise
  extends Promise<EventPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  apiVersion: () => Promise<String>;
  kind: () => Promise<String>;
  level: () => Promise<String>;
  auditID: () => Promise<ID_Output>;
  stage: () => Promise<String>;
  requestURI: () => Promise<String>;
  verb: () => Promise<String>;
  sourceIPs: () => Promise<String[]>;
  userAgent: () => Promise<String>;
  requestReceivedTimestamp: () => Promise<String>;
  stageTimestamp: () => Promise<String>;
  annotations: () => Promise<Json>;
}

export interface EventPreviousValuesSubscription
  extends Promise<AsyncIterator<EventPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  apiVersion: () => Promise<AsyncIterator<String>>;
  kind: () => Promise<AsyncIterator<String>>;
  level: () => Promise<AsyncIterator<String>>;
  auditID: () => Promise<AsyncIterator<ID_Output>>;
  stage: () => Promise<AsyncIterator<String>>;
  requestURI: () => Promise<AsyncIterator<String>>;
  verb: () => Promise<AsyncIterator<String>>;
  sourceIPs: () => Promise<AsyncIterator<String[]>>;
  userAgent: () => Promise<AsyncIterator<String>>;
  requestReceivedTimestamp: () => Promise<AsyncIterator<String>>;
  stageTimestamp: () => Promise<AsyncIterator<String>>;
  annotations: () => Promise<AsyncIterator<Json>>;
}

export interface EventSubscriptionPayload {
  mutation: MutationType;
  node: Event;
  updatedFields: String[];
  previousValues: EventPreviousValues;
}

export interface EventSubscriptionPayloadPromise
  extends Promise<EventSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EventPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EventPreviousValuesPromise>() => T;
}

export interface EventSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EventSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EventSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EventPreviousValuesSubscription>() => T;
}

export interface AggregateResponseStatus {
  count: Int;
}

export interface AggregateResponseStatusPromise
  extends Promise<AggregateResponseStatus>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateResponseStatusSubscription
  extends Promise<AsyncIterator<AggregateResponseStatus>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateUserInfo {
  count: Int;
}

export interface AggregateUserInfoPromise
  extends Promise<AggregateUserInfo>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserInfoSubscription
  extends Promise<AsyncIterator<AggregateUserInfo>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateObjectReference {
  count: Int;
}

export interface AggregateObjectReferencePromise
  extends Promise<AggregateObjectReference>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateObjectReferenceSubscription
  extends Promise<AsyncIterator<AggregateObjectReference>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ResponseStatusConnection {
  pageInfo: PageInfo;
  edges: ResponseStatusEdge[];
}

export interface ResponseStatusConnectionPromise
  extends Promise<ResponseStatusConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ResponseStatusEdge>>() => T;
  aggregate: <T = AggregateResponseStatusPromise>() => T;
}

export interface ResponseStatusConnectionSubscription
  extends Promise<AsyncIterator<ResponseStatusConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ResponseStatusEdgeSubscription>>>() => T;
  aggregate: <T = AggregateResponseStatusSubscription>() => T;
}

export type Json = any;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Event",
    embedded: false
  },
  {
    name: "ResponseStatus",
    embedded: false
  },
  {
    name: "UserInfo",
    embedded: false
  },
  {
    name: "ObjectReference",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
