#+TITLE: Jupyter Explorations

* Purpose
  This details how to set up a jupyter notebook to fetch data from our postgres instance and visualize it using d3 and pandas.  It is a mix of python, javascript, and literate programming-- "the ii full package".
* Navigate to our Correct Directory
  Let's get tmate to the right place, which is for me at ~/ii/jupyter-exploration
  #+NAME: Navigate to working directory
  #+BEGIN_SRC tmate
  cd ~/ii/jupyter-exploration
  #+END_SRC

* Prerequisites
  We can test against our sharing box whether we have these prereq's.
** Node and NPM
  For this, we want at least version 10.  There's a specific jupyter dependency that works for v6, v8, and v10+.  I was on v9 originally and it caused so many headaches.
  
  While jupyter is all about literate python, it is actually a node app, so this is required for jupyter itself.
  
  Check your minibuffer for your versions.  If you are not up-to-date, check out how to install node using [[https://github.com/nvm-sh/nvm][NVM: node version manager]]
  
   #+NAME: Checking for node and npm
   #+BEGIN_SRC shell :results silent
   echo "node:" $(node --version)
   echo " npm:" $(npm --version)
   #+END_SRC
** Python 3
   
   #+NAME: Checking for python3
   #+BEGIN_SRC shell :results silent
   echo "python:" $(python3 --version)
   #+END_SRC
   
** Jupyter
   [[https://jupyter.org/][Jupyter]] is our interactive notebook that works much like an org file, but with a native webui. 
   #+NAME: Checking for jupyter
   #+BEGIN_SRC shell :results silent
   echo "jupyter:" $(jupyter --version)
   #+END_SRC
   
** Virtualenv
   We want to set up a python virtualenv for our notebook to make it so we can extend jupyter with necessary plugins.  Without the virtual env i found the notebook behaving erratically with permission issus.
   
   #+NAME: Checking for virtualenv
   #+BEGIN_SRC shell :results silent
   echo "virtualenv:" $(virtualenv --version)
   #+END_SRC

* Setup 
** Setup VirtualEnv
  #+NAME: Setup VirtualEnv
  #+BEGIN_SRC tmate
    virtualenv .venv
    . .venv/bin/activate
  #+END_SRC
** Install Python Dependencies
   #+NAME: Install Python Dependencies
   #+BEGIN_SRC tmate
     pip install pandas
     pip install requests
     pip install matplotlib
     pip install gql
   #+END_SRC

** Install jupyter-require
   This will allow us to require-in node modules (notably d3)
   #+NAME: Install jupyter-require
   #+BEGIN_SRC tmate
     pip install jupyter-require
     jupyter nbextension install --user --py jupyter_require
     jupyter nbextension enable jupyter_require --user --py
   #+END_SRC


** Turn on Jupyter, set up for remote viewing.
   We are using a shared, headless box, but jupyter is meant to be viewed over a browser.  So we'll set up jupyter on a port and then do port forwarding on our local browser.   You can choose whichever port you like. If the port is already used, then it'll increment up 1 by 1 until it finds a free port, and so be sure to check the output in your right eye to see the actual port you end up with.
   
*** Turn On Jupyter
    #+NAME:  Turn on Jupyter
    #+BEGIN_SRC tmate
    jupyter notebook --no-browser --port=4242
    #+END_SRC

*** Connect to it on local machine.
    This command you want to run on your local device, with the correct username to this shared box.
    #+NAME: Connect to Jupyter on local machine
    #+BEGIN_EXAMPLE
    ssh -N -f -L 127.0.0.1:4242:127.0.0.1:4242 $USER@$SHAREBOX
    #+END_EXAMPLE
    
    An explanation of this command can be found on[[https://explainshell.com/explain?cmd=ssh+-N+-f+-L+127.0.0.1%3A4244%3A127.0.0.1%3A4244+zz%40sharing.io][ explain shell]]



    
* Structure of the Notebook And Next Steps
  
  Our folder is a mix of javascript and .ipynb files
  
:  .
:  ├── barchart.js # our d3 visualization
:  ├── field-coverage.ipynb # jupyter notebook
:  ├── index.org # you are here
  
  The heart is in our =.ipynb= file, which unfortunately is hard to quote here (it's just json).  The essential pattern, though, is we will build a visualization using javascript and d3 and keep it in an external file to aid concision in our notebook.  We then ~require~ the file into the notebook and call it using some python-as-js magic.  This is what creates the visualization.

  To learn more, check out our notebook through your browser, by navigating to ~localhost:4242~

  
 

  

