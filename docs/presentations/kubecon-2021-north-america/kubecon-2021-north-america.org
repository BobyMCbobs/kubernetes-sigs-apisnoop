#+TITLE: Conformance Testing the Kubernetes API
#+SUBTITLE: Tooling that Makes the Difference
#+AUTHOR: Stephen Heywood & Caleb Woodbine, ii.nz

#+begin_notes
Welcome to TITLE

Introductions
#+end_notes

* doc notes                                                        :noexport:
ii @ Kubecon 2021 North-America

This presentation should be available as:

https://docs.apisnoop.io/presentations/kubecon-2021-north-america.html

This presentation should be run locally for OBS to work correctly.




CHECK THE TODOs

* Recording Checklist :noexport:
** Everything Installed
** ssh-agent setup (won't ask for password on push)

* About ii
#+BEGIN_NOTES
STEPHEN

- We are with ii, a group in NZ with a focus on cooperative coding.
- pairing is sharing for us
- you can find us at ii.nz
#+END_NOTES

Technical Folks in New Zealand
- Focus on Cooperative Coding
- Pairing is Sharing
- [[https://ii.nz][ii.nz]] / [[https://ii.coop][ii.coop]]

** People
#+BEGIN_NOTES
CALEB

Who is ii?
- Caleb and Stephen, your speakers
- Brenda, who makes ii function
- Hippie Hacker, founder of ii
- Riaan, project manager
- Zach, data wizard
#+END_NOTES

- Brenda Peel
- Caleb Woodbine
- Hippie Hacker
- Riaan Kleinhans
- Stephen Heywood
- Zach Mandeville

* Kubernetes Conformance
/and it's tooling/
** What is Kubernetes Conformance?
#+begin_notes
STEPHEN

A program by the CNCF to ensure that Kubernetes is the same everywhere
#+end_notes

CNCF Kubernetes Conformance ensures
#+begin_quote
... that every vendor‚Äôs version of Kubernetes supports the required APIs, as do open source community versions
#+end_quote
** Why is Kubernetes Conformance important?
- portability of workloads
- stable APIs behave the same everywhere
- freedom from vendor lock-in
- consistency with APIs

#+begin_notes
STEPHEN

I expect my workloads to be able run the same anywhere k8s does, regardless of vendor.
#+end_notes

** Conformance website
#+begin_notes
STEPHEN

The web site cncf.io/ck provides a good background and rationale for the Conformance program
#+end_notes

#+NAME: Conformance-Kubernetes

[[https://cncf.io/ck][cncf.io/ck]]

[[./kubecon-2021-north-america-ck.png]]
** Who can meet your k8spectations?
#+begin_notes
CALEB

This list is taken from landscape.cncf.io.
You can have consistent, expected, fully-conformanced behaviour across 67 different vendors.
#+end_notes

Currently, there are *67 certified distributions*.

[[https://landscape.cncf.io/category=platform&format=card-mode&grouping=category][landscape.cncf.io]]

[[./kubecon-2021-north-america-landscape-cncf.png]]

Click *Certified K8s/KCSP/KTP* link on the left

** k8s-conformance repo
#+begin_notes
CALEB

- Vendors are certified, and added to that list, following an open, transparent process on the k8s-conformance repo
#+end_notes

https://github.com/cncf/k8s-conformance

#+NAME: Kubernetes Conformance repo
[[./kubecon-2021-north-america-conformance-repo.png]]

* Conformance as Code :noexport:
#+ATTR_REVEAL: :frag roll-in
- defined through the API and a test suite
#+ATTR_REVEAL: :frag roll-in
- allows for tools to be built that fit within k8s workflows
#+ATTR_REVEAL: :frag roll-in
- two examples: Sonobuoy and APISnoop

#+begin_notes
STEPHEN

- defined through the API and a test suite
- allows for tools to be built that fit within k8s workflows
- two examples: Sonobuoy and APISnoop
#+end_notes

* Certifying Distributions with Sonobuoy :noexport:
#+begin_notes
CALEB
#+end_notes
** Deploy Sonobuoy
Build sonobuoy
#+BEGIN_SRC shell
go install github.com/vmware-tanzu/sonobuoy@latest
#+END_SRC

deploy to your cluster
#+BEGIN_SRC shell
sonobuoy run --mode=certified-conformance
#+END_SRC

#+begin_notes
Make sure you're running the latest version of Sonobuoy
#+end_notes

** TODO rerun full suite of Sonobuoy, outputting the full number of tests run :: View test logs
#+BEGIN_SRC shell
sonobuoy logs
#+END_SRC
[[./sonobuoy-logs.png]]

** Check if sonobuoy is done
Check status, and look for ~complete~
#+BEGIN_SRC shell
sonobuoy status
#+END_SRC
[[./sonobuoy-status.png]]
#+BEGIN_NOTES
As you can see, all conformance tests were passed, which means that our distribution is good to go.
#+END_NOTES

** Get Results
#+BEGIN_NOTES
- At the end of the run, you will end up with several files
- these show the complete results of your test run
- You will need to include these files in your PR to k8s-conformance
#+END_NOTES
    #+begin_src tmate :window results :var RUN="RESULTS"
      outfile=$(sonobuoy retrieve)
      mkdir ./results; tar xzf $outfile -C ./results
    #+end_src

    #+RESULTS:
    #+begin_example
    ./results/global
    ./results/global/junit_01.xml
    ./results/global/e2e.log
    #+end_example
** Submit PR
- fork [[https://github.com/cncf/k8s_conformance][k8s conformance]] repo and open PR
- In PR, include output logs and a product.yaml file
- Complete instructions at [[https://github.com/cncf/k8s-conformance][github.com/cncf/k8s-conformance]]

*** Example Pull Request
[[./example-pr.png]]

*** Files Changed
#+BEGIN_NOTES
- this just shows the included files
#+END_NOTES

[[./example-pr_files-changed.png]]

* Tooling that makes the difference
#+begin_notes
STEPHEN
#+end_notes
** [[https://apisnoop.cncf.io][apisnoop.cncf.io]]
#+begin_notes
Display

- Visualizes test runs as an explorable graph
- colour coded for conformance or just tested
- sharable links to your concern (eg latest/core/networking)
- see conformance progress
#+end_notes
#+html: <img src=./kubecon-2021-north-america-sunburst-all-endpoints.png width=1200 />

** [[https://apisnoop.cncf.io][apisnoop.cncf.io]]
#+begin_notes
- Visualizes test runs as an explorable graph
- colour coded for conformance or just tested
- sharable links to your concern (eg latest/core/networking)
- see conformance progress
#+end_notes
#+html: <img src=./kubecon-2021-north-america-1.23-eligible-endpoints.png width=1200 />

* Taking Snoop for a test drive in kind

#+begin_notes
Let's demonstrate some tooling by bringing up Snoop in kind

- decoupled postgres database
- powers each form of APISnoop
- populated with:
  - live audit events from cluster
  - api schema from k/k [[https://github.com/kubernetes/kubernetes/tree/master/api/openapi-spec][swagger.json]]
  - audit events from CI job [[https://gcsweb.k8s.io/gcs/kubernetes-jenkins/logs/ci-kubernetes-gce-conformance-latest/1319331777721929728/artifacts/bootstrap-e2e-master/][api-audit.logs]]

How can I deploy snoopdb in my cluster and ask my own questions about the API shape and usage?
#+end_notes

#+html: <img src=./apisnoop-logo.png width=400 />
#+html: <img src=./kind-logo.png width=400 />

** Launching
#+begin_src shell :async yes :dir /tmp :prologue "(\n" :epilogue "\n) 2>&1 ; :"
git clone https://github.com/cncf/apisnoop
cd apisnoop/kind
kind create cluster --image kindest/node:v1.22.1 --config kind+apisnoop.yaml
#+end_src

#+RESULTS:
#+begin_example
Creating cluster "kind" ...
 ‚Ä¢ Ensuring node image (kindest/node:v1.22.1) üñº  ...
 ‚úì Ensuring node image (kindest/node:v1.22.1) üñº
 ‚Ä¢ Preparing nodes üì¶ üì¶   ...
 ‚úì Preparing nodes üì¶ üì¶
 ‚Ä¢ Writing configuration üìú  ...
 ‚úì Writing configuration üìú
 ‚Ä¢ Starting control-plane üïπÔ∏è  ...
 ‚úì Starting control-plane üïπÔ∏è
 ‚Ä¢ Installing CNI üîå  ...
 ‚úì Installing CNI üîå
 ‚Ä¢ Installing StorageClass üíæ  ...
 ‚úì Installing StorageClass üíæ
 ‚Ä¢ Joining worker nodes üöú  ...
 ‚úì Joining worker nodes üöú
Set kubectl context to "kind-kind"
You can now use your cluster with:

kubectl cluster-info --context kind-kind

Have a nice day! üëã
#+end_example

#+begin_notes
CALEB

Bringing up APISnoop on kind is easy.

Clone the APISnoop repo and create a kind cluster with it's configuration.
#+end_notes

** Discovering untested endpoints
#+begin_src shell :prologue "export HOST=snoopdb.apisnoop\n" :wrap "SRC text"
export HOST="${HOST:-localhost}"
psql -U apisnoop -d apisnoop -h $HOST -c "
SELECT
  endpoint,
  kind
FROM testing.untested_stable_endpoint
WHERE
  eligible is true
AND
  category = 'core'
ORDER BY
  kind, endpoint desc
LIMIT 5;"
#+end_src

#+results:
#+begin_src text
               endpoint               |    kind
--------------------------------------+------------
 createcorev1namespacedpodbinding     | binding
 createcorev1namespacedbinding        | binding
 replacecorev1namespacedevent         | event
 patchcorev1namespacedlimitrange      | limitrange
 listcorev1limitrangeforallnamespaces | limitrange
(5 rows)

#+end_src

** an example (1/2)
#+begin_notes
with the kind cluster up and apisnoop running on it, we're now able to inspect what's happening.
#+end_notes

create a namespace
#+begin_src shell :wrap "src text"
kubectl create ns kubecon-na-2021
#+end_src

#+results:
#+begin_src text
namespace/kubecon-na-2021 created
#+end_src

** an example (2/2)
snooping on your own cluster, with psql!
#+begin_src shell :prologue "export HOST=snoopdb.apisnoop\n" :wrap "src text"
export HOST="${HOST:-localHOST}"
psql -u apisnoop -d apisnoop -h $HOST -c "
select distinct endpoint
from   testing.audit_event
where  endpoint ilike '%namespace%'
and    useragent like 'kubectl/v1.2%'
order  by endpoint;"
#+end_src

#+results:
#+begin_src text
          endpoint
-----------------------------
 createcorev1namespace
 listcorev1namespacedservice
(2 rows)

#+end_src


* APISnoop summary
#+BEGIN_NOTES
STEPHEN

- For the certification to have value, its api must be reliable and consistent.
- We can ensure this through conformance tests.
- APISnoop is intended to help with all aspects of test coverage.
#+END_NOTES
APISnoop is designed to help:
- **Identify** gaps in coverage
- **Close** these gaps with tests
- **Prevent** new gaps from happening

* Why is this important?
#+ATTR_REVEAL: :frag roll-in
- find the endpoints that your workloads use
#+ATTR_REVEAL: :frag roll-in
- discover if you are relying on alpha or beta features

* Closing gaps in Kubernetes Conformance Coverage
** Demo for an entrypoint of test writing
#+begin_notes
- ii uses pair.sharing.io as our primary tool for projects, it is a shared pairing environment that gives you Kubernetes, a shared terminal, and many more tools.
- go to Pair and show process of creating a new instance, mentioning that you will need to be a Kubernetes contributor to use it
- go to existing preparared instance (/kccncna2021-demo/), which has the repos [cncf/apisnoop, apisnoop/ticket-writing] loaded on it and shared with heyste
- everyday at ii, we create new instances and work on our projects, then delete the instances at the end of the day
- bring up tmate session of instance
- show the hostname
- list Pods and show that the environment that we're in is in a Pod
- describe the core components (Humacs, Ingress, PowerDNS, Cert-Manager, www)
- show that Docker is accessible and explain that kind can come up on the side if need be
- describe Emacs and org-mode
- bring up a empty org-mode buffer and create a src block to describe that we are writing the code and documentation at the same time
- navigate to the ticket writing repo in Emacs
- copy the /mock-template.org/ file to /pod-test.org/
- run through the document and update the test
- split the terminal and run the test with =watch kubectl get pods -A=
- export the org file of the test to markdown and HTML
- copy the HTMl into the /~/public_html/ folder and check it out on the web
- commit it to a branch and push
- delete the cluster
#+end_notes

* A special thanks to
- any contributors who've made GA endpoints
- all conformance contributors and community members that've helped get us to ~77% (to date)

* Thanks to these projects for powering this talk
- APISnoop (SnoopDB + Auditlogger)
- Cert-Manager
- Chromium
- External-DNS
- Humacs
- Kind
- Kubernetes
- Linux
- OBS
- Pair
- PowerDNS
- Reveal.js
- Systemd
- go-http-server
- nginx-ingress
- tmate

* Get in contact
- Slack: #k8s-conformance (Kubernetes Conformance Working Group)
- Mailing list: [[mailto:kubernetes-sig-architecture@googlegroups.com][kubernetes-sig-architecture@googlegroups.com]]

* Q&A
* Footnotes :noexport:
* reset :noexport:
** reset branch
     #+begin_src tmate :window PR
     cd ~/apisnoop/docs/presentations/k8s-conformance
     git push ii :notkind-v1.18
     #+end_src

** delete k8s-conformance folder
     #+begin_src tmate :window PR
       rm -rf ~/apisnoop/docs/presentations/k8s-conformance
     #+end_src
** delete k8s-conformance folder
     #+begin_src tmate :window PR
       rm -rf ~/apisnoop/docs/presentations/v1.*/
     #+end_src
** Remove sonobuoy
     #+begin_src tmate :window PR
       kubectl -n sonobuoy delete pod sonobuoy
     #+end_src
** target tmate
   #+name: create tmate target
   #+begin_src bash :eval never
     tmate -S /tmp/kubecon
   #+end_src
** STOW In Cluster Interfacing

   #+begin_src bash :eval never
      export PGUSER=apisnoop PGHOST=localhost
   #+end_src

   #+begin_src bash :var PGHOST="localhost" :var PGUSER="apisnoop" :prologue "export PGHOST PGUSER" :wrap example
      psql -c "select distinct useragent \
                 from testing.audit_event \
                 where useragent not ilike 'kube-%';"
   #+end_src

   #+RESULTS:
   #+begin_example
                              useragent
   ----------------------------------------------------------------
    kubelet/v1.18.0 (linux/amd64) kubernetes/9e99141
    kindnetd/v0.0.0 (linux/amd64) kubernetes/$Format
    sonobuoy/v0.0.0 (darwin/amd64) kubernetes/$Format
    kubectl/v1.19.2 (darwin/amd64) kubernetes/f574309
    coredns/v0.0.0 (linux/amd64) kubernetes/$Format
    local-path-provisioner/v0.0.0 (linux/amd64) kubernetes/$Format
   (6 rows)

   #+end_example

** Auditing the OpenAPI
- APIServer can be configured to log usage
- Combining an AuditPolicy and AuditSink
- Usage is logged into SnoopDB in a cluster
** SnoopDB in cluster
- Identify in Cluster Usage
- Focus on hitting Gaps in API
** LOCAL VARS :noexport:
#+REVEAL_ROOT: https://multiplex.kccncna2021.pair.sharing.io
#+REVEAL_MULTIPLEX_URL: https://multiplex.kccncna2021.pair.sharing.io/
#+REVEAL_MULTIPLEX_SOCKETIO_URL: https://multiplex.kccncna2021.pair.sharing.io/socket.io/socket.io.js
#+REVEAL_MULTIPLEX_SECRET: 16303595814587938032
#+REVEAL_MULTIPLEX_ID: 1ea00b34ec29b2a6
#+REVEAL_VERSION: 4
#+NOREVEAL_DEFAULT_FRAG_STYLE: YY
#+REVEAL_EXTRA_CSS: ./ii-style.css
#+NOREVEAL_EXTRA_JS: YY
#+REVEAL_HLEVEL: 2
#+REVEAL_MARGIN: 0
#+REVEAL_WIDTH: 5000
#+REVEAL_HEIGHT: 800
#+REVEAL_MAX_SCALE: 0.9
#+REVEAL_MIN_SCALE: 0.2
#+REVEAL_PLUGINS: (markdown notes highlight multiplex)
#+REVEAL_SLIDE_NUMBER: ""
#+REVEAL_PROGRESS: f
#+REVEAL_SPEED: 1
#+REVEAL_THEME: night
#+REVEAL_THEME_OPTIONS: beige|black|blood|league|moon|night|serif|simple|sky|solarized|white
#+REVEAL_TRANS: fade
#+REVEAL_TRANS_OPTIONS: none|cube|fade|concave|convex|page|slide|zoom
#+REVEAL_TITLE_SLIDE: <h1>%t</h1>
#+REVEAL_TITLE_SLIDE: <h3>%s</h3>
#+REVEAL_TITLE_SLIDE: <p>%a</p>

#+OPTIONS: num:nil
#+OPTIONS: toc:nil
#+OPTIONS: mathjax:Y
#+OPTIONS: reveal_single_file:nil
#+OPTIONS: reveal_control:t
#+OPTIONS: reveal_progress:nil
#+OPTIONS: reveal_history:nil
#+OPTIONS: reveal_center:t
#+OPTIONS: reveal_rolling_links:nil
#+OPTIONS: reveal_keyboard:t
#+OPTIONS: reveal_overview:t
#+OPTIONS: reveal_width:1200
#+OPTIONS: reveal_height:800
#+OPTIONS: reveal_fragmentinurl:t
#+OPTIONS: timestamp:nil
#+OPTIONS: reveal_title_slide:nil

* footer :noexport:
Link up this folder to the web
#+begin_src shell :results silent
rm ~/public_html
ln -s $PWD ~/public_html
#+end_src

Generate a token
#+begin_src shell
curl -s https://multiplex.kccncna2021.pair.sharing.io/token | jq .
#+end_src

#+RESULTS:
#+begin_example
{
  "secret": "16303595814587938032",
  "socketId": "1ea00b34ec29b2a6"
}
#+end_example

Delete the Namespace
#+begin_src shell
kubectl delete ns kubecon-na-2021
#+end_src

#+RESULTS:
#+begin_example
#+end_example

Clear SnoopDB
#+begin_src shell
psql -U apisnoop -d apisnoop -h snoopdb.apisnoop -c "DELETE FROM testing.audit_event WHERE release='live';"
#+end_src

#+RESULTS:
#+begin_example
DELETE 7162
#+end_example
