#+Title:In  News letter summery of the SIG Arch meeting on 21 May 2020


* The Ownership of Kube-up
Ownership of Kube-up was placed on the agenda. It was not well advertised in advance, therefore it was agreed to inform the community via the mailing list to ensure that all interested parties could join the discussion.

* Platform extension mechanisms
Boundaries of platform extension mechanisms was discussed out of a mailing list tread about a recent KEP about adding a dynamic, remotely accessible platform extension for configuring the authentication chain of the kube-apiserver. In the mailing list thread several dimensions of extensibility was identified. Below is a short summery of the SIG Arch discussion.

** The anchor points discussed in the meeting was:
1. How are people thinking about cluster configuration? API's vs. API is served by the Kube API server.
2. How does a path to being included in conformance affect our thinking about whether things should be built into the Kube API server as built in API's?
3. Is the expectation the we would require something to be in conformance and require configuration?

** Configuration possibilities discussed:
*** Good Staring point for configuration:
- OIDC Configuration
- Ability to use multiple OIDC providers via tools for configuration instead of new API's
*** Secondary points to considered:
- Role-based access control
- Auth Mechanisms / Controlling authentication stack
- Custom resources definition
- Certificate Signing Reqsuest
- Dynamic Kubelet configuration
It would be possible to start slow, not through API's. It would be a good approach to see how it is used, then evaluate the use and demand.

** Factors to considered:
- Dynamic configuration options should have a “use-case” with justifiable value.
- The dynamic configuration should be a reasonable and helpful “Knob to turn” that a significant amount of people want to change at a high frequency or else must be significantly painful to change in any other way.
- If the function can be achieved with other primitives, adding it to the API surface area isn’t required.
- Openshift as an example of a platform which delivers additional value as a provider with a built-in auth server. Dynamic configuration can let people experiment to see how they can be used

** Three possible levels of configuration was distinguished:
- Static - never change
- Runtime soft - can change on the fly
- Runtime hard - requires process restart

** One-time vs. Many-time configuration:
- Experience show that as things are made dynamic, it result in user use-case discovery.
- Even if the configuration is a one-time cluster operator setting it allow for better interaction.
- It should also be considered if the options should be configurable at the cluster operator level or cloud provider level. Cluster operator rights vs. Cloud provider allowance.

** Possible different levels for Conformance releated to number of configurables
One way to approach the issue is through conformance levels where more or less configurables are available dependant on the "conformance level".

** The way forward:
The implementation of a decision tree would help to move things forward and to get consensus.





* Transcript
00:01
hello everybody this is the community
Sagan architecture meeting for May 21st
2020 and just we have a full house here
I want to mind everybody to abide by our
code of conduct and treat each other
with respect
we'll get started now so I'm displaying
my hang-up
children so in any case why don't we get
started there a couple things on the

agenda

John Belmaric:
I did what I say something I know a number here I probably for the second
item here unfortunately I didn't there was nothing on the mailing list about
this and so I personally have not had a chance to gather state about it I'm
talking about that keep ownership so I think that we would be better off if for
that particular item we send it out to the mailing list make sure that
everybody who's interested has an opportunity to know it's going to be on
the agenda for next time and we defer it to that so that's generally our policy
is that these sort of things like the free the first item on the agenda here
was raised a few days ago on the mailing list gives everybody an opportunity to
gather up their their thoughts about it and for people who are particularly
interesting it to actually show up the any case so sorry if that's a
disappointment but if my co-chairs agree I think that should be deferred to the
next meeting that sounds good to me okay thank you

Then let's get started then on the first item on the agenda here boundaries of platform extension mechanisms so

David and lo and Jordan which one of you
wants to expire
02:08
Jordan Liggit:

I can I can give an overview of this so the thing that prompted this was a
proposal to add api's to cube API server
to allow controlling the authentication
configuration for the API servers and so
that that was linked in the mailing list
thread there's a there's a open kept PR
around that and that started listing off
leads trying to trying to think about
how do we extend the platform what are
the different dimensions of
extensibility and what what is sort of
the reasoning behind the different types
of extensions we provide and support and
where where we expose those how we
expose those and so the goal here is to
kind of share some of that thinking
hopefully so it helps other SIG's other
components that are also trying to think
about reason about their extension
mechanisms this represents at least a
03:25
few hours of untangling our thoughts so
03:28
hopefully these dimensions are helpful
03:30
to share and think about but then also
03:33
to kind of ask questions about how
03:37
people are thinking about cluster
03:40
configuration api's versus api is served
03:44
by the cube api server so that's one
03:47
question and then the second one and
03:50
this was brought up in the mailing list
03:52
discussion how does sort of a path to
03:57
being included in conformance
04:02
our thinking about whether things should
04:04
be built into the cube API server as
04:06
built-in api's if if we don't think we
04:09
would require something to be in
04:13
conformance and require every
04:16
cube API server that's conformant to
04:18
surface this capability is that is that
04:23
the bar for a built-in API now something
04:26
that Brendan said in the mailing list
04:28
thread sort of sounded like that and I
04:32
know we've sort of danced around that at
04:33
points we're in a weird place where we
04:36
have things like our back that are not
04:39
part of conformance but our
04:42
sort of older built-in api's it's it
04:48
would be good to be clearer if
04:53
the expectation that something would be
04:55
added to conformance is basically the
04:58
bar for building a new API into the cube
05:00
API server so those those are the three
05:08
things that I was kind of wanting to
05:11
cover here just if people had thoughts
05:13
about these dimensions of extensibility
05:17
other ways of thinking about it
05:19
additional things they think we missed
05:21
that would be helpful to maybe add to
05:23
this body of knowledge and then those
05:26
two questions like do we do we
05:28
distinguish between cluster
05:29
configuration api's and cube api server
05:31
api's and the conformance question
05:36
so a question here Jordan so what do we
05:40
expect to come out of this discussion
05:43
are we trying to write down what we
05:46
expect so next time when another cap
05:50
comes with a question similar to what
05:54
was pointed out then it's easy to answer
05:58
thumbs up thumbs knit thumbs down
06:01
yeah decision trees that kind of help us
06:06
think about things like this so that if
06:09
a proposal comes up and we've already
06:11
thought through like is this more of a
06:14
cluster configuration API if so then
06:17
maybe it belongs in cluster API or
06:20
something similar and not in a built in
06:23
queue API server API a decision tree
06:26
like that is hopeful similarly a
06:31
decision tree like based on feedback
06:35
this would not be acceptable in some
06:39
percentage some significant percentage
06:41
of environments it doesn't look like
06:42
this would be reasonable to including
06:45
conformance therefore we don't think it
06:50
should be a built in API so decision
06:54
trees like that are helpful and look
06:59
kind of both of those both of those
07:02
things the boundaries of what should be
07:04
in the API server and the conformance
07:07
aspects are things that touch shake
07:10
architecture one other comment maybe
07:13
Jordan I would have is we've both before
07:17
we already dumped into discussion is
07:19
someone taking notes notes would be
07:21
helpful for this I'm sure
07:29
yes oh I'll try and take notes if
07:32
somebody drops a handy linking candy
07:36
link into the chat I was gonna have
07:41
Jordan it's ok was I agree we haven't
07:46
been consistent on this and the decision
07:48
tree is really helpful we also have some
07:51
api's that we haven't fully promoted
07:54
that went down various paths that I'd
07:58
want to use this as an opportunity to
07:59
maybe reflect on so dynamic cubic
08:02
configuration is a situation where I
08:05
feel like we started down a path that we
08:10
haven't really fully finished and I
08:12
think I can't identify a user who has
08:16
enabled it and I'm wondering if we
08:20
should reflect on that as we evaluate it
08:24
guys like this and a Tim has well yeah
08:31
if we a Tim if we didn't use the right
08:33
hand
08:40
yeah it's hard this is a pretty large
08:42
call just to as it's been pointed out
08:46
it's weird for us to have a bar around
08:51
conformance because I've worked on
08:53
confirmes for so long
08:54
as being the gate because it's very
08:57
inconsistent with what we do today so I
09:00
think as kind of maybe as Dirk pointed
09:03
out is that we need to rationalize kind
09:05
of what we have today along with any
09:09
criteria we want to put forwards towards
09:11
the future because otherwise it's way
09:14
too arbitrary myrrh to say like it must
09:17
meet this bar going forwards it's clear
09:20
that we've never had a bar or clearly
09:24
had that clearly defined lines as
09:27
prescriptive before
09:31
oh I think you've got your hand up there
09:40
I guess I'll raise my hand
09:44
yeah I just want to ask time Derrick
09:46
could you describe the dynamic cubed
09:48
configuration in like two sentences for
09:50
folks that are not familiar about I want
09:56
to say two years ago there was an effort
09:58
to allow the cubic configuration to be
10:02
changed dynamically right so if you you
10:06
wanted a cube API surface to go and say
10:09
enable this cube looks like you could do
10:11
that and you had a link on a node that
10:16
says this is where my cubic config is
10:18
and then the cubic had a complicated
10:21
orchestration procedure to roll out that
10:23
new config my experience on this is that
10:29
the feature I think did reach a beta
10:31
status but I don't think any anyone is
10:36
actually using it in production and I
10:38
think it's fair to say that in signal I
10:40
wouldn't encourage users to use this
10:42
right now one of the issues that I think
10:46
comes up with cubic configuration as
10:49
making that surface configurable was
10:55
insufficient when you didn't make the
10:58
container runtime or operating system
11:01
itself configurable so it wasn't like
11:03
you had one uniform config you could
11:05
apply across all clusters and everything
11:07
was going to be great
11:07
when dealing with how cubic
11:09
configuration was laid down so my
11:11
personal feeling was knowing what I know
11:15
now I would probably have cautioned us
11:17
against doing cubic config dynamically
11:21
but that I'm not sure if other
11:25
components to memory have explored
11:27
similar things but my experience right
11:29
now with cubic config was I think it was
11:32
a mistake maybe others in the sig feel
11:34
differently but I think that's my
11:37
personal feeling
11:45
all right I don't see a way to raise my
11:47
hand I'm a new client but I'll make its
11:51
comments and then it's 2-mile Claire and
11:53
daniel Smith so with respect to
11:57
conformance I think that's an
11:59
interesting idea
12:00
the Jordan raise but tiny I'm a little
12:03
bit leaning toward listen to me saying
12:06
that I'm not sure that that's the right
12:08
bar for whether something becomes the
12:10
core age I think that you know we live
12:14
efforts going on there to manage options
12:18
functions but level of granularity
12:24
meaning I don't want to create profiles
12:28
for every little feature that's possible
12:30
and I think that requires more thought I
12:35
think it's an interesting conversation
12:37
we should have probably but I'm not sure
12:41
it's the right time now the I think the
12:50
thing that specifically if we go back to
12:53
these these issues that they've been
12:56
raised of what are those dimensions of
13:00
accessibility and I think that a
13:02
critical aspect here to probably have
13:05
some sort of guidance for people on it's
13:07
around the frequency of changed things
13:11
that are only ever really set in the
13:13
beginning of the cluster in life or or
13:16
maybe you know change once or somebody
13:17
made a mistake although why they created
13:20
cluster it's not clear probably don't
13:23
deserve to be in the an API that can be
13:28
altered at runtime that that's
13:32
substantial this additional risk both
13:34
security-wise and operationally when
13:38
it's modify at one time like that so I
13:42
think that is a basic principle that I
13:44
makes a lot of sense to me I believe
13:48
next then we have to me all clear
13:54
I had a few comments on the the
13:56
conformance conversation but if we're
13:57
moving on from that I don't want a
13:58
rathole on it so I can house okay then
14:06
I'd be in your name Matt Clayton yeah I
14:09
was also gonna say something about the
14:10
compartments like I I find it surprising
14:12
that people think it's okay to have GA
14:15
things that aren't somehow compartment
14:16
tested I actually didn't realize that
14:19
our doctor for this tested I think that
14:23
we should probably fix that we are
14:27
working on that issue is the in the
14:29
conformance program things that are not
14:33
mandatory for cluster operators that are
14:38
sort of always always on we don't
14:40
currently have a mechanism although
14:43
we've made progress towards it
14:45
it's slow-moving but we're making
14:46
progress towards having away such that
14:49
essentially we can say if you enable
14:50
this functionality then it must behave
14:52
in this way yeah I but I think
14:56
specifically for like our back
14:58
I think people depend on that in their
15:00
application like being the ability to
15:02
like set up roles and stuff and it
15:04
should be like in conformers it
15:06
shouldn't be an optional part of the
15:07
system yeah I would just want to take
15:11
off on that right because there's Lee
15:18
isn't that part of conformance it's not
15:19
even on by default when so like it was
15:23
two different distinction yeah okay
15:27
that's interesting yeah and I was just
15:34
gonna like to add to Derrick's point on
15:36
cubed came together like really wanted a
15:38
hammer on the what we made dynamic was
15:42
not the right thing or the argument the
15:45
lesson there is what we made dynamic was
15:48
not the right thing which is when we had
15:51
very nearly scoped things we make
15:53
dynamic like compute and services and
15:56
all of that like we designed to have a
15:58
dynamic system where as they can take
16:00
through the cubelet we didn't make such
16:02
a distinction I think that's like the
16:03
the salient lesson
16:05
whatever extension point exists has to
16:09
have a really clear use case that has
16:11
value for a set of scenarios and has to
16:14
have justify its value just doing
16:17
dynamic config of a component I don't
16:19
think is sufficient like we've never
16:21
made the scheduler config generic and I
16:24
would certainly caution against for
16:27
instance if the schedule and this looked
16:29
totally hypothetical but like if the
16:31
scheduler wanted to change priorities
16:33
and make that dynamic there's lots of
16:34
people who the scheduler is inadequate
16:36
we have a lot of flexibility in the code
16:39
but if we were to go do a dynamic
16:42
scheduling policy that changed how
16:44
politics schedule but hey that really
16:46
needs to be a coherent design feature I
16:47
feel like that is a minimum bar for any
16:49
of the config that we do is it has to be
16:52
a reasonable knob that sufficient number
16:56
of people want to change it in dynamic
16:58
and high frequency rate that it
17:00
justifies this existence or it is so
17:03
painful to do it otherwise that it
17:07
absolutely must have a dynamic configure
17:11
and there was an example of this like
17:12
wide web hook we wanted the platform to
17:15
be extensible not everyone is ever going
17:18
to deploy a web Punk
17:19
but the alternative was is in Jordan's
17:23
decision tree putting code into cube API
17:26
server and that was really just too
17:27
painful um I think I'm next cuz I've
17:32
been Kim attract green mister all
17:37
cleared he can lower your hand I think
17:38
that all otherwise so I've been around
17:44
and both producer-consumer for dynamic
17:48
could the config on the cluster and
17:50
lifecycle side and although the
17:53
implementation was not actually what
17:57
exactly what we wanted and I think there
17:59
was boundary lines that were crossed as
18:01
Clayton pointed out there is definitely
18:03
demand from the wild to be able to
18:05
modify certain sets of configurations
18:08
there should be like a classification
18:10
like there's static configurations
18:11
things that you shouldn't change it
18:12
can't change then there are there are
18:15
things that are potentially runtime
18:16
configurations where you can actually
18:18
modify them either on the fly and then
18:21
there's like a partial runtime
18:24
configuration which cause a process to
18:25
restart that's said like we've never had
18:29
that delineation clearly demarcated
18:31
inside of how we do things we never had
18:34
dynamic configuration plumbed through
18:35
the whole system
18:37
it's very ad hoc today the promise of a
18:40
grand unified field theory of component
18:42
config is what Lucas always we've always
18:44
talked about and wished we had from the
18:47
cluster of life cycle perspective
18:48
because we treat config in the same way
18:51
we never got there was never really
18:53
funded from a community perspective
18:55
we've kind of as as Derek pointed out
18:59
it's like it's got to a certain point
19:02
then just kind of stopped and not been
19:04
revisited that said there is demand
19:08
there exists precedent all over the
19:11
codebase there's stuff in the component
19:13
config in the proxy there's this weird
19:15
mecca nation that actually exists inside
19:17
the scheduler which causes a hard
19:18
restart on the config for weights and
19:21
balances so it's just inconsistent I
19:25
think the demand is there the need is
19:27
there I think the enumeration has not
19:30
been clean the defined and the
19:31
boundaries have been clearly defined
19:41
you
19:50
who's next
19:55
lost track
19:59
John you're muted
20:04
what did you go next Joe I think I think
20:06
it was low I don't know if Lodge I don't
20:09
know why after you the one time versus
20:12
many times config I think this is
20:14
something that is I mean there are
20:19
definitely things like you know
20:21
extending the API server in other ways
20:23
like webhooks where where these things
20:25
are not changing often and I think we
20:28
see that there's a chicken and egg thing
20:30
where as we make things dynamic people
20:33
use them more and they find more usages
20:35
for them and I think one of the signs
20:37
for me like in this particular example
20:39
is that we see people hacking around to
20:41
introduce new auth mechanisms because
20:43
it's so difficult to install at the API
20:46
server level and so one example is like
20:49
you look at rancher and they have
20:50
essentially a way that they're abusing
20:52
service account jobs to provide user
20:54
accounts in the system because it's so
20:57
difficult to actually apply this stuff
20:59
in a consistent way across all the
21:01
different distributions in ways that
21:03
people have to manage this and so I
21:06
think in this particular case that's
21:07
that's an example there and then the
21:10
other point I want to make is that you
21:11
know for a long time now we've been
21:13
taking the control plane by being a
21:14
fixed idea to being something that is
21:17
really sort of more Fuzzle e defined
21:20
like is a webhook part of our control
21:22
plane are not part of our control plane
21:24
and we're doing this more and more and
21:26
more and so is it isn't it what's that
21:28
oh I didn't yes well yes well books are
21:32
part of our control climate right but
21:34
the thing is is that you start you know
21:37
between a web hook and a controller and
21:40
CR DS the the the delineation between
21:45
what is control plane and not control
21:47
plane is really becoming a fuzzy thing
21:50
the users that it's part of the control
21:53
plane what time tag if part of your
21:56
controller you can break your users that
21:57
are just part of the control plane what
22:01
do you mean by break users right like if
22:04
you're sending a request an API request
22:06
and API server gives you back to 500 and
22:09
the result is some component that's not
22:11
API server like some default is
22:14
somewhere else like whatever caused that
22:16
failure as part of the control plane
22:18
that's how that's my mental rule okay
22:22
and I would actually say from the users
22:23
point of view core functionality is part
22:25
of it and like you know let's take a
22:27
look at sort of the the ingress v2
22:29
gateway stuff that's going on right it's
22:30
more likely that we're gonna take stuff
22:32
that's built into the control plane now
22:34
and actually move that out and to be a
22:35
CR D type of thing that sits on the
22:37
outside so we're gonna have fundamental
22:39
functionality that is layered on from
22:41
the outside using crts and so yeah I
22:44
mean I think we can look at the control
22:45
plane from sort of the strict like are
22:47
we returning five hundreds but then we
22:49
can also look at the control plane in
22:51
terms of core functionality and we're
22:52
moving more and more to that stuff to
22:54
run on cluster being dynamically
22:55
configured and and so I don't think that
22:59
there's a clean line here so I'll let it
23:05
go sure why don't we go to mo now I'm
23:10
fully trying to remember the under
23:17
dynamic cubelet thing when I was so I
23:19
was just kind of googling it while we
23:21
talked so I could try like I'd known
23:24
about this feature I mean to me a
23:27
problem that I'm kind of observing from
23:29
what folks have just said is that it was
23:31
done sort of wholesale right like
23:33
there's a blob and as they're pointed
23:36
out it it was it was incomplete because
23:40
you can control the OS right so I would
23:45
not for example propose like dynamic API
23:48
server config in one giant blob either
23:50
right that's why they kept that I wrote
23:53
was much more targeted at a particular
23:55
thing right authentication right and
23:57
from a technical implementation that's
24:00
very straight forward right it's very
24:02
much a decision of do we want to do this
24:05
not how do we do this the other bit I
24:10
wanted to sort of point out is something
24:13
Brendan Byrne said in the thread and
24:16
Nicky's on the call but I did find it
24:19
interesting though is that you know as
24:21
time goes on if the canonical way of
24:24
that many folks consume cube is through
24:28
hosted providers it becomes harder
24:31
these distinctions of like I only do
24:34
this less often or I only do this
24:36
sometimes because if the answer becomes
24:39
I can never do this because I'm never
24:41
present at that layer well it doesn't
24:46
matter that I only want to do it once
24:48
you made my one go to zero and I'm an
24:50
Aggie well just make a comment and then
24:56
speak maybe it would be next
24:57
the in the hosting provider situation
25:03
the the hosting provider is taking on a
25:06
lot of the management or operational
25:09
burden and so for them to have the I
25:13
don't think that whether it's available
25:15
via rest or whether it's available via
25:17
files or Steeleye flags is really
25:21
pertinent there because the Ostra
25:24
provider to make those all those options
25:26
available if they choose to any one of
25:29
those options you're effectively asking
25:35
everyone to reinvent the wheel over and
25:37
over and then they'll be in terms of how
25:41
you apply that right it'll be very
25:44
specific specific I think I'm sure it
25:51
sure but I think that mean if if we're
25:58
talking about functionality that's sort
26:00
of at the cluster operator level then
26:06
the ability for managing that and the
26:11
responsibilities of that is going to be
26:13
with that cloud provider look them up
26:16
the cloud provider to kind of thread
26:18
that weird line between what they give
26:20
to it because where's your monthly go
26:22
Wow but you know the the additional risk
26:29
associated with exposure of you know
26:32
it's a good point I've taken enough time
26:40
out of turn so eyelids
26:42
if I can make a comment like the whole
26:44
500 and like hook 500 great guys over a
26:48
whole lot acacia never can do it every
26:55
request the way I guarantee that you
27:00
will never stop something that was
27:02
dynamically configurable unless
27:03
everything before so in this this thing
27:07
with this thing we saw the smaller
27:10
surface of breaking your API server
27:14
I don't follow how that's possible I'll
27:20
do local static config is always
27:22
considered first right so if you do it
27:24
that way you guarantee that the only
27:27
time you ask the remote config is after
27:30
all the local configure says I don't
27:32
know what this request is for right so
27:34
by definition if you were getting a 500
27:37
is because everything local says I don't
27:39
know what's going on and then the remote
27:41
thing says I also don't know what's
27:42
going on and no matter what your request
27:44
was gonna get denied I see okay Steve
27:57
thanks I'm gonna add on to where I think
28:00
Moe was going with this John a few
28:03
minutes ago you said you mentioned about
28:05
hosting providers taking on burden and
28:08
in this case as a customer I look at
28:12
more like what are my rights as a user
28:14
are there certain things that if a maybe
28:18
this gets into conformance but if a
28:20
hosting provider says they're offering
28:22
kubernetes to me I would like there to
28:24
be certain capabilities that I know are
28:27
available to me as a consumer that
28:30
they're not gonna cut me off from and I
28:34
still like because I've been cut off
28:39
from being able to integrate my own
28:41
authentication system all over the place
28:45
I know exactly how it works and yet I'm
28:47
not allowed to do it in too many times
28:49
because I either opted to take on the
28:52
burden of operating the cluster entirely
28:54
myself or
28:56
I'm told that as a customer I don't have
28:59
that right because I can do something I
29:01
don't know dangerous or something so I
29:03
see some of this stuff is not just the
29:07
dimension of how dynamic it needs to be
29:09
but really who has the right to
29:13
determine what is available to the
29:15
cluster operator and maybe as I saw a
29:19
point made of very early on maybe this
29:21
belongs in the cluster API if we could
29:24
compel hosted offerings to actually on
29:28
or something like that so maybe it is
29:30
something that is only important when
29:32
the cluster is first created against
29:35
this question of should I be guaranteed
29:37
that I'm allowed to configure this as a
29:39
customer if it's not I'll just come
29:43
that's not informants it would be that
29:49
is exactly the purpose of conformance is
29:51
to provide a guaranteed set of
29:53
functionality for end-users so they can
29:57
know their workloads work consistently
29:59
across those environments so I think
30:00
that that's a great point it really
30:03
comes into play when we decide whether
30:04
this cosmetic performance which matches
30:06
all the way up to join its point of
30:07
shouldn't that be a consideration
30:09
early on in whether it becomes a built
30:13
in API or not which I think we've
30:17
discussed a little bit but conclusion
30:20
I'm Jordan next and then Tim
30:26
little wear my hat there we go
30:29
gathering a few thoughts so back to Tim
30:31
st. Clair's coming about component
30:34
configuration I am in favor of
30:40
describing configuration in structured
30:43
ways I think that has a lot of benefits
30:47
it lets the example of if this was to be
30:55
surfaced and controllable via a custom
30:58
resource a natural way to describe that
31:03
would be to have that custom resource
31:06
include the config snippet that would be
31:10
given to the API server
31:11
I think describing that in a structured
31:16
way is a positive thing to do and making
31:22
it simple to have a consistent way to
31:28
make it available via a REST API if
31:31
desired that that seems to me to be a
31:33
natural mapping if this is a cluster
31:38
operator one and two explosives as a
31:40
REST API to Steve's point I don't think
31:47
controlling the authentication stack is
31:51
fundamental to using a criminai T's API
31:56
I think being given a community's API
32:01
surface that you can create custom
32:03
resources against and create pods and
32:07
interrogate kindig Maps and like those
32:10
things make sense to me as being
32:13
fundamental to the API and that's why
32:15
those are the things that we have
32:17
informants I can certainly see use cases
32:21
for adding in a custom authentication
32:24
stack but I don't think that's
32:26
fundamental to being able to use the API
32:36
I think it's a bad word with use I think
32:41
of it as operator in other words it is
32:46
true that a user who you've blessed to
32:49
do things like create config Maps
32:51
they'll be perfectly happy with a system
32:54
like that but your organization might
32:56
not even allow you to roll it out to
33:00
users like that if certain other
33:03
authentication things can't be put in
33:04
place so my hands on
33:14
so I'll start I have to two points I am
33:18
sitting in the chat and mostly agreeing
33:20
with what Joe is saying I don't have a
33:24
strong feeling whether a provider
33:27
specific API for twiddling knobs or a
33:30
common policy for twiddling knobs or
33:33
comment API rather but I do think it's
33:35
important that providers be able to say
33:38
which knobs they're ok with you
33:40
twiddling or not if we want to do
33:42
dynamic configuration of things like
33:44
flags that's totally cool but I think
33:47
providers need to be able to say like I
33:50
can't support it if you twiddle display
33:52
and to to the question about rights I
33:56
think the default position for
33:58
everything that's not otherwise
34:01
specified is it's up to the provider to
34:03
decide if you're allowed to twiddle it
34:04
or not the providers are offering you
34:06
different you know benefits for using
34:10
them some some are supports in SaaS some
34:12
are low costs some are SR ease whatever
34:15
the trade-offs you're getting from your
34:16
provider if you don't like the knobs
34:19
that they're allowing you to twiddle
34:20
either vote with your wallet or Lobby
34:22
them to change it and the exception case
34:26
there should always be if we as a
34:28
community decide it's really important
34:30
for somebody to be able to configure
34:32
something like authentication and we add
34:34
an extensible API for it like web hooks
34:37
and CR DS then cool that thing was part
34:41
of conformance and providers will have
34:42
to think that's how you can lobby the
34:44
providers to the question at hand I
34:47
actually have no strong opinion I don't
34:49
see why it's a bad idea
34:50
I'm not an auth person if we think it's
34:53
this is a common enough thing and
34:54
frankly I've heard it many times
34:58
then we should support it dynamically
35:00
and that becomes something that conforms
35:02
should cover in my opinion
35:07
I'm done thing
35:09
so I'm not sure if you were on Dexter or
35:11
5mon next I think it was you Daniel okay
35:15
I just want to say something I'm slowly
35:18
putting back in to catch all this stuff
35:20
we went through four other extensibility
35:23
features like books and CDs and we felt
35:29
it was pretty important at the time to
35:30
get those conformance tested and
35:31
basically mandate them everywhere under
35:34
the theory that an extensibility feature
35:36
isn't really useful unless you can you
35:39
can use it anywhere right like the idea
35:41
is like the whole promise of kubernetes
35:44
is working with portability right but as
35:46
your workload starts to include parts
35:48
and aspects of the control plane you
35:50
need to take those with you to write
35:52
your application isn't really portable
35:54
if it depends on the C or D and you
35:55
can't take that C or D somewhere else
35:58
with you so if the argument is that this
36:01
is a an extensibility feature for users
36:06
and users will rely on being able to
36:09
take their identity system around with
36:11
them like this then it really ought to
36:14
be conformance tested right and mandated
36:18
but if it's not that sort of
36:20
extensibility feature then maybe it
36:24
doesn't need to be dynamic either that's
36:27
that's how I think about it so
36:34
just a some of the stuff I was saying in
36:36
the chat I think you know having the
36:38
capability versus having the pot you
36:40
know allowing that as two separate
36:42
things having a standard API for how you
36:44
do that makes it easier for end users
36:48
and consumers to say I want you to
36:50
enable ah X right versus saying I want
36:53
you to enable me to do this flag doing
36:54
it and you have to plummet through sort
36:56
of like some other type of system to be
36:58
able to do that so I think it really
36:59
creates a clear way for consumers to ask
37:02
for that capability now with respect to
37:04
conformance you know I've said for a
37:06
long time but I haven't put the work in
37:08
to try and make it happen so take that
37:09
for what it is we should have probably
37:11
different buckets of conformance with
37:13
logos and levels to go with it and so
37:15
then like you know I want like you know
37:18
you know cluster control level three
37:20
means okay you get to control this
37:22
particular I think there's stuff that
37:24
can be done there I don't think that
37:26
conformance necessarily needs to be an
37:28
all-or-nothing type of thing in terms of
37:32
like allowing this and actually like
37:33
like one of the scenarios that I'm
37:35
looking at here is that you look at
37:37
something like open shift and it has a
37:38
built-in olaf server that's integrated
37:40
into it that allows you to do something
37:43
like deploy a dashboard that allows
37:48
end-users to be able to log into the
37:50
dashboard and then further authenticate
37:52
to the api server in a unified way
37:54
that's a huge benefit to end-users and
37:57
right now that's tied to the
37:59
capabilities that are delivered from the
38:02
underlying provider you know providing
38:07
the mechanisms for people to start
38:09
exploring what it means to be able to
38:12
play with different auth systems in the
38:15
way that they can integrate this in
38:16
automated ways whether that be a
38:18
dashboard or whether it be other tools
38:20
that are actually automating across
38:22
multiple clusters coming from different
38:23
vendors that's a huge value plus to
38:26
end-users to be able to actually have a
38:27
consistent tool story including
38:30
authorization that they're using across
38:32
all of their clusters and for me that's
38:34
the real end user benefit that we're
38:36
driving here
38:38
you
38:45
Jordan Moe I thought Clayton has his
38:48
hand up last
38:51
okay so there there are some aspects of
39:01
what is proposed that I like like the
39:05
ability to address multiple oh I deceive
39:08
writers that's something that has been
39:10
asked for for a while in different
39:13
contexts I think starting slow and
39:19
adding support extending the current
39:24
support for a single YDC provider that's
39:27
configured when the cube API server
39:30
starts extending that to support
39:32
multiple would give people who are
39:38
configuring a cube API server tools that
39:42
would let them support this it wouldn't
39:45
require it it wouldn't add a built-in
39:48
API it wouldn't raise the questions
39:52
about conformance and all of that but it
39:54
would it would add tools to allow this
39:59
then allowing providers to expose that
40:02
via C or D or via cluster api or via
40:07
different mechanisms you know checkbox
40:10
in there in their web console that lets
40:14
people spend up a cluster however they
40:15
want to expose it that to me is the next
40:19
step that says like are people demanding
40:21
this if there's demand then there's a
40:24
clearer way than the API server to
40:25
provide it
40:28
I would rather see us start there
40:31
instead of starting at this is a new
40:34
built-in API to me this API does not
40:39
seem like something that keep API but
40:41
server should be serving it seems like
40:43
cluster api or cluster configuration so
40:48
yeah to Tim's question which Tim Tim
40:57
David is not in favor of that I am not
40:59
in favor of it might might yeah actually
41:04
but I can make a comment about about
41:05
that in particular I mean I think that
41:08
second architecture isn't really an
41:10
escalation point for overriding TLS of
41:14
states when they've made a decision and
41:16
what we can talk about here are the kind
41:18
of meta points that they come up around
41:21
like architectural II do we want
41:24
principles around this and around how we
41:27
decide whether some things available as
41:29
a runtime API versus if a you know a
41:32
flags or a or a file and I think we can
41:35
you can have that discussion here but
41:38
you know that the TLS of that sitting
41:41
really it are ultimately once you make
41:43
the decision in this particular case
41:45
then I don't know that it's appropriate
41:49
necessarily from seeking architecture to
41:51
somehow write them or even have
41:53
athlete's 42 so then that's for me
41:57
that's the context to this conversation
41:58
I'll say that is that this is about the
42:03
architectural principles as opposed to
42:05
this specific case now I'm following on
42:10
that I believe we get heavy hands this
42:12
is clean extra videos I just before we
42:17
move on I didn't want to say like I when
42:21
I was reviewing the cap I was trying
42:22
very hard to understand like specific
42:25
requests and specific gaps in the
42:29
current extension mechanisms the API
42:31
server supports and right now supporting
42:34
only a single oh I deceive a writer
42:35
seems to me like a gap that we could fix
42:40
without Radek
42:42
altering the exposure of the current
42:47
configuration that would allow
42:49
addressing the biggest requests that
42:52
I've seen and we're linked from the cab
42:53
so my goal is not to just say no
42:57
everything's perfect we're not going to
42:58
touch anything it's to identify what can
43:00
we change what can we add what 26 to
43:03
unblock specific high-value mixed cases
43:14
my next again unless you're gonna leave
43:18
Clayton I don't well I say gentle there
43:22
Jordan didn't know yes mom
43:23
no I guess so on the whole like having
43:29
multiple ITC providers right like the
43:33
the part that's concerning there is
43:35
right like we're gonna well do work in
43:36
treat which is fine we always have to do
43:38
stuff in there edge but then we'll have
43:40
to do work out a treat that's also fine
43:42
maybe one time kind of work right but
43:44
the part that's a really hard sell is
43:46
we're gonna then ask every single
43:47
provider to go wire this stuff up right
43:50
and like wiring stuff to the API server
43:52
is like the most painful thing to work
43:54
right when I'm kind of rationalize is if
43:59
you just left it off by default and then
44:02
let a provider pass a flag got you turn
44:04
it on if they care like what is the harm
44:12
it gives you all and like me that's what
44:14
they are but the bar is not that it's
44:17
harder to extend them to build in as a
44:20
consumer built in is always easier
44:23
that's how we ended up with six cloud
44:25
provider or libraries built it this is
44:28
not about the consumer right if the
44:30
consumer gets a REST API I think they'll
44:32
be happy right
44:34
I'm sorry R cube rest api probably it's
44:36
a vaguely consistent cube rest api
44:38
across provider is probably what a
44:40
consumer would be happy with it's the i
44:45
think the hard sell is gonna be is
44:47
you're going to ask every single
44:48
provider to go do work right and and i
44:53
don't think that the top request is i
44:55
want to have multiple IDs you can have
44:56
it's a pop request is i just want to
44:58
configure one dynamic league on lucky KS
45:01
like that's actually the top request so
45:08
I think we're again we're actually try
45:10
to blow on time here and we're starting
45:12
to drilling to really a discussion that
45:14
that is between the on sing-off and
45:16
maybe she sings as opposed to a policy
45:22
discussion around like what are the
45:23
principles behind are extensible
45:25
functions so
45:27
I hear you that year you know you're
45:30
concerned that it you know it creates
45:33
additional work and like given the
45:37
interest of time some of other people
45:38
that want to talk I think that
45:40
discussion probably needs to be
45:42
revisited and sit out there treatment
45:45
grants I don't know exactly where or
45:48
continued on BLS you know unless but uh
45:50
let's let the next dump I think was
45:52
Clayton was not just yeah I wanted to
45:55
drill on the meta point the Jordan
45:57
brought up which is into Jose as well
46:00
like it's the only way that you could
46:02
accomplish something that is fairly
46:04
reasonable and by fairly reasonable we
46:07
actually need a bar for what that is is
46:09
to put code into cube API server were
46:13
probably not done in terms of adding
46:15
mechanisms but I would probably say I
46:19
wouldn't I wouldn't feel like the first
46:22
place that we would start a mechanism is
46:24
allowing the using a lower-level
46:27
primitive to accomplish that in the
46:30
short run so like like in just in this
46:32
example like it should be possible to do
46:35
server integrations that let you do a
46:38
loss integration cleanly or IDC
46:41
integration cleanly but if you can use a
46:43
lower level primitive I think that's
46:44
where we should start and the bar like
46:48
when we think about what we define as a
46:49
bar like we should figure out a way to
46:51
capture this into the bar is not that it
46:54
could be useful or that it is useful or
46:57
that some people might want it but the
46:59
bar is probably it is so overwhelmingly
47:02
obvious to it to a chunk a significant
47:05
chunk and I'm using vague words here
47:07
because I don't know what that is of the
47:09
community that is obviously something we
47:11
should take on and over time and like
47:14
this project we dropped that Bart like
47:16
that bar has gotten higher and higher
47:18
like you have to do a lot to move the
47:20
needle and we still have a lot of other
47:22
things that we're trying to work but if
47:23
you can't do it at all I think that's
47:25
the easiest one for like as Jordan was
47:26
saying in the specific case you can't do
47:28
it at all we should unblock it but we
47:31
don't have to unblock it by adding new
47:33
surface area or extensive surface area
47:35
for it
47:38
so if I could really explain what you're
47:40
saying is essentially that if the
47:41
function can be achieved in other ways
47:43
with existing primitives from proxy or
47:46
other things we do then
47:49
adding it to the certain area even if it
47:53
that's more painful so a really concrete
47:59
example we have a mission webhooks they
48:01
don't solve every problem there's things
48:04
that people do to fork the API server to
48:06
accomplish that running custom code
48:07
there's a bar where you cross the line
48:10
from running custom code in a cube api
48:12
server to something like an admission
48:14
web hook there's a middle ground which
48:16
is the lower level primitive we should
48:18
make sure we have those as necessary to
48:20
accomplish these but I think the bar
48:23
between that in the next higher level is
48:25
growing over time of this project it
48:27
should be possible it's just we don't
48:28
have to make it easy i Clayton as a
48:32
related point did you want to discuss
48:34
what you had brought up I think maybe to
48:36
say gods ago maybe even before that that
48:39
we never addressed the surface area of
48:41
cube that crosses the boundary between
48:43
workloads and infrastructure oh yeah
48:46
that's like 30 minutes discussion we
48:47
probably ran out but it was just a very
48:49
brief like that when we were trying to
48:50
come up with a framing for this one of
48:52
them was we have we started by being
48:55
very workloads specific and we left the
48:58
door open that we could be a meta meta
48:59
provider and you can install these api's
49:01
and Brendan for us just to put a bunch
49:04
of code in and we all hated him and then
49:06
we did it it turned out to be good but
49:09
like extending the API servers adding a
49:10
really setting webhooks we did that to
49:12
specifically
49:13
grow the ecosystem for the end app but
49:17
there are a lot of people who found
49:18
value in the meta of the loopback for
49:20
managing the platform itself or you know
49:23
injecting things that make the platform
49:25
more powerful for all the components we
49:28
never really define what the difference
49:30
between how much time we spend on
49:32
managing the platform except this config
49:35
or is basic primitives and how much you
49:37
had workloads we have to gap between
49:38
though we've never unified them
49:45
so one thing I'm still feeling I'm good
49:51
you're next July I was just gonna say
49:53
guys I mean one thing I'm still
49:55
struggling with is you know we have a
49:58
fairly extensive set of api's around
50:00
essentially managing and improving
50:01
certificates the csr stuff and
50:05
practically there's no reason for that
50:07
stuff to be built in and with an
50:13
extension point that we're talking about
50:15
here you could actually layer that on
50:17
top of this and so in my mind the you
50:21
know a good test of extension
50:23
capabilities is if you can actually find
50:26
more universal truths that are lower
50:28
level than the stuff that you had to
50:29
hack in there I've always been very very
50:32
uncomfortable with the the CSR stuff and
50:37
so talking about the cubelets actually
50:40
you know I see Dan I see Daniels down
50:43
there talking about the cubelets using
50:44
the CSR stuff there is no reason why
50:46
that couldn't have been built on the
50:47
outside and actually built into some of
50:49
the cluster API cube admin stuff in fact
50:51
we actually did some stuff as part of
50:53
that for cube admin that was some of the
50:55
proto work for the CSRs there was
50:57
there's absolutely no reason that that
50:58
has to be built in and so I think this
51:03
is you know a similar thing where you
51:05
know we could take the csr stuff
51:07
actually layer it on with extension
51:08
mechanisms using the multi provider type
51:12
of point of view to be able to do it and
51:15
I think and I think that sort of
51:18
universal truth and discovery and those
51:20
sort of lower-level systems for me is a
51:22
good litmus test of the types of things
51:23
that we should be driving towards
51:32
just just to Joe's point a couple notes
51:37
there when cubelet bootstrapping and
51:40
CSRs were added custom resources did not
51:42
exist cube Adam did not exist cluster
51:44
API did not exist so if those things did
51:48
exist
51:49
Kiba admin get exhausting one three
51:53
really the the bootstrap tokens actually
51:57
predated any automatic see us our stuff
52:00
that we had a freaky diamond interesting
52:02
and
52:06
exact based client authentication did
52:10
not exist so the ability to give a
52:12
qiblah to keep config and it stay like
52:16
I'm gonna make an API call go get the
52:18
cred and like be able to get it what
52:20
deal whatever mechanism you wanted none
52:21
of they're all one of those things did
52:24
not exist if they had it is likely that
52:29
the csr and people had bootstrapping
52:31
stuff would look different and and would
52:33
have been built on top or as an
52:36
extension yeah but we've been continued
52:38
to sort of add more features and expand
52:41
the footprint of the csr stuff beyond
52:43
just service accounts and just couplets
52:46
I wouldn't say we're expanding it I
52:48
would say we are actually like
52:51
documenting and clarifying what it
52:54
currently is and what promises and
52:56
guarantees it has so again my
53:05
perspective on the dynamic gothis stuff
53:07
is that we should unblock gaps that
53:12
exist in my mind that is the OIG support
53:16
like we should go slow and not add build
53:20
an address and then we should see how
53:27
people use the multi OID seeking
53:31
building or the custom mechanisms and
53:44
reevaluate
53:45
whether this very widely enough when
53:48
there's demand and the controls that can
53:52
be placed surrounded are sufficient to
53:55
build it into the qadi servitor I'm not
53:57
in favor of that but if further evidence
54:02
and the rest of the project
54:06
besides this is the direction I'd be
54:08
willing to hear that but I wouldn't
54:11
start there
54:13
I mean damn you's a sexy little stand-up
54:17
and we're pretty much out of time
54:22
yeah I just know what we need to do next
54:26
he pees willing to write some of this up
54:30
but I think we need to work on some
54:32
decision tree that Jordan mentioned
54:35
right at the beginning
54:41
just to be clear that decision tree is
54:44
really hard as I mentioned earlier given
54:46
the history around so it's gonna be a
54:49
little bit of a what would we like
54:51
versus what have we done in the past and
54:53
where we are yes waiter me one reader
54:56
you made up yeah yeah obviously we can
55:01
only affect the future not the best so
55:03
let's let's look at the decision tree
55:05
for what we think if the right principle
55:07
is moving forward and that's that's the
55:11
best we can do
55:14
you
55:19
okay well thank you everybody
55:22
obviously the baking agenda I think that
55:27
hippy has volunteered to write this up
55:30
the notes and try to summarize and send
55:32
it out to the mailing list so please
55:33
look forward to that and reply and you
55:38
know clarify whether it's accurate or
55:40
not if probably easiest if you put that
55:42
in a Google Doc and then people can
55:44
comment on it as opposed to having that
55:46
mailing thread if that's acceptable to
55:51
everybody thank you very much everybody
55:54
interesting discussion and we will talk
55:56
to you all soon
55:59
and you guys by
